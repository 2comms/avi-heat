# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from options import *


class VsDebugFilter(object):
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'name',
        'se_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'se_uuid': se_uuid_schema,
    }


class AutoScaleMgrDebugFilter(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("uuid of the Pool"),
        required=False,
    )
    intelligent_autoscale_period_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("period of running intelligent autoscale check"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'intelligent_autoscale_period',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'intelligent_autoscale_period': intelligent_autoscale_period_schema,
    }


class CloudConnectorDebugFilter(object):
    # all schemas
    se_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("filter debugs for a SE"),
        required=False,
    )
    app_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("filter debugs for an app"),
        required=False,
    )
    disable_se_reboot_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE reboot via cloud connector on HB miss"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'se_id',
        'app_id',
        'disable_se_reboot',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_id': se_id_schema,
        'app_id': app_id_schema,
        'disable_se_reboot': disable_se_reboot_schema,
    }


class HSMgrDebugFilter(object):
    # all schemas
    metric_entity_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    entity_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    pool_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    server_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    period_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    skip_hs_db_writes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'metric_entity',
        'entity',
        'pool',
        'server',
        'period',
        'skip_hs_db_writes',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'metric_entity': metric_entity_schema,
        'entity': entity_schema,
        'pool': pool_schema,
        'server': server_schema,
        'period': period_schema,
        'skip_hs_db_writes': skip_hs_db_writes_schema,
    }


class SeMgrDebugFilter(object):
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
    }


class AlertMgrDebugFilter(object):
    # all schemas
    alert_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("filter debugs for an alert id"),
        required=False,
    )
    alert_objid_schema = properties.Schema(
        properties.Schema.STRING,
        _("filter debugs for entity uuid"),
        required=False,
    )
    cfg_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("filter debugs for an alert config"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'alert_uuid',
        'alert_objid',
        'cfg_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'alert_uuid': alert_uuid_schema,
        'alert_objid': alert_objid_schema,
        'cfg_uuid': cfg_uuid_schema,
    }


class MesosMetricsDebugFilter(object):
    # all schemas
    metric_entity_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    mesos_master_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    mesos_slave_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    metrics_collection_frq_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'metric_entity',
        'mesos_master',
        'mesos_slave',
        'metrics_collection_frq',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'metric_entity': metric_entity_schema,
        'mesos_master': mesos_master_schema,
        'mesos_slave': mesos_slave_schema,
        'metrics_collection_frq': metrics_collection_frq_schema,
    }


class MetricsMgrDebugFilter(object):
    # all schemas
    obj_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    entity_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    skip_metrics_db_writes_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    logging_freq_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    log_first_n_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    metric_instance_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    skip_cluster_map_check_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    disable_hw_training_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    license_grace_period_schema = properties.Schema(
        properties.Schema.STRING,
        _("setting to reduce the grace period for license expiry in hours"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'obj',
        'entity',
        'skip_metrics_db_writes',
        'logging_freq',
        'log_first_n',
        'metric_instance_id',
        'skip_cluster_map_check',
        'disable_hw_training',
        'license_grace_period',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'obj': obj_schema,
        'entity': entity_schema,
        'skip_metrics_db_writes': skip_metrics_db_writes_schema,
        'logging_freq': logging_freq_schema,
        'log_first_n': log_first_n_schema,
        'metric_instance_id': metric_instance_id_schema,
        'skip_cluster_map_check': skip_cluster_map_check_schema,
        'disable_hw_training': disable_hw_training_schema,
        'license_grace_period': license_grace_period_schema,
    }


class DebugFilterUnion(object):
    # all schemas
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    se_mgr_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeMgrDebugFilter.properties_schema,
        required=False,
    )
    vs_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsDebugFilter.properties_schema,
        required=False,
    )
    metrics_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MetricsMgrDebugFilter.properties_schema,
        required=False,
    )
    hs_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=HSMgrDebugFilter.properties_schema,
        required=False,
    )
    alert_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AlertMgrDebugFilter.properties_schema,
        required=False,
    )
    autoscale_mgr_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AutoScaleMgrDebugFilter.properties_schema,
        required=False,
    )
    cloud_connector_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=CloudConnectorDebugFilter.properties_schema,
        required=False,
    )
    mesos_metrics_debug_filter_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosMetricsDebugFilter.properties_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'type',
        'se_mgr_debug_filter',
        'vs_debug_filter',
        'metrics_debug_filter',
        'hs_debug_filter',
        'alert_debug_filter',
        'autoscale_mgr_debug_filter',
        'cloud_connector_debug_filter',
        'mesos_metrics_debug_filter',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'type': type_schema,
        'se_mgr_debug_filter': se_mgr_debug_filter_schema,
        'vs_debug_filter': vs_debug_filter_schema,
        'metrics_debug_filter': metrics_debug_filter_schema,
        'hs_debug_filter': hs_debug_filter_schema,
        'alert_debug_filter': alert_debug_filter_schema,
        'autoscale_mgr_debug_filter': autoscale_mgr_debug_filter_schema,
        'cloud_connector_debug_filter': cloud_connector_debug_filter_schema,
        'mesos_metrics_debug_filter': mesos_metrics_debug_filter_schema,
    }


class DebugController(AviResource):
    resource_name = "debugcontroller"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    sub_module_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    trace_level_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    log_level_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    filters_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugFilterUnion.properties_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'name',
        'sub_module',
        'trace_level',
        'log_level',
        'filters',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'sub_module': sub_module_schema,
        'trace_level': trace_level_schema,
        'log_level': log_level_schema,
        'filters': filters_schema,
    }


def resource_mapping():
    return {
        'Avi::DebugController': DebugController,
    }

