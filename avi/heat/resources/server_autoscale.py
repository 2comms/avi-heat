# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from options import *
from syserr import *
from common import *


class AutoScaleMesosSettings(object):
    # all schemas
    force_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Apply scaleout even when there are deployments in progress"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'force',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'force': force_schema,
    }


class ServerAutoScaleOutInfo(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the Pool"),
        required=True,
    )
    num_scaleout_servers_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    num_servers_up_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    reason_code_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    load_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    available_capacity_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'num_scaleout_servers',
        'num_servers_up',
        'reason',
        'reason_code',
        'load',
        'available_capacity',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'num_scaleout_servers': num_scaleout_servers_schema,
        'num_servers_up': num_servers_up_schema,
        'reason': reason_schema,
        'reason_code': reason_code_schema,
        'load': load_schema,
        'available_capacity': available_capacity_schema,
    }


class ServerAutoScaleFailedInfo(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the Pool"),
        required=True,
    )
    num_scalein_servers_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    num_servers_up_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    reason_code_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'num_scalein_servers',
        'num_servers_up',
        'reason',
        'reason_code',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'num_scalein_servers': num_scalein_servers_schema,
        'num_servers_up': num_servers_up_schema,
        'reason': reason_schema,
        'reason_code': reason_code_schema,
    }


class ServerId(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
    )
    port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    external_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("This is the Pool servers external uuid"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'port',
        'external_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'port': port_schema,
        'external_uuid': external_uuid_schema,
    }


class ServerAutoScalePolicy(AviResource):
    resource_name = "serverautoscalepolicy"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    intelligent_autoscale_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use Avi intelligent autoscale algorithm where autoscale is performed by comparing load on the pool against estimated capacity of all the servers."),
        required=False,
    )
    intelligent_scaleout_margin_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Minimum extra capacity as percentage of load used by intelligent scheme. Scaleout is triggered when available capacity is less than this margin."),
        required=False,
    )
    intelligent_scalein_margin_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum extra capacity as percentage of load used by intelligent scheme. Scalein is triggered when available capacity is more than this margin"),
        required=False,
    )
    min_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("No scale-in happens once number of operationally up servers reach min_servers"),
        required=False,
    )
    max_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum number of servers after scaleout"),
        required=False,
    )
    max_scaleout_adjustment_step_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The number of servers to scale up. When  target servers are more than the max_servers then it would be  less than the min_scaleout_adjustment_step"),
        required=False,
    )
    max_scalein_adjustment_step_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The number of servers to scale in. When  target servers are more than the max_servers then it would be  less than the scaleout_adjustment_step"),
        required=False,
    )
    scaleout_cooldown_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("No two scaleout happens within this period"),
        required=False,
    )
    scalein_cooldown_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("No two scale-in happens within this period"),
        required=False,
    )
    scaleout_alertconfig_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    scaleout_alertconfig_uuids_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of alert related to these alert configs used as triggers for server scale out"),
        schema=scaleout_alertconfig_uuids_item_schema,
        required=False,
    )
    scalein_alertconfig_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    scalein_alertconfig_uuids_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of alert related to these alert configs used as triggers for server scale in"),
        schema=scalein_alertconfig_uuids_item_schema,
        required=False,
    )
    use_predicted_load_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use predicted load rather than current load"),
        required=False,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'name',
        'intelligent_autoscale',
        'intelligent_scaleout_margin',
        'intelligent_scalein_margin',
        'min_size',
        'max_size',
        'max_scaleout_adjustment_step',
        'max_scalein_adjustment_step',
        'scaleout_cooldown',
        'scalein_cooldown',
        'scaleout_alertconfig_uuids',
        'scalein_alertconfig_uuids',
        'use_predicted_load',
        'description',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'intelligent_autoscale': intelligent_autoscale_schema,
        'intelligent_scaleout_margin': intelligent_scaleout_margin_schema,
        'intelligent_scalein_margin': intelligent_scalein_margin_schema,
        'min_size': min_size_schema,
        'max_size': max_size_schema,
        'max_scaleout_adjustment_step': max_scaleout_adjustment_step_schema,
        'max_scalein_adjustment_step': max_scalein_adjustment_step_schema,
        'scaleout_cooldown': scaleout_cooldown_schema,
        'scalein_cooldown': scalein_cooldown_schema,
        'scaleout_alertconfig_uuids': scaleout_alertconfig_uuids_schema,
        'scalein_alertconfig_uuids': scalein_alertconfig_uuids_schema,
        'use_predicted_load': use_predicted_load_schema,
        'description': description_schema,
    }


class ServerAutoScaleInCompleteInfo(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the Pool"),
        required=True,
    )
    scaled_in_servers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ServerId.properties_schema,
        required=True,
    )
    scaled_in_servers_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=scaled_in_servers_item_schema,
        required=False,
    )
    nscalein_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    reason_code_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'scaled_in_servers',
        'nscalein',
        'reason',
        'reason_code',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'scaled_in_servers': scaled_in_servers_schema,
        'nscalein': nscalein_schema,
        'reason': reason_schema,
        'reason_code': reason_code_schema,
    }


class AutoScaleKVData(object):
    # all schemas
    key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    value_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'key',
        'value',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'key': key_schema,
        'value': value_schema,
    }


class AutoScaleAWSSettings(object):
    # all schemas
    instance_type_schema = properties.Schema(
        properties.Schema.STRING,
        _("AWS Instance Type. http://docs.openstack.org/openstack-ops/content/flavors.html"),
        required=True,
    )
    key_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("The name of the EC2 key pair in AWS or name of previously created key pair in OpenStack to inject into the instance"),
        required=False,
    )
    security_group_ids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    security_group_ids_schema = properties.Schema(
        properties.Schema.LIST,
        _("Names or security group ids of the security groups with which to associate."),
        schema=security_group_ids_item_schema,
        required=False,
    )
    block_device_mappings_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AutoScaleKVData.properties_schema,
        required=True,
    )
    block_device_mappings_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of block device mappings for this server"),
        schema=block_device_mappings_item_schema,
        required=False,
    )
    placement_group_schema = properties.Schema(
        properties.Schema.STRING,
        _("Physical location of your cluster placement group created in Amazon EC2."),
        required=False,
    )
    instance_monitoring_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable detailed monitoring for VM"),
        required=False,
    )
    ebs_optimized_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Specifies whether the instance is optimized for EBS I/O (true) or not (false)."),
        required=False,
    )
    kernel_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("kernel for this instance"),
        required=False,
    )
    ramdisk_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("ramdisk id"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'instance_type',
        'key_name',
        'security_group_ids',
        'block_device_mappings',
        'placement_group',
        'instance_monitoring',
        'ebs_optimized',
        'kernel_id',
        'ramdisk_id',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'instance_type': instance_type_schema,
        'key_name': key_name_schema,
        'security_group_ids': security_group_ids_schema,
        'block_device_mappings': block_device_mappings_schema,
        'placement_group': placement_group_schema,
        'instance_monitoring': instance_monitoring_schema,
        'ebs_optimized': ebs_optimized_schema,
        'kernel_id': kernel_id_schema,
        'ramdisk_id': ramdisk_id_schema,
    }


class ServerAutoScaleInInfo(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the Pool"),
        required=True,
    )
    num_scalein_servers_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    num_servers_up_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    reason_code_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    load_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    available_capacity_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    scalein_server_candidates_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ServerId.properties_schema,
        required=True,
    )
    scalein_server_candidates_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=scalein_server_candidates_item_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'num_scalein_servers',
        'num_servers_up',
        'reason',
        'reason_code',
        'load',
        'available_capacity',
        'scalein_server_candidates',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'num_scalein_servers': num_scalein_servers_schema,
        'num_servers_up': num_servers_up_schema,
        'reason': reason_schema,
        'reason_code': reason_code_schema,
        'load': load_schema,
        'available_capacity': available_capacity_schema,
        'scalein_server_candidates': scalein_server_candidates_schema,
    }


class ServerAutoScaleOutCompleteInfo(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the Pool"),
        required=True,
    )
    nscaleout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    scaled_out_servers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ServerId.properties_schema,
        required=True,
    )
    scaled_out_servers_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=scaled_out_servers_item_schema,
        required=False,
    )
    launch_config_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    reason_code_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'nscaleout',
        'scaled_out_servers',
        'launch_config_uuid',
        'reason',
        'reason_code',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'nscaleout': nscaleout_schema,
        'scaled_out_servers': scaled_out_servers_schema,
        'launch_config_uuid': launch_config_uuid_schema,
        'reason': reason_schema,
        'reason_code': reason_code_schema,
    }


class AutoScaleOpenStackSettings(object):
    # all schemas
    flavor_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("OpenStack Flavor IDhttp://docs.openstack.org/openstack-ops/content/flavors.html"),
        required=True,
    )
    key_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("The name of the EC2 key pair in AWS or name of previously created key pair in OpenStack to inject into the instance"),
        required=False,
    )
    security_group_ids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    security_group_ids_schema = properties.Schema(
        properties.Schema.LIST,
        _("Names or security group ids of the security groups with which to associate."),
        schema=security_group_ids_item_schema,
        required=False,
    )
    userdata_schema = properties.Schema(
        properties.Schema.STRING,
        _("User data provided to the VM"),
        required=False,
    )
    block_device_mappings_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AutoScaleKVData.properties_schema,
        required=True,
    )
    block_device_mappings_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of block device mappings for this server"),
        schema=block_device_mappings_item_schema,
        required=False,
    )
    admin_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("admin password for the VM"),
        required=False,
    )
    metadata_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AutoScaleKVData.properties_schema,
        required=True,
    )
    metadata_schema = properties.Schema(
        properties.Schema.LIST,
        _(" Arbitrary key value metadata to store for this server. Both keys and values must be <=255 character"),
        schema=metadata_item_schema,
        required=False,
    )
    disk_config_schema = properties.Schema(
        properties.Schema.STRING,
        _("control how the disk is partitioned when the server is created. possible values are AUTO or MANUAL"),
        required=False,
    )
    scheduler_hints_schema = properties.Schema(
        properties.Schema.MAP,
        _("arbitrary key-value pairs specified by the client to help boot an instance"),
        schema=AutoScaleKVData.properties_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'flavor_id',
        'key_name',
        'security_group_ids',
        'userdata',
        'block_device_mappings',
        'admin_password',
        'metadata',
        'disk_config',
        'scheduler_hints',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'flavor_id': flavor_id_schema,
        'key_name': key_name_schema,
        'security_group_ids': security_group_ids_schema,
        'userdata': userdata_schema,
        'block_device_mappings': block_device_mappings_schema,
        'admin_password': admin_password_schema,
        'metadata': metadata_schema,
        'disk_config': disk_config_schema,
        'scheduler_hints': scheduler_hints_schema,
    }


class AutoScaleLaunchConfig(AviResource):
    resource_name = "autoscalelaunchconfig"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    image_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("Unique ID of the Amazon Machine Image (AMI)  or OpenStack VM ID"),
        required=True,
    )
    openstack_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AutoScaleOpenStackSettings.properties_schema,
        required=False,
    )
    aws_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AutoScaleAWSSettings.properties_schema,
        required=False,
    )
    mesos_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AutoScaleMesosSettings.properties_schema,
        required=False,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'name',
        'image_id',
        'openstack',
        'aws',
        'mesos',
        'description',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'image_id': image_id_schema,
        'openstack': openstack_schema,
        'aws': aws_schema,
        'mesos': mesos_schema,
        'description': description_schema,
    }


def resource_mapping():
    return {
        'Avi::AutoScaleLaunchConfig': AutoScaleLaunchConfig,
        'Avi::ServerAutoScalePolicy': ServerAutoScalePolicy,
    }

