# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from options import *
from vs import *
from upgrade import *


class RebalanceScaleinEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    scalein_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsScaleinParams.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'scalein_params',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'scalein_params': scalein_params_schema,
    }


class RebalanceScaleoutEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    scaleout_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsScaleoutParams.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'scaleout_params',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'scaleout_params': scaleout_params_schema,
    }


class SeUpgradeScaleoutEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    scaleout_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsScaleoutParams.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'scaleout_params',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'scaleout_params': scaleout_params_schema,
    }


class SeUpgradeScaleinEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    scalein_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsScaleinParams.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'scalein_params',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'scalein_params': scalein_params_schema,
    }


class SeUpgradeEventDetails(object):
    # all schemas
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    se_grp_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_vs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    notes_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    notes_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=notes_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_uuid',
        'se_grp_uuid',
        'num_vs',
        'notes',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_uuid': se_uuid_schema,
        'se_grp_uuid': se_grp_uuid_schema,
        'num_vs': num_vs_schema,
        'notes': notes_schema,
    }


class AllSeUpgradeEventDetails(object):
    # all schemas
    num_se_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    num_vs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    notes_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    notes_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=notes_item_schema,
        required=False,
        update_allowed=True,
    )
    request_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeUpgradeParams.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'num_se',
        'num_vs',
        'notes',
        'request',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'num_se': num_se_schema,
        'num_vs': num_vs_schema,
        'notes': notes_schema,
        'request': request_schema,
    }


class SeUpgradeMigrateEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    migrate_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsMigrateParams.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'migrate_params',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'migrate_params': migrate_params_schema,
    }


class RebalanceMigrateEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    migrate_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsMigrateParams.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'migrate_params',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'migrate_params': migrate_params_schema,
    }


class SeUpgradeVsDisruptedEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    notes_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    notes_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=notes_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'notes',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'notes': notes_schema,
    }
