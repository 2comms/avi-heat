# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from common import *
from options import *
from cloud_connector_message import *


class OpenStackSyncServices(object):
    # all schemas
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_vm_uuid',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_vm_uuid': se_vm_uuid_schema,
        'error_string': error_string_schema,
    }


class CloudHealth(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_fails_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    first_fail_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    last_fail_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    last_ok_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'error_string',
        'num_fails',
        'first_fail',
        'last_fail',
        'last_ok',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'error_string': error_string_schema,
        'num_fails': num_fails_schema,
        'first_fail': first_fail_schema,
        'last_fail': last_fail_schema,
        'last_ok': last_ok_schema,
    }


class CloudClusterVip(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'error_string',
        'ip',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'error_string': error_string_schema,
        'ip': ip_schema,
    }


class BMSetup(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'error_string': error_string_schema,
    }


class MesosSetup(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    mesos_url_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    mesos_access_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_deploy_method_access_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    version_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=hosts_item_schema,
        required=False,
        update_allowed=True,
    )
    new_hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    new_hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=new_hosts_item_schema,
        required=False,
        update_allowed=True,
    )
    missing_hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    missing_hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=missing_hosts_item_schema,
        required=False,
        update_allowed=True,
    )
    failed_hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    failed_hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=failed_hosts_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'mesos_url',
        'mesos_access',
        'fleet_endpoint',
        'se_deploy_method_access',
        'reason',
        'version',
        'se_name',
        'hosts',
        'new_hosts',
        'missing_hosts',
        'failed_hosts',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'mesos_url': mesos_url_schema,
        'mesos_access': mesos_access_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'se_deploy_method_access': se_deploy_method_access_schema,
        'reason': reason_schema,
        'version': version_schema,
        'se_name': se_name_schema,
        'hosts': hosts_schema,
        'new_hosts': new_hosts_schema,
        'missing_hosts': missing_hosts_schema,
        'failed_hosts': failed_hosts_schema,
    }


class OpenStackLbPluginOp(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    prov_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    command_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    result_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    detail_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    elapsed_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'id',
        'prov',
        'command',
        'result',
        'detail',
        'elapsed',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'id': id_schema,
        'prov': prov_schema,
        'command': command_schema,
        'result': result_schema,
        'detail': detail_schema,
        'elapsed': elapsed_schema,
    }


class CloudGeneric(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'error_string': error_string_schema,
    }


class CloudSeVmChange(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'se_vm_uuid',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'se_vm_uuid': se_vm_uuid_schema,
        'error_string': error_string_schema,
    }


class VCASetup(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    instance_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'username',
        'instance',
        'privilege',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'username': username_schema,
        'instance': instance_schema,
        'privilege': privilege_schema,
        'error_string': error_string_schema,
    }


class DockerUCPSetup(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    ucp_nodes_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    ucp_nodes_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=ucp_nodes_item_schema,
        required=False,
        update_allowed=True,
    )
    docker_ucp_access_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_deploy_method_access_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    version_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=hosts_item_schema,
        required=False,
        update_allowed=True,
    )
    new_hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    new_hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=new_hosts_item_schema,
        required=False,
        update_allowed=True,
    )
    missing_hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    missing_hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=missing_hosts_item_schema,
        required=False,
        update_allowed=True,
    )
    failed_hosts_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    failed_hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=failed_hosts_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'ucp_nodes',
        'docker_ucp_access',
        'fleet_endpoint',
        'se_deploy_method_access',
        'reason',
        'version',
        'se_name',
        'hosts',
        'new_hosts',
        'missing_hosts',
        'failed_hosts',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'ucp_nodes': ucp_nodes_schema,
        'docker_ucp_access': docker_ucp_access_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'se_deploy_method_access': se_deploy_method_access_schema,
        'reason': reason_schema,
        'version': version_schema,
        'se_name': se_name_schema,
        'hosts': hosts_schema,
        'new_hosts': new_hosts_schema,
        'missing_hosts': missing_hosts_schema,
        'failed_hosts': failed_hosts_schema,
    }


class CloudVnicChange(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    vnics_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=CC_VnicInfo.properties_schema,
        required=True,
        update_allowed=False,
    )
    vnics_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vnics_item_schema,
        required=False,
        update_allowed=True,
    )
    mac_addrs_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    mac_addrs_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=mac_addrs_item_schema,
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'se_vm_uuid',
        'vnics',
        'mac_addrs',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'se_vm_uuid': se_vm_uuid_schema,
        'vnics': vnics_schema,
        'mac_addrs': mac_addrs_schema,
        'error_string': error_string_schema,
    }


class CloudVipUpdate(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'vs_uuid',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'vs_uuid': vs_uuid_schema,
        'error_string': error_string_schema,
    }


class CloudDnsUpdate(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    dns_fqdn_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'vs_uuid',
        'error_string',
        'dns_fqdn',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'vs_uuid': vs_uuid_schema,
        'error_string': error_string_schema,
        'dns_fqdn': dns_fqdn_schema,
    }


class OpenStackVnicChange(object):
    # all schemas
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    networks_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    networks_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=networks_item_schema,
        required=False,
        update_allowed=True,
    )
    mac_addrs_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    mac_addrs_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=mac_addrs_item_schema,
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_vm_uuid',
        'networks',
        'mac_addrs',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_vm_uuid': se_vm_uuid_schema,
        'networks': networks_schema,
        'mac_addrs': mac_addrs_schema,
        'error_string': error_string_schema,
    }


class CloudTenantCleanup(object):
    # all schemas
    id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_se_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_svrgrp_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_secgrp_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_ports_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'id',
        'name',
        'num_se',
        'num_svrgrp',
        'num_secgrp',
        'num_ports',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'id': id_schema,
        'name': name_schema,
        'num_se': num_se_schema,
        'num_svrgrp': num_svrgrp_schema,
        'num_secgrp': num_secgrp_schema,
        'num_ports': num_ports_schema,
    }


class OpenStackIpChange(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    port_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    mac_addr_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'se_vm_uuid',
        'port_uuid',
        'mac_addr',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'se_vm_uuid': se_vm_uuid_schema,
        'port_uuid': port_uuid_schema,
        'mac_addr': mac_addr_schema,
        'error_string': error_string_schema,
    }


class CloudIpChange(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    port_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    mac_addr_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'ip',
        'se_vm_uuid',
        'port_uuid',
        'mac_addr',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'ip': ip_schema,
        'se_vm_uuid': se_vm_uuid_schema,
        'port_uuid': port_uuid_schema,
        'mac_addr': mac_addr_schema,
        'error_string': error_string_schema,
    }


class CloudTenantsDeleted(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    tenants_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=CloudTenantCleanup.properties_schema,
        required=True,
        update_allowed=False,
    )
    tenants_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=tenants_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'tenants',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'tenants': tenants_schema,
    }


class OpenStackLbProvAuditCheck(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    tenant_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    user_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    result_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    detail_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    elapsed_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'id',
        'tenant',
        'user',
        'result',
        'detail',
        'elapsed',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'id': id_schema,
        'tenant': tenant_schema,
        'user': user_schema,
        'result': result_schema,
        'detail': detail_schema,
        'elapsed': elapsed_schema,
    }


class MarathonServicePortConflict(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    marathon_url_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    app_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'marathon_url',
        'port',
        'app_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'marathon_url': marathon_url_schema,
        'port': port_schema,
        'app_name': app_name_schema,
    }


class OpenStackClusterSetup(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    keystone_host_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    admin_tenant_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'keystone_host',
        'admin_tenant',
        'privilege',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'keystone_host': keystone_host_schema,
        'admin_tenant': admin_tenant_schema,
        'privilege': privilege_schema,
        'error_string': error_string_schema,
    }


class AWSSetup(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    region_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    access_key_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'region',
        'access_key_id',
        'privilege',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'region': region_schema,
        'access_key_id': access_key_id_schema,
        'privilege': privilege_schema,
        'error_string': error_string_schema,
    }


class CloudSyncServices(object):
    # all schemas
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cc_id',
        'vtype',
        'se_vm_uuid',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cc_id': cc_id_schema,
        'vtype': vtype_schema,
        'se_vm_uuid': se_vm_uuid_schema,
        'error_string': error_string_schema,
    }


class OpenStackSeVmChange(object):
    # all schemas
    se_vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_vm_uuid',
        'error_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_vm_uuid': se_vm_uuid_schema,
        'error_string': error_string_schema,
    }


class CloudStackSetup(object):
    # all schemas
    api_url_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    access_key_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    error_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    cc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'api_url',
        'access_key_id',
        'privilege',
        'error_string',
        'cc_id',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'api_url': api_url_schema,
        'access_key_id': access_key_id_schema,
        'privilege': privilege_schema,
        'error_string': error_string_schema,
        'cc_id': cc_id_schema,
    }
