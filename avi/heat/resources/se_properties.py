# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from options import *
from common import *
from dos import *


class AppHdr(object):
    # all schemas
    hdr_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    hdr_match_case_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['INSENSITIVE', 'SENSITIVE']),
        ],
    )
    hdr_string_op_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['BEGINS_WITH', 'CONTAINS', 'DOES_NOT_BEGIN_WITH', 'DOES_NOT_CONTAIN', 'DOES_NOT_END_WITH', 'DOES_NOT_EQUAL', 'ENDS_WITH', 'EQUALS', 'REGEX_DOES_NOT_MATCH', 'REGEX_MATCH']),
        ],
    )

    # properties list
    PROPERTIES = (
        'hdr_name',
        'hdr_match_case',
        'hdr_string_op',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'hdr_name': hdr_name_schema,
        'hdr_match_case': hdr_match_case_schema,
        'hdr_string_op': hdr_string_op_schema,
    }



class SeRuntimeCompressionProperties(object):
    # all schemas
    min_length_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Minimum response content length to enable compression (Default: 128)"),
        required=False,
        update_allowed=True,
    )
    max_low_rtt_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("If client RTT is higher than this threshold, enable normal compression on the response. (Units: MILLISECONDS) (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    min_high_rtt_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("If client RTT is higher than this threshold, enable aggressive compression on the response. (Units: MILLISECONDS) (Default: 200)"),
        required=False,
        update_allowed=True,
    )
    mobile_str_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("Values that identify mobile browsers in order to enable aggressive compression."),
        required=True,
        update_allowed=False,
    )
    mobile_str_schema = properties.Schema(
        properties.Schema.LIST,
        _("Values that identify mobile browsers in order to enable aggressive compression."),
        schema=mobile_str_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'min_length',
        'max_low_rtt',
        'min_high_rtt',
        'mobile_str',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'min_length': min_length_schema,
        'max_low_rtt': max_low_rtt_schema,
        'min_high_rtt': min_high_rtt_schema,
        'mobile_str': mobile_str_schema,
    }



class SeBootupCompressionProperties(object):
    # all schemas
    buf_num_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of buffers to use for compression output. (Default: 128)"),
        required=False,
        update_allowed=True,
    )
    buf_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Size of each buffer used for compression output, this should ideally be a multiple of pagesize. (Default: 4096)"),
        required=False,
        update_allowed=True,
    )
    level_normal_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Level of compression to apply on content selected for normal compression. (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    level_aggressive_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Level of compression to apply on content selected for aggressive compression. (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    window_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("window size used by compression, rounded to the last power of 2. (Default: 4096)"),
        required=False,
        update_allowed=True,
    )
    hash_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("hash size used by compression, rounded to the last power of 2. (Default: 16384)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'buf_num',
        'buf_size',
        'level_normal',
        'level_aggressive',
        'window_size',
        'hash_size',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'buf_num': buf_num_schema,
        'buf_size': buf_size_schema,
        'level_normal': level_normal_schema,
        'level_aggressive': level_aggressive_schema,
        'window_size': window_size_schema,
        'hash_size': hash_size_schema,
    }



class SeRateLimiters(object):
    # all schemas
    icmp_rl_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Rate limiter for ICMP requests in pps. (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    icmp_rsp_rl_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Rate limiter for ICMP response in pps. (Default: 500)"),
        required=False,
        update_allowed=True,
    )
    arp_rl_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Rate limiter for ARP packets in pps. (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    rst_rl_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Rate limiter for number RST pkts sent in pps. (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    flow_probe_rl_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Rate limiter for number of flow probes in pps. (Default: 250)"),
        required=False,
        update_allowed=True,
    )
    default_rl_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Default Rate limiter in pps. (Default: 100)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'icmp_rl',
        'icmp_rsp_rl',
        'arp_rl',
        'rst_rl',
        'flow_probe_rl',
        'default_rl',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'icmp_rl': icmp_rl_schema,
        'icmp_rsp_rl': icmp_rsp_rl_schema,
        'arp_rl': arp_rl_schema,
        'rst_rl': rst_rl_schema,
        'flow_probe_rl': flow_probe_rl_schema,
        'default_rl': default_rl_schema,
    }



class SeRuntimeProperties(object):
    # all schemas
    persistence_mem_max_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum memory in bytes allocated for persistence entries (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    persistence_entries_low_watermark_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.1.1) Deprecated (Default: 20000)"),
        required=False,
        update_allowed=True,
    )
    upstream_keepalive_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(" (Default: False)"),
        required=False,
        update_allowed=True,
    )
    flow_table_max_entries_deprecated_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.1.1) Deprecated (Default: 100000000)"),
        required=False,
        update_allowed=True,
    )
    flow_table_new_syn_max_entries_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.2.5) Deprecated (Default: 40000)"),
        required=False,
        update_allowed=True,
    )
    tcp_syn_cache_max_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.2.5) Maximum size of the SYN cache table. After this limit is reached, SYN cookies are used. This is per core of the serviceengine. (Default: 32768)"),
        required=False,
        update_allowed=True,
    )
    se_packet_buffer_max_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal use only. Used to artificially reduce the available number of packet buffers. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    se_malloc_thresh_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.1.1) Deprecated (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    tcp_syncache_max_retransmit_default_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Default value for max number of retransmissions for a SYN packet. (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    log_agent_file_sz_debug_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum debug log file size before rollover. (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    log_agent_file_sz_conn_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum connection log file size before rollover. (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    log_agent_file_sz_appl_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum application log file size before rollover. (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    log_agent_file_sz_event_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum event log file size before rollover. (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    log_agent_min_storage_per_vs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Minimum storage allocated to any given VirtualService on the Service Engine. (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    log_agent_max_storage_ignore_percent_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum storage on the disk not allocated for logs on the Service Engine. (Default: 20.0)"),
        required=False,
        update_allowed=True,
    )
    log_agent_max_storage_excess_percent_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Excess percentage threshold of disk size to trigger cleanup of logs on the Service Engine. (Default: 110)"),
        required=False,
        update_allowed=True,
    )
    se_random_tcp_drops_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Internal use only. If enabled, randomly packets are dropped. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    log_agent_max_active_adf_files_per_vs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum number of Virtual Service log files maintained for significant logs on the Service Engine. (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    log_agent_max_logmessage_proto_sz_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum size of serialized log message on the Service Engine. (Default: 65536)"),
        required=False,
        update_allowed=True,
    )
    se_dp_log_nf_enqueue_percent_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal buffer full indicator on the Service Engine beyond which the unfiltered logs are abandoned. (Default: 70)"),
        required=False,
        update_allowed=True,
    )
    se_dp_log_udf_enqueue_percent_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal buffer full indicator on the Service Engine beyond which the user filtered logs are abandoned. (Default: 90)"),
        required=False,
        update_allowed=True,
    )
    log_agent_compress_logs_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Flag to indicate if log files are compressed upon full on the Service Engine. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_enable_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(" (Default: True)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_strategy_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_server_max_cache_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_conn_max_reuse_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_conn_idle_tmo_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_core_max_cache_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_cache_thresh_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_conn_idle_thresh_tmo_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    upstream_connpool_conn_life_tmo_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: -1)"),
        required=False,
        update_allowed=True,
    )
    lb_fail_max_time_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.1.1) Deprecated (Units: SEC) (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    log_agent_sleep_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal timer to stall log-agent and prevent it from hogging CPU cycles on the Service Engine. (Units: MILLISECONDS) (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    ngx_free_connection_stack_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(" (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_mac_error_threshold_to_disable_promiscious_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of packets with wrong mac after which SE attempts to disable promiscious mode. (Default: 1000)"),
        required=False,
        update_allowed=True,
    )
    se_metrics_rt_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal use only. Frequency (ms) of realtime metrics updates from SE to controller. (Units: MILLISECONDS) (Default: 1000)"),
        required=False,
        update_allowed=True,
    )
    se_metrics_rt_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Internal use only. Enable or disable real time metrics irrespective of virtualservice or SE group configuration. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    app_headers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AppHdr.properties_schema,
        required=True,
        update_allowed=False,
    )
    app_headers_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=app_headers_item_schema,
        required=False,
        update_allowed=True,
    )
    connections_lossy_log_rate_limiter_threshold_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Rate limit on maximum adf lossy log to pushper second (Default: 1000)"),
        required=False,
        update_allowed=True,
    )
    connections_udfnf_log_rate_limiter_threshold_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Rate limit on maximum adf udf or nf log to pushper second (Default: 1000)"),
        required=False,
        update_allowed=True,
    )
    http_rum_console_log_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Javascript console logs on the client browser when collecting client insights. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    http_rum_min_content_length_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Minimum response size content length to sample for client insights. (Default: 64)"),
        required=False,
        update_allowed=True,
    )
    se_dp_compression_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeRuntimeCompressionProperties.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_dp_hm_drops_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal only. Used to simulate SE - SE HB failure. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    spdy_fwd_proxy_parse_enable_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(" (Default: True)"),
        required=False,
        update_allowed=True,
    )
    mcache_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("enables mcache - controls fetch/store/store_out"),
        required=False,
        update_allowed=True,
    )
    mcache_fetch_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("enables mcache_fetch"),
        required=False,
        update_allowed=True,
    )
    mcache_store_in_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("enables mcache_store"),
        required=False,
        update_allowed=True,
    )
    mcache_store_out_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("enables mcache_store_out"),
        required=False,
        update_allowed=True,
    )
    mcache_max_cache_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("max cache size"),
        required=False,
        update_allowed=True,
    )
    mcache_store_in_min_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("min object size"),
        required=False,
        update_allowed=True,
    )
    mcache_store_in_max_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("max object size"),
        required=False,
        update_allowed=True,
    )
    mcache_store_se_max_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    upstream_connect_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 3600000)"),
        required=False,
        update_allowed=True,
    )
    upstream_send_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 3600000)"),
        required=False,
        update_allowed=True,
    )
    upstream_read_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 3600000)"),
        required=False,
        update_allowed=True,
    )
    dp_hb_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Frequency of SE - SE HB messages when aggressive failure mode detection is not enabled. (Units: MILLISECONDS) (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    dp_hb_timeout_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Consecutive HB failures after which failure is reported to controller, when aggressive failure mode detection is not enabled. (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    dupip_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Frequency of ARP requests sent by SE for each VIP to detect duplicate IP when it loses conectivity to controller. (Units: MILLISECONDS) (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    dupip_timeout_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of ARP responses received for the VIP after which SE decides that the VIP has been moved and disables the VIP. (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    max_throughput_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.1.1) Deprecated (Units: MBPS) (Default: 10000)"),
        required=False,
        update_allowed=True,
    )
    se_hb_persist_fudge_bits_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal use only. (Default: 3)"),
        required=False,
        update_allowed=True,
    )
    log_agent_unknown_vs_timer_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Timeout to purge unknown Virtual Service logs from the Service Engine. (Units: SEC) (Default: 1800)"),
        required=False,
        update_allowed=True,
    )
    global_mtu_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Overrides the MTU value received via DHCP or some other means. Use this when the infrastructure advertises an MTU that is not supported by all devices in the network. For example, in AWS or when an overlay is used. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    log_agent_export_wait_time_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Time log-agent waits before sending data to the Controller. (Units: MILLISECONDS) (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    log_agent_export_msg_buffer_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum size of data sent by log-agent to Controller over the TCP connection (Units: BYTES) (Default: 524288)"),
        required=False,
        update_allowed=True,
    )
    log_agent_conn_send_buffer_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Log-agent test property used to simulate slow TCP connections (Units: BYTES) (Default: 16384)"),
        required=False,
        update_allowed=True,
    )
    log_agent_pause_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Time interval log-agent pauses between logs obtained from the dataplane. (Units: MILLISECONDS) (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    log_agent_max_concurrent_rsync_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum concurrent rsync requests initiated from log-agent to the Controller (Default: 1024)"),
        required=False,
        update_allowed=True,
    )
    downstream_send_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 3600000)"),
        required=False,
        update_allowed=True,
    )
    se_auth_ldap_cache_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Size of LDAP basicauth credentials cache used on the dataplane. (Units: BYTES) (Default: 100000)"),
        required=False,
        update_allowed=True,
    )
    se_auth_ldap_conns_per_server_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of concurrent connections to LDAP server by a single basic auth LDAP process. (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    se_auth_ldap_connect_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("LDAP basicauth default connection timeout enforced on connections to LDAP server. (Units: MILLISECONDS) (Default: 10000)"),
        required=False,
        update_allowed=True,
    )
    se_auth_ldap_reconnect_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("LDAP basicauth default reconnect timeout enforced on connections to LDAP server. (Units: MILLISECONDS) (Default: 10000)"),
        required=False,
        update_allowed=True,
    )
    se_auth_ldap_bind_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("LDAP basicauth default bind timeout enforced on connections to LDAP server. (Units: MILLISECONDS) (Default: 5000)"),
        required=False,
        update_allowed=True,
    )
    se_auth_ldap_request_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("LDAP basicauth default login or group search request timeout enforced on connections to LDAP server. (Units: MILLISECONDS) (Default: 10000)"),
        required=False,
        update_allowed=True,
    )
    dos_profile_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DosThresholdProfile.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_auth_ldap_servers_failover_only_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("LDAP basicauth uses multiple ldap servers in the event of a failover only. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_memory_poison_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Internal use only. Enables poisoning of freed memory blocks (Default: True)"),
        required=False,
        update_allowed=True,
    )
    dp_aggressive_hb_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Frequency of SE - SE HB messages when aggressive failure mode detection is enabled. (Units: MILLISECONDS) (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    dp_aggressive_hb_timeout_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Consecutive HB failures after which failure is reported to controller,when aggressive failure mode detection is enabled. (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    se_rate_limiters_schema = properties.Schema(
        properties.Schema.MAP,
        _("SE rate limiters"),
        schema=SeRateLimiters.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_metrics_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal use only. Frequency (ms) of metrics updates from SE to controller. (Units: MILLISECONDS) (Default: 60000)"),
        required=False,
        update_allowed=True,
    )
    service_port_ranges_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Port ranges on which there may be virtual services (for configuring iptables). Applicable in container ecosystems like Mesos."),
        schema=PortRange.properties_schema,
        required=True,
        update_allowed=False,
    )
    service_port_ranges_schema = properties.Schema(
        properties.Schema.LIST,
        _("Port ranges on which there may be virtual services (for configuring iptables). Applicable in container ecosystems like Mesos."),
        schema=service_port_ranges_item_schema,
        required=False,
        update_allowed=True,
    )
    se_handle_interface_routes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Accept/ignore interface routes (i.e, no next hop IP address) (Default: False)"),
        required=False,
        update_allowed=True,
    )
    services_accessible_all_interfaces_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Make service ports accessible on all Host interfaces in addition to East-West VIP and/or bridge IP (Default: False)"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies (Default: True)"),
        required=False,
        update_allowed=True,
    )
    baremetal_dispatcher_handles_flows_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Control if dispatcher core also handles TCP flows in baremetal SE. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    log_agent_log_storage_min_sz_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Minimum storage allocated for logs irrespective of memory and cores. (Units: MB) (Default: 1024)"),
        required=False,
        update_allowed=True,
    )
    lbaction_num_requests_to_dispatch_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of requests to dispatch from the request queue at a regular interval. (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    lbaction_rq_per_request_max_retries_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum retries per request in the request queue. (Default: 22)"),
        required=False,
        update_allowed=True,
    )
    service_ip_subnets_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP ranges on which there may be virtual services (for configuring iptables/routes)"),
        schema=IpAddrPrefix.properties_schema,
        required=True,
        update_allowed=False,
    )
    service_ip_subnets_schema = properties.Schema(
        properties.Schema.LIST,
        _("IP ranges on which there may be virtual services (for configuring iptables/routes)"),
        schema=service_ip_subnets_item_schema,
        required=False,
        update_allowed=True,
    )
    se_dp_if_state_poll_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of jiffies between polling interface state. (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    log_message_max_file_list_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum number of file names in a log message (Default: 64)"),
        required=False,
        update_allowed=True,
    )
    scaleout_udp_per_pkt_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable punting of UDP packets from primary to other Service Engines. This applies to Virtual Services with Per-Packet Loadbalancing enabled (Default: True)"),
        required=False,
        update_allowed=True,
    )
    flow_table_batch_push_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("How often to push the flow table IPC messages in the main loop. The value is the number of times through the loop before pushing the batch. i.e, a value of 1 means every time through the loop. (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    se_dp_vnic_queue_stall_event_sleep_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.1) Time (in seconds) service engine waits for after generating a Vnic transmit queue stall event before resetting theNIC. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    se_dp_vnic_queue_stall_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.1) Time (in milliseconds) to wait for network/NIC recovery on detecting a transmit queue stall after which service engine resets the NIC (Default: 10000)"),
        required=False,
        update_allowed=True,
    )
    se_dp_vnic_queue_stall_threshold_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.1) Number of consecutive transmit failures to look for before generating a Vnic transmit queue stall event. (Default: 2000)"),
        required=False,
        update_allowed=True,
    )
    disable_flow_probes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.1.1) Disable Flow Probes for Scaled out VS'es (Default: False)"),
        required=False,
        update_allowed=True,
    )
    user_defined_metric_age_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.5) Defines in seconds how long before an unused user-defined-metric is garbage collected. (Units: SEC) (Default: 60)"),
        required=False,
        update_allowed=True,
    )
    disable_gro_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.2.1) (Deprecated in: 17.2.5) Deprecated (Default: False)"),
        required=False,
        update_allowed=True,
    )
    enable_hsm_log_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 16.4.8, 17.1.11, 17.2.3) Enable HSM luna engine logs (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_tso_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.2.4) (Deprecated in: 17.2.5) Deprecated (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_dp_vnic_restart_on_queue_stall_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.14, 17.2.5, 18.1.1) Number of consecutive transmit queue stall events in se_dp_vnic_stall_se_restart_window to look for before restarting SE (Default: 3)"),
        required=False,
        update_allowed=True,
    )
    se_dp_vnic_stall_se_restart_window_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.14, 17.2.5, 18.1.1) Window of time (in seconds) during which se_dp_vnic_restart_on_queue_stall_count number of consecutive stalls results in a SE restart (Default: 3600)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'persistence_mem_max',
        'persistence_entries_low_watermark',
        'upstream_keepalive',
        'flow_table_max_entries_deprecated',
        'flow_table_new_syn_max_entries',
        'tcp_syn_cache_max',
        'se_packet_buffer_max',
        'se_malloc_thresh',
        'tcp_syncache_max_retransmit_default',
        'log_agent_file_sz_debug',
        'log_agent_file_sz_conn',
        'log_agent_file_sz_appl',
        'log_agent_file_sz_event',
        'log_agent_min_storage_per_vs',
        'log_agent_max_storage_ignore_percent',
        'log_agent_max_storage_excess_percent',
        'se_random_tcp_drops',
        'log_agent_max_active_adf_files_per_vs',
        'log_agent_max_logmessage_proto_sz',
        'se_dp_log_nf_enqueue_percent',
        'se_dp_log_udf_enqueue_percent',
        'log_agent_compress_logs',
        'upstream_connpool_enable',
        'upstream_connpool_strategy',
        'upstream_connpool_server_max_cache',
        'upstream_connpool_conn_max_reuse',
        'upstream_connpool_conn_idle_tmo',
        'upstream_connpool_core_max_cache',
        'upstream_connpool_cache_thresh',
        'upstream_connpool_conn_idle_thresh_tmo',
        'upstream_connpool_conn_life_tmo',
        'lb_fail_max_time',
        'log_agent_sleep_interval',
        'ngx_free_connection_stack',
        'se_mac_error_threshold_to_disable_promiscious',
        'se_metrics_rt_interval',
        'se_metrics_rt_enabled',
        'app_headers',
        'connections_lossy_log_rate_limiter_threshold',
        'connections_udfnf_log_rate_limiter_threshold',
        'http_rum_console_log',
        'http_rum_min_content_length',
        'se_dp_compression',
        'se_dp_hm_drops',
        'spdy_fwd_proxy_parse_enable',
        'mcache_enabled',
        'mcache_fetch_enabled',
        'mcache_store_in_enabled',
        'mcache_store_out_enabled',
        'mcache_max_cache_size',
        'mcache_store_in_min_size',
        'mcache_store_in_max_size',
        'mcache_store_se_max_size',
        'upstream_connect_timeout',
        'upstream_send_timeout',
        'upstream_read_timeout',
        'dp_hb_frequency',
        'dp_hb_timeout_count',
        'dupip_frequency',
        'dupip_timeout_count',
        'max_throughput',
        'se_hb_persist_fudge_bits',
        'log_agent_unknown_vs_timer',
        'global_mtu',
        'log_agent_export_wait_time',
        'log_agent_export_msg_buffer_size',
        'log_agent_conn_send_buffer_size',
        'log_agent_pause_interval',
        'log_agent_max_concurrent_rsync',
        'downstream_send_timeout',
        'se_auth_ldap_cache_size',
        'se_auth_ldap_conns_per_server',
        'se_auth_ldap_connect_timeout',
        'se_auth_ldap_reconnect_timeout',
        'se_auth_ldap_bind_timeout',
        'se_auth_ldap_request_timeout',
        'dos_profile',
        'se_auth_ldap_servers_failover_only',
        'se_memory_poison',
        'dp_aggressive_hb_frequency',
        'dp_aggressive_hb_timeout_count',
        'se_rate_limiters',
        'se_metrics_interval',
        'service_port_ranges',
        'se_handle_interface_routes',
        'services_accessible_all_interfaces',
        'feproxy_vips_enable_proxy_arp',
        'baremetal_dispatcher_handles_flows',
        'log_agent_log_storage_min_sz',
        'lbaction_num_requests_to_dispatch',
        'lbaction_rq_per_request_max_retries',
        'service_ip_subnets',
        'se_dp_if_state_poll_interval',
        'log_message_max_file_list_size',
        'scaleout_udp_per_pkt',
        'flow_table_batch_push_frequency',
        'se_dp_vnic_queue_stall_event_sleep',
        'se_dp_vnic_queue_stall_timeout',
        'se_dp_vnic_queue_stall_threshold',
        'disable_flow_probes',
        'user_defined_metric_age',
        'disable_gro',
        'enable_hsm_log',
        'disable_tso',
        'se_dp_vnic_restart_on_queue_stall_count',
        'se_dp_vnic_stall_se_restart_window',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'persistence_mem_max': persistence_mem_max_schema,
        'persistence_entries_low_watermark': persistence_entries_low_watermark_schema,
        'upstream_keepalive': upstream_keepalive_schema,
        'flow_table_max_entries_deprecated': flow_table_max_entries_deprecated_schema,
        'flow_table_new_syn_max_entries': flow_table_new_syn_max_entries_schema,
        'tcp_syn_cache_max': tcp_syn_cache_max_schema,
        'se_packet_buffer_max': se_packet_buffer_max_schema,
        'se_malloc_thresh': se_malloc_thresh_schema,
        'tcp_syncache_max_retransmit_default': tcp_syncache_max_retransmit_default_schema,
        'log_agent_file_sz_debug': log_agent_file_sz_debug_schema,
        'log_agent_file_sz_conn': log_agent_file_sz_conn_schema,
        'log_agent_file_sz_appl': log_agent_file_sz_appl_schema,
        'log_agent_file_sz_event': log_agent_file_sz_event_schema,
        'log_agent_min_storage_per_vs': log_agent_min_storage_per_vs_schema,
        'log_agent_max_storage_ignore_percent': log_agent_max_storage_ignore_percent_schema,
        'log_agent_max_storage_excess_percent': log_agent_max_storage_excess_percent_schema,
        'se_random_tcp_drops': se_random_tcp_drops_schema,
        'log_agent_max_active_adf_files_per_vs': log_agent_max_active_adf_files_per_vs_schema,
        'log_agent_max_logmessage_proto_sz': log_agent_max_logmessage_proto_sz_schema,
        'se_dp_log_nf_enqueue_percent': se_dp_log_nf_enqueue_percent_schema,
        'se_dp_log_udf_enqueue_percent': se_dp_log_udf_enqueue_percent_schema,
        'log_agent_compress_logs': log_agent_compress_logs_schema,
        'upstream_connpool_enable': upstream_connpool_enable_schema,
        'upstream_connpool_strategy': upstream_connpool_strategy_schema,
        'upstream_connpool_server_max_cache': upstream_connpool_server_max_cache_schema,
        'upstream_connpool_conn_max_reuse': upstream_connpool_conn_max_reuse_schema,
        'upstream_connpool_conn_idle_tmo': upstream_connpool_conn_idle_tmo_schema,
        'upstream_connpool_core_max_cache': upstream_connpool_core_max_cache_schema,
        'upstream_connpool_cache_thresh': upstream_connpool_cache_thresh_schema,
        'upstream_connpool_conn_idle_thresh_tmo': upstream_connpool_conn_idle_thresh_tmo_schema,
        'upstream_connpool_conn_life_tmo': upstream_connpool_conn_life_tmo_schema,
        'lb_fail_max_time': lb_fail_max_time_schema,
        'log_agent_sleep_interval': log_agent_sleep_interval_schema,
        'ngx_free_connection_stack': ngx_free_connection_stack_schema,
        'se_mac_error_threshold_to_disable_promiscious': se_mac_error_threshold_to_disable_promiscious_schema,
        'se_metrics_rt_interval': se_metrics_rt_interval_schema,
        'se_metrics_rt_enabled': se_metrics_rt_enabled_schema,
        'app_headers': app_headers_schema,
        'connections_lossy_log_rate_limiter_threshold': connections_lossy_log_rate_limiter_threshold_schema,
        'connections_udfnf_log_rate_limiter_threshold': connections_udfnf_log_rate_limiter_threshold_schema,
        'http_rum_console_log': http_rum_console_log_schema,
        'http_rum_min_content_length': http_rum_min_content_length_schema,
        'se_dp_compression': se_dp_compression_schema,
        'se_dp_hm_drops': se_dp_hm_drops_schema,
        'spdy_fwd_proxy_parse_enable': spdy_fwd_proxy_parse_enable_schema,
        'mcache_enabled': mcache_enabled_schema,
        'mcache_fetch_enabled': mcache_fetch_enabled_schema,
        'mcache_store_in_enabled': mcache_store_in_enabled_schema,
        'mcache_store_out_enabled': mcache_store_out_enabled_schema,
        'mcache_max_cache_size': mcache_max_cache_size_schema,
        'mcache_store_in_min_size': mcache_store_in_min_size_schema,
        'mcache_store_in_max_size': mcache_store_in_max_size_schema,
        'mcache_store_se_max_size': mcache_store_se_max_size_schema,
        'upstream_connect_timeout': upstream_connect_timeout_schema,
        'upstream_send_timeout': upstream_send_timeout_schema,
        'upstream_read_timeout': upstream_read_timeout_schema,
        'dp_hb_frequency': dp_hb_frequency_schema,
        'dp_hb_timeout_count': dp_hb_timeout_count_schema,
        'dupip_frequency': dupip_frequency_schema,
        'dupip_timeout_count': dupip_timeout_count_schema,
        'max_throughput': max_throughput_schema,
        'se_hb_persist_fudge_bits': se_hb_persist_fudge_bits_schema,
        'log_agent_unknown_vs_timer': log_agent_unknown_vs_timer_schema,
        'global_mtu': global_mtu_schema,
        'log_agent_export_wait_time': log_agent_export_wait_time_schema,
        'log_agent_export_msg_buffer_size': log_agent_export_msg_buffer_size_schema,
        'log_agent_conn_send_buffer_size': log_agent_conn_send_buffer_size_schema,
        'log_agent_pause_interval': log_agent_pause_interval_schema,
        'log_agent_max_concurrent_rsync': log_agent_max_concurrent_rsync_schema,
        'downstream_send_timeout': downstream_send_timeout_schema,
        'se_auth_ldap_cache_size': se_auth_ldap_cache_size_schema,
        'se_auth_ldap_conns_per_server': se_auth_ldap_conns_per_server_schema,
        'se_auth_ldap_connect_timeout': se_auth_ldap_connect_timeout_schema,
        'se_auth_ldap_reconnect_timeout': se_auth_ldap_reconnect_timeout_schema,
        'se_auth_ldap_bind_timeout': se_auth_ldap_bind_timeout_schema,
        'se_auth_ldap_request_timeout': se_auth_ldap_request_timeout_schema,
        'dos_profile': dos_profile_schema,
        'se_auth_ldap_servers_failover_only': se_auth_ldap_servers_failover_only_schema,
        'se_memory_poison': se_memory_poison_schema,
        'dp_aggressive_hb_frequency': dp_aggressive_hb_frequency_schema,
        'dp_aggressive_hb_timeout_count': dp_aggressive_hb_timeout_count_schema,
        'se_rate_limiters': se_rate_limiters_schema,
        'se_metrics_interval': se_metrics_interval_schema,
        'service_port_ranges': service_port_ranges_schema,
        'se_handle_interface_routes': se_handle_interface_routes_schema,
        'services_accessible_all_interfaces': services_accessible_all_interfaces_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'baremetal_dispatcher_handles_flows': baremetal_dispatcher_handles_flows_schema,
        'log_agent_log_storage_min_sz': log_agent_log_storage_min_sz_schema,
        'lbaction_num_requests_to_dispatch': lbaction_num_requests_to_dispatch_schema,
        'lbaction_rq_per_request_max_retries': lbaction_rq_per_request_max_retries_schema,
        'service_ip_subnets': service_ip_subnets_schema,
        'se_dp_if_state_poll_interval': se_dp_if_state_poll_interval_schema,
        'log_message_max_file_list_size': log_message_max_file_list_size_schema,
        'scaleout_udp_per_pkt': scaleout_udp_per_pkt_schema,
        'flow_table_batch_push_frequency': flow_table_batch_push_frequency_schema,
        'se_dp_vnic_queue_stall_event_sleep': se_dp_vnic_queue_stall_event_sleep_schema,
        'se_dp_vnic_queue_stall_timeout': se_dp_vnic_queue_stall_timeout_schema,
        'se_dp_vnic_queue_stall_threshold': se_dp_vnic_queue_stall_threshold_schema,
        'disable_flow_probes': disable_flow_probes_schema,
        'user_defined_metric_age': user_defined_metric_age_schema,
        'disable_gro': disable_gro_schema,
        'enable_hsm_log': enable_hsm_log_schema,
        'disable_tso': disable_tso_schema,
        'se_dp_vnic_restart_on_queue_stall_count': se_dp_vnic_restart_on_queue_stall_count_schema,
        'se_dp_vnic_stall_se_restart_window': se_dp_vnic_stall_se_restart_window_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'se_dp_compression': getattr(SeRuntimeCompressionProperties, 'field_references', {}),
        'service_ip_subnets': getattr(IpAddrPrefix, 'field_references', {}),
        'app_headers': getattr(AppHdr, 'field_references', {}),
        'service_port_ranges': getattr(PortRange, 'field_references', {}),
        'se_rate_limiters': getattr(SeRateLimiters, 'field_references', {}),
        'dos_profile': getattr(DosThresholdProfile, 'field_references', {}),
    }

    unique_keys = {
        'se_dp_compression': getattr(SeRuntimeCompressionProperties, 'unique_keys', {}),
        'service_ip_subnets': getattr(IpAddrPrefix, 'unique_keys', {}),
        'app_headers': getattr(AppHdr, 'unique_keys', {}),
        'service_port_ranges': getattr(PortRange, 'unique_keys', {}),
        'se_rate_limiters': getattr(SeRateLimiters, 'unique_keys', {}),
        'dos_profile': getattr(DosThresholdProfile, 'unique_keys', {}),
    }



class SeAgentProperties(object):
    # all schemas
    debug_mode_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(" (Default: False)"),
        required=False,
        update_allowed=True,
    )
    controller_registration_timeout_sec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: SEC) (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    controller_heartbeat_timeout_sec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: SEC) (Default: 12)"),
        required=False,
        update_allowed=True,
    )
    headless_timeout_sec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: SEC) (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    controller_heartbeat_miss_limit_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 6)"),
        required=False,
        update_allowed=True,
    )
    dp_enq_interval_msec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 20)"),
        required=False,
        update_allowed=True,
    )
    dp_deq_interval_msec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 20)"),
        required=False,
        update_allowed=True,
    )
    dp_batch_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    dp_max_wait_rsp_time_sec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: SEC) (Default: 60)"),
        required=False,
        update_allowed=True,
    )
    cpustats_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: SEC) (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    controller_rpc_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: SEC) (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    controller_echo_rpc_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Timeout used for se health check (Units: MILLISECONDS) (Default: 2000)"),
        required=False,
        update_allowed=True,
    )
    controller_echo_miss_limit_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Count of HB misses for se health check failure (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    vnic_probe_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Probe vnic interval (Units: SEC) (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    vnic_ip_delete_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("wait interval before deleting IP (Units: SEC) (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    ctrl_reg_pending_max_wait_time_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Max time to wait for ctrl registration before assert (Units: SEC) (Default: 150)"),
        required=False,
        update_allowed=True,
    )
    dp_reg_pending_max_wait_time_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Max time to wait for dp registration before assert (Units: SEC) (Default: 75)"),
        required=False,
        update_allowed=True,
    )
    vnic_dhcp_ip_check_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("DHCP ip check interval (Units: SEC) (Default: 6)"),
        required=False,
        update_allowed=True,
    )
    vnic_dhcp_ip_max_retries_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("DHCP ip max retries (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    dp_aggressive_enq_interval_msec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    dp_aggressive_deq_interval_msec_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Units: MILLISECONDS) (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    sdb_scan_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("SDB scan count (Default: 1000)"),
        required=False,
        update_allowed=True,
    )
    sdb_pipeline_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("SDB pipeline size (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    sdb_flush_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("SDB pipeline flush interval (Units: MILLISECONDS) (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    controller_echo_rpc_aggressive_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Aggressive Timeout used for se health check (Units: MILLISECONDS) (Default: 2000)"),
        required=False,
        update_allowed=True,
    )
    controller_echo_miss_aggressive_limit_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Aggressive Count of HB misses for se health check failure (Default: 2)"),
        required=False,
        update_allowed=True,
    )
    ignore_docker_mac_change_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(" (Default: True)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'debug_mode',
        'controller_registration_timeout_sec',
        'controller_heartbeat_timeout_sec',
        'headless_timeout_sec',
        'controller_heartbeat_miss_limit',
        'dp_enq_interval_msec',
        'dp_deq_interval_msec',
        'dp_batch_size',
        'dp_max_wait_rsp_time_sec',
        'cpustats_interval',
        'controller_rpc_timeout',
        'controller_echo_rpc_timeout',
        'controller_echo_miss_limit',
        'vnic_probe_interval',
        'vnic_ip_delete_interval',
        'ctrl_reg_pending_max_wait_time',
        'dp_reg_pending_max_wait_time',
        'vnic_dhcp_ip_check_interval',
        'vnic_dhcp_ip_max_retries',
        'dp_aggressive_enq_interval_msec',
        'dp_aggressive_deq_interval_msec',
        'sdb_scan_count',
        'sdb_pipeline_size',
        'sdb_flush_interval',
        'controller_echo_rpc_aggressive_timeout',
        'controller_echo_miss_aggressive_limit',
        'ignore_docker_mac_change',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'debug_mode': debug_mode_schema,
        'controller_registration_timeout_sec': controller_registration_timeout_sec_schema,
        'controller_heartbeat_timeout_sec': controller_heartbeat_timeout_sec_schema,
        'headless_timeout_sec': headless_timeout_sec_schema,
        'controller_heartbeat_miss_limit': controller_heartbeat_miss_limit_schema,
        'dp_enq_interval_msec': dp_enq_interval_msec_schema,
        'dp_deq_interval_msec': dp_deq_interval_msec_schema,
        'dp_batch_size': dp_batch_size_schema,
        'dp_max_wait_rsp_time_sec': dp_max_wait_rsp_time_sec_schema,
        'cpustats_interval': cpustats_interval_schema,
        'controller_rpc_timeout': controller_rpc_timeout_schema,
        'controller_echo_rpc_timeout': controller_echo_rpc_timeout_schema,
        'controller_echo_miss_limit': controller_echo_miss_limit_schema,
        'vnic_probe_interval': vnic_probe_interval_schema,
        'vnic_ip_delete_interval': vnic_ip_delete_interval_schema,
        'ctrl_reg_pending_max_wait_time': ctrl_reg_pending_max_wait_time_schema,
        'dp_reg_pending_max_wait_time': dp_reg_pending_max_wait_time_schema,
        'vnic_dhcp_ip_check_interval': vnic_dhcp_ip_check_interval_schema,
        'vnic_dhcp_ip_max_retries': vnic_dhcp_ip_max_retries_schema,
        'dp_aggressive_enq_interval_msec': dp_aggressive_enq_interval_msec_schema,
        'dp_aggressive_deq_interval_msec': dp_aggressive_deq_interval_msec_schema,
        'sdb_scan_count': sdb_scan_count_schema,
        'sdb_pipeline_size': sdb_pipeline_size_schema,
        'sdb_flush_interval': sdb_flush_interval_schema,
        'controller_echo_rpc_aggressive_timeout': controller_echo_rpc_aggressive_timeout_schema,
        'controller_echo_miss_aggressive_limit': controller_echo_miss_aggressive_limit_schema,
        'ignore_docker_mac_change': ignore_docker_mac_change_schema,
    }



class SeBootupProperties(object):
    # all schemas
    tcp_syncache_hashsize_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Size of the TCP SYN cache hash table. (Default: 8192)"),
        required=False,
        update_allowed=True,
    )
    log_agent_trace_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable trace logs by default on Service Engine. Configuration operations are logged along with other important logs by Service Engine. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    log_agent_debug_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable debug logs by default on Service Engine. This includes all other debugging logs. Debug logs can also be explcitly enabled from the CLI shell. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_emulated_cores_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Use this to emulate more/less cpus than is actually available. One datapath process is started for each core. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    se_tx_batch_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of packets to batch for transmit to the nic. (Default: 64)"),
        required=False,
        update_allowed=True,
    )
    l7_conns_per_core_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 16384)"),
        required=False,
        update_allowed=True,
    )
    ssl_sess_cache_per_vs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 4096)"),
        required=False,
        update_allowed=True,
    )
    l7_resvd_listen_conns_per_core_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 256)"),
        required=False,
        update_allowed=True,
    )
    ssl_sess_cache_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 86400)"),
        required=False,
        update_allowed=True,
    )
    se_lro_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Enable or disable Large Receive Optimization for vnics. (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    se_rum_sampling_nav_percent_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("percentage of navigation timing data to sample from the end user client for client insights. (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    se_rum_sampling_res_percent_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("percentage of resource timing data to sample from the end user client for client insights. (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    se_rum_sampling_nav_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("when sampling for navigation timing data from the end user client. minimum time to wait on server between samples. (Units: SEC) (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    se_rum_sampling_res_interval_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("when sampling for resource timing data from the end user client. minimum time to wait on server between samples. (Units: SEC) (Default: 2)"),
        required=False,
        update_allowed=True,
    )
    se_dp_compression_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeBootupCompressionProperties.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_dpdk_pmd_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Controls the use of DPDK poll mode driver:     0      : Automatically determine based on hypervisor/NIC type    1      : Unconditionally use DPDK poll mode driver    ~[0,1] : Don't use DPDK poll mode driver (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    se_tunnel_mode_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Deprecated in: 17.1.1) Determines if DSR from secondary SE is active or not:     0      : Automatically determine based on hypervisor type    1      : Disable DSR unconditionally    ~[0,1] : Enable DSR unconditionally (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    se_use_dpdk_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Determines if DPDK library should be used or not :     0      : Automatically determine based on hypervisor type    1      : Use DPDK unconditionally    ~[0,1] : Don't use DPDK (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    se_log_buffer_chunk_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of internal buffer chunks to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments. (Units: BYTES) (Default: 1024)"),
        required=False,
        update_allowed=True,
    )
    se_log_buffer_applog_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal application log buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments. (Units: WORD) (Default: 4096)"),
        required=False,
        update_allowed=True,
    )
    se_log_buffer_connlog_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal connection log buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments. (Units: WORD) (Default: 1024)"),
        required=False,
        update_allowed=True,
    )
    se_log_buffer_events_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Internal events buffer size to use on Service Engine. Can be fine tuned for better performance of data plane in specific environments. (Units: WORD) (Default: 512)"),
        required=False,
        update_allowed=True,
    )
    se_ip_encap_ipc_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Determines if SE-SE IPC messages are encapsulated in an IP header :     0      : Automatically determine based on hypervisor type    1      : Use IP encap unconditionally    ~[0,1] : Don't use IP encap (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    se_log_buffer_app_blocking_dequeue_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Internal flag that blocks dataplane until all application logs are flushed to log-agent process. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_log_buffer_conn_blocking_dequeue_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Internal flag that blocks dataplane until all connection logs are flushed to log-agent process. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_log_buffer_events_blocking_dequeue_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Internal flag that blocks dataplane until all outstanding events are flushed to log-agent process. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    se_pcap_pkt_sz_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Max size of each packet in the pcap interface. (Default: 65536)"),
        required=False,
        update_allowed=True,
    )
    se_pcap_pkt_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Max number of packets the pcap interface can hold. (Default: 256)"),
        required=False,
        update_allowed=True,
    )
    fair_queueing_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable or disable fair queueing for packet transmission among virtualservices on an SE. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    docker_backend_portstart_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Start of the Local TCP port range used by SE for backend connections in docker environment. (Default: 20480)"),
        required=False,
        update_allowed=True,
    )
    docker_backend_portend_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("End of the Local TCP port range used by SE for backend connections in docker environment. (Default: 30720)"),
        required=False,
        update_allowed=True,
    )
    distribute_vnics_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Distributes vnic ownership among cores so multiple cores handle dispatcher duties. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_l3_encap_ipc_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Determines if SE-SE IPC messages use SE interface IP instead of VIP  :     0      : Automatically determine based on hypervisor type    1      : Use SE interface IP unconditionally    ~[0,1] : Don't use SE interface IP (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    distribute_queues_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.1.1) Distributes queue ownership among cores so multiple cores handle dispatcher duties. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    geo_db_granularity_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.1) Granularity or Resolution of co-ordinates used. When the value is 1 the co-ordinates provided in the geo-db are used as is (highest resolution.This value provides a 'zoom-out' value so that coarser co-ordinates are used. With higher resolution, logs can contain finer location information. But, lower resolution provides significant memory and cpu benefits on the service engine. Besides, given a smaller number of members that are separated geographically, a lower resolution is sufficient for correct load-balancing. (Default: 1)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'tcp_syncache_hashsize',
        'log_agent_trace_enabled',
        'log_agent_debug_enabled',
        'se_emulated_cores',
        'se_tx_batch_size',
        'l7_conns_per_core',
        'ssl_sess_cache_per_vs',
        'l7_resvd_listen_conns_per_core',
        'ssl_sess_cache_timeout',
        'se_lro',
        'se_rum_sampling_nav_percent',
        'se_rum_sampling_res_percent',
        'se_rum_sampling_nav_interval',
        'se_rum_sampling_res_interval',
        'se_dp_compression',
        'se_dpdk_pmd',
        'se_tunnel_mode',
        'se_use_dpdk',
        'se_log_buffer_chunk_count',
        'se_log_buffer_applog_size',
        'se_log_buffer_connlog_size',
        'se_log_buffer_events_size',
        'se_ip_encap_ipc',
        'se_log_buffer_app_blocking_dequeue',
        'se_log_buffer_conn_blocking_dequeue',
        'se_log_buffer_events_blocking_dequeue',
        'se_pcap_pkt_sz',
        'se_pcap_pkt_count',
        'fair_queueing_enabled',
        'docker_backend_portstart',
        'docker_backend_portend',
        'distribute_vnics',
        'se_l3_encap_ipc',
        'distribute_queues',
        'geo_db_granularity',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'tcp_syncache_hashsize': tcp_syncache_hashsize_schema,
        'log_agent_trace_enabled': log_agent_trace_enabled_schema,
        'log_agent_debug_enabled': log_agent_debug_enabled_schema,
        'se_emulated_cores': se_emulated_cores_schema,
        'se_tx_batch_size': se_tx_batch_size_schema,
        'l7_conns_per_core': l7_conns_per_core_schema,
        'ssl_sess_cache_per_vs': ssl_sess_cache_per_vs_schema,
        'l7_resvd_listen_conns_per_core': l7_resvd_listen_conns_per_core_schema,
        'ssl_sess_cache_timeout': ssl_sess_cache_timeout_schema,
        'se_lro': se_lro_schema,
        'se_rum_sampling_nav_percent': se_rum_sampling_nav_percent_schema,
        'se_rum_sampling_res_percent': se_rum_sampling_res_percent_schema,
        'se_rum_sampling_nav_interval': se_rum_sampling_nav_interval_schema,
        'se_rum_sampling_res_interval': se_rum_sampling_res_interval_schema,
        'se_dp_compression': se_dp_compression_schema,
        'se_dpdk_pmd': se_dpdk_pmd_schema,
        'se_tunnel_mode': se_tunnel_mode_schema,
        'se_use_dpdk': se_use_dpdk_schema,
        'se_log_buffer_chunk_count': se_log_buffer_chunk_count_schema,
        'se_log_buffer_applog_size': se_log_buffer_applog_size_schema,
        'se_log_buffer_connlog_size': se_log_buffer_connlog_size_schema,
        'se_log_buffer_events_size': se_log_buffer_events_size_schema,
        'se_ip_encap_ipc': se_ip_encap_ipc_schema,
        'se_log_buffer_app_blocking_dequeue': se_log_buffer_app_blocking_dequeue_schema,
        'se_log_buffer_conn_blocking_dequeue': se_log_buffer_conn_blocking_dequeue_schema,
        'se_log_buffer_events_blocking_dequeue': se_log_buffer_events_blocking_dequeue_schema,
        'se_pcap_pkt_sz': se_pcap_pkt_sz_schema,
        'se_pcap_pkt_count': se_pcap_pkt_count_schema,
        'fair_queueing_enabled': fair_queueing_enabled_schema,
        'docker_backend_portstart': docker_backend_portstart_schema,
        'docker_backend_portend': docker_backend_portend_schema,
        'distribute_vnics': distribute_vnics_schema,
        'se_l3_encap_ipc': se_l3_encap_ipc_schema,
        'distribute_queues': distribute_queues_schema,
        'geo_db_granularity': geo_db_granularity_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'se_dp_compression': getattr(SeBootupCompressionProperties, 'field_references', {}),
    }

    unique_keys = {
        'se_dp_compression': getattr(SeBootupCompressionProperties, 'unique_keys', {}),
    }



class SeProperties(AviResource):
    resource_name = "seproperties"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    se_bootup_properties_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeBootupProperties.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_runtime_properties_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeRuntimeProperties.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_agent_properties_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeAgentProperties.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'se_bootup_properties',
        'se_runtime_properties',
        'se_agent_properties',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'se_bootup_properties': se_bootup_properties_schema,
        'se_runtime_properties': se_runtime_properties_schema,
        'se_agent_properties': se_agent_properties_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'se_agent_properties': getattr(SeAgentProperties, 'field_references', {}),
        'se_runtime_properties': getattr(SeRuntimeProperties, 'field_references', {}),
        'se_bootup_properties': getattr(SeBootupProperties, 'field_references', {}),
    }

    unique_keys = {
        'se_agent_properties': getattr(SeAgentProperties, 'unique_keys', {}),
        'se_runtime_properties': getattr(SeRuntimeProperties, 'unique_keys', {}),
        'se_bootup_properties': getattr(SeBootupProperties, 'unique_keys', {}),
    }



def resource_mapping():
    return {
        'Avi::LBaaS::SeProperties': SeProperties,
    }

