# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from options import *


class ReplaceStringVar(object):
    # all schemas
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _("Type of replacement string - can be a variable exposed from datascript, value of an HTTP header or a custom user-input literal string."),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['DATASCRIPT_VAR', 'HTTP_HEADER_VAR', 'LITERAL_STRING']),
        ],
    )
    val_schema = properties.Schema(
        properties.Schema.STRING,
        _("Value of the replacement string - name of variable exposed from datascript, name of the HTTP header or a custom user-input literal string."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'type',
        'val',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'type': type_schema,
        'val': val_schema,
    }



class MatchReplacePair(object):
    # all schemas
    match_string_schema = properties.Schema(
        properties.Schema.STRING,
        _("String to be matched."),
        required=True,
        update_allowed=True,
    )
    replacement_string_schema = properties.Schema(
        properties.Schema.MAP,
        _("Replacement string."),
        schema=ReplaceStringVar.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'match_string',
        'replacement_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'match_string': match_string_schema,
        'replacement_string': replacement_string_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'replacement_string': getattr(ReplaceStringVar, 'field_references', {}),
    }

    unique_keys = {
        'my_key': 'match_string',
        'replacement_string': getattr(ReplaceStringVar, 'unique_keys', {}),
    }



class ContentRewriteProfile(object):
    # all schemas
    rewritable_content_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Rewrite only content types listed in this string group. Content types not present in this list are not rewritten. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'. (Default: System-Rewritable-Content-Types)"),
        required=False,
        update_allowed=True,
    )
    request_rewrite_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable rewrite on request body. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    response_rewrite_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable rewrite on response body. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    req_match_replace_pair_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Strings to be matched and replaced with on the request body."),
        schema=MatchReplacePair.properties_schema,
        required=True,
        update_allowed=False,
    )
    req_match_replace_pair_schema = properties.Schema(
        properties.Schema.LIST,
        _("Strings to be matched and replaced with on the request body."),
        schema=req_match_replace_pair_item_schema,
        required=False,
        update_allowed=True,
    )
    rsp_match_replace_pair_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Strings to be matched and replaced with on the response body."),
        schema=MatchReplacePair.properties_schema,
        required=True,
        update_allowed=False,
    )
    rsp_match_replace_pair_schema = properties.Schema(
        properties.Schema.LIST,
        _("Strings to be matched and replaced with on the response body."),
        schema=rsp_match_replace_pair_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'rewritable_content_uuid',
        'request_rewrite_enabled',
        'response_rewrite_enabled',
        'req_match_replace_pair',
        'rsp_match_replace_pair',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'rewritable_content_uuid': rewritable_content_uuid_schema,
        'request_rewrite_enabled': request_rewrite_enabled_schema,
        'response_rewrite_enabled': response_rewrite_enabled_schema,
        'req_match_replace_pair': req_match_replace_pair_schema,
        'rsp_match_replace_pair': rsp_match_replace_pair_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'req_match_replace_pair': getattr(MatchReplacePair, 'field_references', {}),
        'rsp_match_replace_pair': getattr(MatchReplacePair, 'field_references', {}),
        'rewritable_content_uuid': 'stringgroup',
    }

    unique_keys = {
        'req_match_replace_pair': getattr(MatchReplacePair, 'unique_keys', {}),
        'rsp_match_replace_pair': getattr(MatchReplacePair, 'unique_keys', {}),
    }

