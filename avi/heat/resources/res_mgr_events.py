# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from options import *


class RmSpawnSeEventDetails(object):
    # all schemas
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_cookie_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    host_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    host_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    networks_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    networks_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=networks_item_schema,
        required=False,
        update_allowed=True,
    )
    status_code_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vs_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    network_names_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    network_names_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=network_names_item_schema,
        required=False,
        update_allowed=True,
    )
    vcpus_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    memory_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_grp_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_grp_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    cloud_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_name',
        'se_cookie',
        'se_uuid',
        'host_uuid',
        'host_name',
        'networks',
        'status_code',
        'reason',
        'vs_uuid',
        'vs_name',
        'network_names',
        'vcpus',
        'memory',
        'se_grp_uuid',
        'se_grp_name',
        'cloud_uuid',
        'cloud_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_name': se_name_schema,
        'se_cookie': se_cookie_schema,
        'se_uuid': se_uuid_schema,
        'host_uuid': host_uuid_schema,
        'host_name': host_name_schema,
        'networks': networks_schema,
        'status_code': status_code_schema,
        'reason': reason_schema,
        'vs_uuid': vs_uuid_schema,
        'vs_name': vs_name_schema,
        'network_names': network_names_schema,
        'vcpus': vcpus_schema,
        'memory': memory_schema,
        'se_grp_uuid': se_grp_uuid_schema,
        'se_grp_name': se_grp_name_schema,
        'cloud_uuid': cloud_uuid_schema,
        'cloud_name': cloud_name_schema,
    }


class RmSeBootupFailEventDetails(object):
    # all schemas
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    host_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'reason',
        'se_name',
        'host_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'reason': reason_schema,
        'se_name': se_name_schema,
        'host_name': host_name_schema,
    }


class HostUnavailEventDetails(object):
    # all schemas
    reasons_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    reasons_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=reasons_item_schema,
        required=False,
        update_allowed=True,
    )
    vs_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'reasons',
        'vs_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'reasons': reasons_schema,
        'vs_name': vs_name_schema,
    }


class RmModifyVnic(object):
    # all schemas
    mac_addr_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'mac_addr',
        'network_uuid',
        'network_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'mac_addr': mac_addr_schema,
        'network_uuid': network_uuid_schema,
        'network_name': network_name_schema,
    }


class RmAddVnic(object):
    # all schemas
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'network_uuid',
        'network_name',
        'subnet',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'network_uuid': network_uuid_schema,
        'network_name': network_name_schema,
        'subnet': subnet_schema,
    }


class RmDeleteSeEventDetails(object):
    # all schemas
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_cookie_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    host_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    host_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    status_code_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_grp_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_grp_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    cloud_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_name',
        'se_cookie',
        'se_uuid',
        'host_uuid',
        'host_name',
        'status_code',
        'reason',
        'se_grp_uuid',
        'se_grp_name',
        'cloud_uuid',
        'cloud_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_name': se_name_schema,
        'se_cookie': se_cookie_schema,
        'se_uuid': se_uuid_schema,
        'host_uuid': host_uuid_schema,
        'host_name': host_name_schema,
        'status_code': status_code_schema,
        'reason': reason_schema,
        'se_grp_uuid': se_grp_uuid_schema,
        'se_grp_name': se_grp_name_schema,
        'cloud_uuid': cloud_uuid_schema,
        'cloud_name': cloud_name_schema,
    }


class RmUnbindVsSeEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vs_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'vs_name',
        'se_name',
        'reason',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'vs_name': vs_name_schema,
        'se_name': se_name_schema,
        'reason': reason_schema,
    }


class RmBindVsSeEventDetails(object):
    # all schemas
    vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vs_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    primary_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    standby_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vs_uuid',
        'vs_name',
        'se_name',
        'primary',
        'standby',
        'type',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vs_uuid': vs_uuid_schema,
        'vs_name': vs_name_schema,
        'se_name': se_name_schema,
        'primary': primary_schema,
        'standby': standby_schema,
        'type': type_schema,
    }


class RmRebootSeEventDetails(object):
    # all schemas
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'reason',
        'se_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'reason': reason_schema,
        'se_name': se_name_schema,
    }


class RmAddNetworksEventDetails(object):
    # all schemas
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=RmAddVnic.properties_schema,
        required=True,
        update_allowed=False,
    )
    networks_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=networks_item_schema,
        required=False,
        update_allowed=True,
    )
    vs_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    vs_name_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vs_name_item_schema,
        required=False,
        update_allowed=True,
    )
    vs_uuid_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    vs_uuid_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vs_uuid_item_schema,
        required=False,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_uuid',
        'se_name',
        'networks',
        'vs_name',
        'vs_uuid',
        'reason',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_uuid': se_uuid_schema,
        'se_name': se_name_schema,
        'networks': networks_schema,
        'vs_name': vs_name_schema,
        'vs_uuid': vs_uuid_schema,
        'reason': reason_schema,
    }


class RmModifyNetworksEventDetails(object):
    # all schemas
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=RmModifyVnic.properties_schema,
        required=True,
        update_allowed=False,
    )
    networks_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=networks_item_schema,
        required=False,
        update_allowed=True,
    )
    vs_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    vs_name_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vs_name_item_schema,
        required=False,
        update_allowed=True,
    )
    vs_uuid_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    vs_uuid_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vs_uuid_item_schema,
        required=False,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_uuid',
        'se_name',
        'networks',
        'vs_name',
        'vs_uuid',
        'reason',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_uuid': se_uuid_schema,
        'se_name': se_name_schema,
        'networks': networks_schema,
        'vs_name': vs_name_schema,
        'vs_uuid': vs_uuid_schema,
        'reason': reason_schema,
    }


class RmSeIpFailEventDetails(object):
    # all schemas
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    host_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=RmAddVnic.properties_schema,
        required=True,
        update_allowed=False,
    )
    networks_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=networks_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'reason',
        'se_name',
        'host_name',
        'networks',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'reason': reason_schema,
        'se_name': se_name_schema,
        'host_name': host_name_schema,
        'networks': networks_schema,
    }
