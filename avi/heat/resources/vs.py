# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from common import *
from options import *
from pool import *
from debug_se import *
from analytics_policy import *
from vs_datascript import *
from application_policy import *
from auth import *
from rate import *


class VsSeInitialPlacementParams(object):
    # all schemas
    to_new_se_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    to_se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    to_host_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'to_new_se',
        'to_se_uuid',
        'to_host_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'to_new_se': to_new_se_schema,
        'to_se_uuid': to_se_uuid_schema,
        'to_host_uuid': to_host_uuid_schema,
    }




class ServicePoolSelector(object):
    # all schemas
    service_port_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=Port.properties_schema,
        required=True,
        update_allowed=True,
    )
    service_pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'service_port',
        'service_pool_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'service_port': service_port_schema,
        'service_pool_uuid': service_pool_uuid_schema,
    }




class VirtualServiceResource(object):
    # all schemas
    num_vcpus_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    memory_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    is_exclusive_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    scalein_primary_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_se_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    scalein_se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_standby_se_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'num_vcpus',
        'memory',
        'is_exclusive',
        'scalein_primary',
        'num_se',
        'scalein_se_uuid',
        'num_standby_se',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'num_vcpus': num_vcpus_schema,
        'memory': memory_schema,
        'is_exclusive': is_exclusive_schema,
        'scalein_primary': scalein_primary_schema,
        'num_se': num_se_schema,
        'scalein_se_uuid': scalein_se_uuid_schema,
        'num_standby_se': num_standby_se_schema,
    }




class VsScaleinParams(object):
    # all schemas
    from_se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    scalein_primary_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    admin_down_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'from_se_uuid',
        'scalein_primary',
        'admin_down',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'from_se_uuid': from_se_uuid_schema,
        'scalein_primary': scalein_primary_schema,
        'admin_down': admin_down_schema,
    }




class Service(object):
    # all schemas
    port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The Virtual Service's port number."),
        required=True,
        update_allowed=True,
    )
    enable_ssl_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable SSL termination and offload for traffic from clients."),
        required=False,
        update_allowed=True,
    )
    override_network_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Override the network profile for this specific service port."),
        required=False,
        update_allowed=True,
    )
    port_range_end_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The end of the Virtual Service's port number range."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'port',
        'enable_ssl',
        'override_network_profile_uuid',
        'port_range_end',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'port': port_schema,
        'enable_ssl': enable_ssl_schema,
        'override_network_profile_uuid': override_network_profile_uuid_schema,
        'port_range_end': port_range_end_schema,
    }




class PerformanceLimits(object):
    # all schemas
    max_concurrent_connections_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The maximum number of concurrent client conections allowed to the Virtual Service."),
        required=False,
        update_allowed=True,
    )
    max_throughput_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The maximum throughput per second for all clients allowed through the client side of the Virtual Service."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'max_concurrent_connections',
        'max_throughput',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'max_concurrent_connections': max_concurrent_connections_schema,
        'max_throughput': max_throughput_schema,
    }




class VirtualService(AviResource):
    resource_name = "virtualservice"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name for the Virtual Service."),
        required=True,
        update_allowed=True,
    )
    address_schema = properties.Schema(
        properties.Schema.STRING,
        _("IP Address or a DNS resolvable, fully qualified domain name of the Virtual Service."),
        required=False,
        update_allowed=True,
    )
    ip_address_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP Address of the Virtual Service."),
        schema=IpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )
    enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable or disable the Virtual Service."),
        required=False,
        update_allowed=True,
    )
    services_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=Service.properties_schema,
        required=True,
        update_allowed=False,
    )
    services_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=services_item_schema,
        required=False,
        update_allowed=True,
    )
    application_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Enable application layer specific features for the Virtual Service."),
        required=False,
        update_allowed=True,
    )
    network_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Determines network settings such as protocol, TCP or UDP, and related options for the protocol."),
        required=False,
        update_allowed=True,
    )
    server_network_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Determines the network settings profile for the server side of TCP proxied connections.  Leave blank to use the same settings as the client to VS side of the connection."),
        required=False,
        update_allowed=True,
    )
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("The pool is an object that contains destination servers and related attributes such as load-balancing and persistence."),
        required=False,
        update_allowed=True,
    )
    se_group_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("The Service Engine Group to use for this Virtual Service. Moving to a new SE Group is disruptive to existing connection for this VS."),
        required=False,
        update_allowed=True,
    )
    network_security_policy_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Network security policies for the Virtual Service."),
        required=False,
        update_allowed=True,
    )
    http_policies_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=HTTPPolicies.properties_schema,
        required=True,
        update_allowed=False,
    )
    http_policies_schema = properties.Schema(
        properties.Schema.LIST,
        _("HTTP Policies applied on the data traffic of the Virtual Service"),
        schema=http_policies_item_schema,
        required=False,
        update_allowed=True,
    )
    ssl_key_and_certificate_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    ssl_key_and_certificate_uuids_schema = properties.Schema(
        properties.Schema.LIST,
        _("Select or create one or two certificates, EC and/or RSA, that will be presented to SSL/TLS terminated connections."),
        schema=ssl_key_and_certificate_uuids_item_schema,
        required=False,
        update_allowed=True,
    )
    ssl_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Determines the set of SSL versions and ciphers to accept for SSL/TLS terminated connections."),
        required=False,
        update_allowed=True,
    )
    performance_limits_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=PerformanceLimits.properties_schema,
        required=False,
        update_allowed=True,
    )
    analytics_policy_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AnalyticsPolicy.properties_schema,
        required=False,
        update_allowed=True,
    )
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Manually override the network on which the Virtual Service is placed."),
        required=False,
        update_allowed=True,
    )
    vrf_context_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Virtual Routing Context that the Virtual Service is bound to. This is used to provide the isolation of the set of networks the application is attached to."),
        required=False,
        update_allowed=True,
    )
    enable_autogw_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Response traffic to clients will be sent back to the source MAC address of the connection, rather than statically sent to a default gateway."),
        required=False,
        update_allowed=True,
    )
    port_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(internal-use) Network port assigned to the Virtual Service IP address."),
        required=False,
        update_allowed=True,
    )
    subnet_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("If auto_allocate_ip is True, then the subnet for the Virtual Service IP address allocation."),
        required=False,
        update_allowed=True,
    )
    analytics_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Specifies settings related to analytics."),
        required=False,
        update_allowed=True,
    )
    discovered_network_uuid_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    discovered_network_uuid_schema = properties.Schema(
        properties.Schema.LIST,
        _("Discovered networks providing reachability for client facing Virtual Service IP."),
        schema=discovered_network_uuid_item_schema,
        required=False,
        update_allowed=True,
    )
    discovered_subnet_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrPrefix.properties_schema,
        required=True,
        update_allowed=False,
    )
    discovered_subnet_schema = properties.Schema(
        properties.Schema.LIST,
        _("Discovered subnets providing reachability for client facing Virtual Service IP."),
        schema=discovered_subnet_item_schema,
        required=False,
        update_allowed=True,
    )
    host_name_xlate_schema = properties.Schema(
        properties.Schema.STRING,
        _("Translate the host name sent to the servers to this value.  Translate the host name sent from servers back to the value used by the client."),
        required=False,
        update_allowed=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Subnet providing reachability for client facing Virtual Service IP."),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    discovered_networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DiscoveredNetwork.properties_schema,
        required=True,
        update_allowed=False,
    )
    discovered_networks_schema = properties.Schema(
        properties.Schema.LIST,
        _("Discovered networks providing reachability for client facing Virtual Service IP."),
        schema=discovered_networks_item_schema,
        required=False,
        update_allowed=True,
    )
    vs_datascripts_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VSDataScripts.properties_schema,
        required=True,
        update_allowed=False,
    )
    vs_datascripts_schema = properties.Schema(
        properties.Schema.LIST,
        _("Datascripts applied on the data traffic of the Virtual Service"),
        schema=vs_datascripts_item_schema,
        required=False,
        update_allowed=True,
    )
    client_auth_schema = properties.Schema(
        properties.Schema.MAP,
        _("HTTP authentication configuration for protected resources."),
        schema=HTTPClientAuthenticationParams.properties_schema,
        required=False,
        update_allowed=True,
    )
    weight_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The Quality of Service weight to assign to traffic transmitted from this Virtual Service.  A higher weight will prioritize traffic versus other Virtual Services sharing the same Service Engines. (1-2-4-8)"),
        required=False,
        update_allowed=True,
    )
    delay_fairness_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Select the algorithm for QoS fairness.  This determines how multiple Virtual Services sharing the same Service Engines will prioritize traffic over a congested network."),
        required=False,
        update_allowed=True,
    )
    max_cps_per_client_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Maximum connections per second per client IP."),
        required=False,
        update_allowed=True,
    )
    limit_doser_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Limit potential DoS attackers who exceed max_cps_per_client significantly to a fraction of max_cps_per_client for a while."),
        required=False,
        update_allowed=True,
    )
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _("Specify if this is a normal Virtual Service, or if it is the parent or child of an SNI-enabled virtual hosted Virtual Service."),
        required=False,
        update_allowed=True,
    )
    vh_parent_vs_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Specifies the Virtual Service acting as Virtual Hosting (SNI) parent."),
        required=False,
        update_allowed=True,
    )
    vh_domain_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    vh_domain_name_schema = properties.Schema(
        properties.Schema.LIST,
        _("The exact name requested from the client's SNI-enabled TLS hello domain name field. If this is a match, the parent VS will forward the connection to this child VS."),
        schema=vh_domain_name_item_schema,
        required=False,
        update_allowed=True,
    )
    availability_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _("Availability-zone to place the Virtual Service."),
        required=False,
        update_allowed=True,
    )
    auto_allocate_ip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Auto-allocate VIP from the provided subnet."),
        required=False,
        update_allowed=True,
    )
    floating_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("Floating IP to associate with this Virtual Service."),
        schema=IpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )
    auto_allocate_floating_ip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Auto-allocate floating/elastic IP from the Cloud infrastructure."),
        required=False,
        update_allowed=True,
    )
    floating_subnet_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("If auto_allocate_floating_ip is True and more than one floating-ip subnets exist, then the subnet for the floating IP address allocation."),
        required=False,
        update_allowed=True,
    )
    cloud_type_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    avi_allocated_vip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(internal-use) VIP allocated by Avi in the Cloud infrastructure."),
        required=False,
        update_allowed=True,
    )
    avi_allocated_fip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(internal-use) FIP allocated by Avi in the Cloud infrastructure."),
        required=False,
        update_allowed=True,
    )
    connections_rate_limit_schema = properties.Schema(
        properties.Schema.MAP,
        _("Rate limit the incoming connections to this virtual service"),
        schema=RateProfile.properties_schema,
        required=False,
        update_allowed=True,
    )
    requests_rate_limit_schema = properties.Schema(
        properties.Schema.MAP,
        _("Rate limit the incoming requests to this virtual service"),
        schema=RateProfile.properties_schema,
        required=False,
        update_allowed=True,
    )
    use_bridge_ip_as_vip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use Bridge IP as VIP on each Host in Mesos deployments"),
        required=False,
        update_allowed=True,
    )
    flow_dist_schema = properties.Schema(
        properties.Schema.STRING,
        _("Criteria for flow distribution among SEs."),
        required=False,
        update_allowed=True,
    )
    ign_pool_net_reach_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Ignore Pool servers network reachability constraints for Virtual Service placement."),
        required=False,
        update_allowed=True,
    )
    ssl_sess_cache_avg_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Expected number of SSL session cache entries (may be exceeded)."),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    east_west_placement_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Force placement on all SE's in service group (Mesos mode only)"),
        required=False,
        update_allowed=True,
    )
    scaleout_ecmp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    microservice_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Microservice representing the virtual service"),
        required=False,
        update_allowed=True,
    )
    service_pool_select_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ServicePoolSelector.properties_schema,
        required=True,
        update_allowed=False,
    )
    service_pool_select_schema = properties.Schema(
        properties.Schema.LIST,
        _("Select pool based on destination port"),
        schema=service_pool_select_item_schema,
        required=False,
        update_allowed=True,
    )
    created_by_schema = properties.Schema(
        properties.Schema.STRING,
        _("Creator name"),
        required=False,
        update_allowed=True,
    )
    cloud_config_cksum_schema = properties.Schema(
        properties.Schema.STRING,
        _("Checksum of cloud configuration for VS. Internally set by cloud connector"),
        required=False,
        update_allowed=True,
    )
    enable_rhi_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Route Health Injection using the BGP Config in the vrf context"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'address',
        'ip_address',
        'enabled',
        'services',
        'application_profile_uuid',
        'network_profile_uuid',
        'server_network_profile_uuid',
        'pool_uuid',
        'se_group_uuid',
        'network_security_policy_uuid',
        'http_policies',
        'ssl_key_and_certificate_uuids',
        'ssl_profile_uuid',
        'performance_limits',
        'analytics_policy',
        'network_uuid',
        'vrf_context_uuid',
        'enable_autogw',
        'port_uuid',
        'subnet_uuid',
        'analytics_profile_uuid',
        'discovered_network_uuid',
        'discovered_subnet',
        'host_name_xlate',
        'subnet',
        'discovered_networks',
        'vs_datascripts',
        'client_auth',
        'weight',
        'delay_fairness',
        'max_cps_per_client',
        'limit_doser',
        'type',
        'vh_parent_vs_uuid',
        'vh_domain_name',
        'availability_zone',
        'auto_allocate_ip',
        'floating_ip',
        'auto_allocate_floating_ip',
        'floating_subnet_uuid',
        'cloud_type',
        'avi_allocated_vip',
        'avi_allocated_fip',
        'connections_rate_limit',
        'requests_rate_limit',
        'use_bridge_ip_as_vip',
        'flow_dist',
        'ign_pool_net_reach',
        'ssl_sess_cache_avg_size',
        'description',
        'east_west_placement',
        'scaleout_ecmp',
        'microservice_uuid',
        'service_pool_select',
        'created_by',
        'cloud_config_cksum',
        'enable_rhi',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'address': address_schema,
        'ip_address': ip_address_schema,
        'enabled': enabled_schema,
        'services': services_schema,
        'application_profile_uuid': application_profile_uuid_schema,
        'network_profile_uuid': network_profile_uuid_schema,
        'server_network_profile_uuid': server_network_profile_uuid_schema,
        'pool_uuid': pool_uuid_schema,
        'se_group_uuid': se_group_uuid_schema,
        'network_security_policy_uuid': network_security_policy_uuid_schema,
        'http_policies': http_policies_schema,
        'ssl_key_and_certificate_uuids': ssl_key_and_certificate_uuids_schema,
        'ssl_profile_uuid': ssl_profile_uuid_schema,
        'performance_limits': performance_limits_schema,
        'analytics_policy': analytics_policy_schema,
        'network_uuid': network_uuid_schema,
        'vrf_context_uuid': vrf_context_uuid_schema,
        'enable_autogw': enable_autogw_schema,
        'port_uuid': port_uuid_schema,
        'subnet_uuid': subnet_uuid_schema,
        'analytics_profile_uuid': analytics_profile_uuid_schema,
        'discovered_network_uuid': discovered_network_uuid_schema,
        'discovered_subnet': discovered_subnet_schema,
        'host_name_xlate': host_name_xlate_schema,
        'subnet': subnet_schema,
        'discovered_networks': discovered_networks_schema,
        'vs_datascripts': vs_datascripts_schema,
        'client_auth': client_auth_schema,
        'weight': weight_schema,
        'delay_fairness': delay_fairness_schema,
        'max_cps_per_client': max_cps_per_client_schema,
        'limit_doser': limit_doser_schema,
        'type': type_schema,
        'vh_parent_vs_uuid': vh_parent_vs_uuid_schema,
        'vh_domain_name': vh_domain_name_schema,
        'availability_zone': availability_zone_schema,
        'auto_allocate_ip': auto_allocate_ip_schema,
        'floating_ip': floating_ip_schema,
        'auto_allocate_floating_ip': auto_allocate_floating_ip_schema,
        'floating_subnet_uuid': floating_subnet_uuid_schema,
        'cloud_type': cloud_type_schema,
        'avi_allocated_vip': avi_allocated_vip_schema,
        'avi_allocated_fip': avi_allocated_fip_schema,
        'connections_rate_limit': connections_rate_limit_schema,
        'requests_rate_limit': requests_rate_limit_schema,
        'use_bridge_ip_as_vip': use_bridge_ip_as_vip_schema,
        'flow_dist': flow_dist_schema,
        'ign_pool_net_reach': ign_pool_net_reach_schema,
        'ssl_sess_cache_avg_size': ssl_sess_cache_avg_size_schema,
        'description': description_schema,
        'east_west_placement': east_west_placement_schema,
        'scaleout_ecmp': scaleout_ecmp_schema,
        'microservice_uuid': microservice_uuid_schema,
        'service_pool_select': service_pool_select_schema,
        'created_by': created_by_schema,
        'cloud_config_cksum': cloud_config_cksum_schema,
        'enable_rhi': enable_rhi_schema,
    }




class VirtualServiceServices(AviNestedResource, Service):
    resource_name = "virtualservice"
    nested_property_name = "services"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = Service.PROPERTIES + ('virtualservice_uuid',)

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
    }
    properties_schema.update(Service.properties_schema)


class VirtualServiceHttpPolicies(AviNestedResource):
    resource_name = "virtualservice"
    nested_property_name = "http_policies"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )
    http_policies_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('virtualservice_uuid',
                  'http_policies',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
        'http_policies': http_policies_item_schema,
    }


class VirtualServiceSslKeyAndCertificateUuids(AviNestedResource):
    resource_name = "virtualservice"
    nested_property_name = "ssl_key_and_certificate_uuids"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )
    ssl_key_and_certificate_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('virtualservice_uuid',
                  'ssl_key_and_certificate_uuids',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
        'ssl_key_and_certificate_uuids': ssl_key_and_certificate_uuids_item_schema,
    }


class VirtualServiceDiscoveredNetworkUuid(AviNestedResource):
    resource_name = "virtualservice"
    nested_property_name = "discovered_network_uuid"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )
    discovered_network_uuid_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('virtualservice_uuid',
                  'discovered_network_uuid',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
        'discovered_network_uuid': discovered_network_uuid_item_schema,
    }


class VirtualServiceDiscoveredSubnet(AviNestedResource):
    resource_name = "virtualservice"
    nested_property_name = "discovered_subnet"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )
    discovered_subnet_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('virtualservice_uuid',
                  'discovered_subnet',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
        'discovered_subnet': discovered_subnet_item_schema,
    }


class VirtualServiceDiscoveredNetworks(AviNestedResource):
    resource_name = "virtualservice"
    nested_property_name = "discovered_networks"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )
    discovered_networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('virtualservice_uuid',
                  'discovered_networks',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
        'discovered_networks': discovered_networks_item_schema,
    }


class VirtualServiceVsDatascripts(AviNestedResource):
    resource_name = "virtualservice"
    nested_property_name = "vs_datascripts"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )
    vs_datascripts_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('virtualservice_uuid',
                  'vs_datascripts',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
        'vs_datascripts': vs_datascripts_item_schema,
    }


class VirtualServiceVhDomainName(AviNestedResource):
    resource_name = "virtualservice"
    nested_property_name = "vh_domain_name"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )
    vh_domain_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('virtualservice_uuid',
                  'vh_domain_name',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
        'vh_domain_name': vh_domain_name_item_schema,
    }


class VirtualServiceServicePoolSelect(AviNestedResource, ServicePoolSelector):
    resource_name = "virtualservice"
    nested_property_name = "service_pool_select"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of virtualservice"),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ServicePoolSelector.PROPERTIES + ('virtualservice_uuid',)

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_uuid': parent_uuid_schema,
    }
    properties_schema.update(ServicePoolSelector.properties_schema)


class VsScaleoutParams(object):
    # all schemas
    to_se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    to_new_se_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    to_host_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    admin_up_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    new_vcpus_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'to_se_uuid',
        'to_new_se',
        'to_host_uuid',
        'admin_up',
        'new_vcpus',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'to_se_uuid': to_se_uuid_schema,
        'to_new_se': to_new_se_schema,
        'to_host_uuid': to_host_uuid_schema,
        'admin_up': admin_up_schema,
        'new_vcpus': new_vcpus_schema,
    }




class TLSTicket(object):
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    aes_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    hmac_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'aes_key',
        'hmac_key',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'aes_key': aes_key_schema,
        'hmac_key': hmac_key_schema,
    }




class VsMigrateParams(object):
    # all schemas
    from_se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    to_se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    to_new_se_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    to_host_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    new_vcpus_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'from_se_uuid',
        'to_se_uuid',
        'to_new_se',
        'to_host_uuid',
        'new_vcpus',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'from_se_uuid': from_se_uuid_schema,
        'to_se_uuid': to_se_uuid_schema,
        'to_new_se': to_new_se_schema,
        'to_host_uuid': to_host_uuid_schema,
        'new_vcpus': new_vcpus_schema,
    }




class VsSeVnic(object):
    # all schemas
    mac_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    lif_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'mac',
        'type',
        'lif',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'mac': mac_schema,
        'type': type_schema,
        'lif': lif_schema,
    }




class VsApicExtension(object):
    # all schemas
    txn_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vnic_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsSeVnic.properties_schema,
        required=True,
        update_allowed=False,
    )
    vnic_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vnic_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'txn_uuid',
        'se_uuid',
        'vnic',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'txn_uuid': txn_uuid_schema,
        'se_uuid': se_uuid_schema,
        'vnic': vnic_schema,
    }




class VsInitialPlacementParams(object):
    # all schemas
    se_placement_params_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsSeInitialPlacementParams.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_placement_params_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=se_placement_params_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_placement_params',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_placement_params': se_placement_params_schema,
    }




class SeList(object):
    # all schemas
    se_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    is_primary_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=True,
        update_allowed=True,
    )
    is_standby_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    is_connected_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=True,
        update_allowed=True,
    )
    delete_in_progress_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=True,
        update_allowed=True,
    )
    vcpus_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    memory_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    vip_intf_mac_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    vip_subnet_mask_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    vnic_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VsSeVnic.properties_schema,
        required=True,
        update_allowed=False,
    )
    vnic_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vnic_item_schema,
        required=False,
        update_allowed=True,
    )
    pending_download_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    sec_idx_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    download_selist_only_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    vlan_id_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_uuid',
        'is_primary',
        'is_standby',
        'is_connected',
        'delete_in_progress',
        'vcpus',
        'memory',
        'vip_intf_mac',
        'vip_subnet_mask',
        'vnic',
        'pending_download',
        'sec_idx',
        'download_selist_only',
        'vlan_id',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_uuid': se_uuid_schema,
        'is_primary': is_primary_schema,
        'is_standby': is_standby_schema,
        'is_connected': is_connected_schema,
        'delete_in_progress': delete_in_progress_schema,
        'vcpus': vcpus_schema,
        'memory': memory_schema,
        'vip_intf_mac': vip_intf_mac_schema,
        'vip_subnet_mask': vip_subnet_mask_schema,
        'vnic': vnic_schema,
        'pending_download': pending_download_schema,
        'sec_idx': sec_idx_schema,
        'download_selist_only': download_selist_only_schema,
        'vlan_id': vlan_id_schema,
    }




def resource_mapping():
    return {
        'AviBeta16.1::VirtualService::ServicePoolSelect': VirtualServiceServicePoolSelect,
        'AviBeta16.1::VirtualService::Service': VirtualServiceServices,
        'AviBeta16.1::VirtualService::VhDomainName': VirtualServiceVhDomainName,
        'AviBeta16.1::VirtualService::DiscoveredNetwork': VirtualServiceDiscoveredNetworks,
        'AviBeta16.1::VirtualService::VsDatascript': VirtualServiceVsDatascripts,
        'AviBeta16.1::VirtualService::DiscoveredSubnet': VirtualServiceDiscoveredSubnet,
        'AviBeta16.1::VirtualService::HttpPolicy': VirtualServiceHttpPolicies,
        'AviBeta16.1::VirtualService::SslKeyAndCertificateUuid': VirtualServiceSslKeyAndCertificateUuids,
        'AviBeta16.1::VirtualService': VirtualService,
        'AviBeta16.1::VirtualService::DiscoveredNetworkUuid': VirtualServiceDiscoveredNetworkUuid,
    }

