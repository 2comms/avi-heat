# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from options import *


class BgpPeer(object):
    # all schemas
    remote_as_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Peer Autonomous System ID"),
        required=False,
    )
    peer_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP Address of the BGP Peer"),
        schema=IpAddr.properties_schema,
        required=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Subnet providing reachability for Peer"),
        schema=IpAddrPrefix.properties_schema,
        required=True,
    )
    md5_secret_schema = properties.Schema(
        properties.Schema.STRING,
        _("Peer Autonomous System Md5 Digest Secret Key"),
        required=False,
    )
    bfd_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Bi-Directional Forward Detection. Only async mode supported."),
        required=False,
    )
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Network providing reachability for Peer"),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'remote_as',
        'peer_ip',
        'subnet',
        'md5_secret',
        'bfd',
        'network_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'remote_as': remote_as_schema,
        'peer_ip': peer_ip_schema,
        'subnet': subnet_schema,
        'md5_secret': md5_secret_schema,
        'bfd': bfd_schema,
        'network_uuid': network_uuid_schema,
    }


class BgpProfile(object):
    # all schemas
    local_as_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Local Autonomous System ID"),
        required=True,
    )
    ibgp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("BGP peer type"),
        required=True,
    )
    peers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=BgpPeer.properties_schema,
        required=True,
    )
    peers_schema = properties.Schema(
        properties.Schema.LIST,
        _("BGP Peers"),
        schema=peers_item_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'local_as',
        'ibgp',
        'peers',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'local_as': local_as_schema,
        'ibgp': ibgp_schema,
        'peers': peers_schema,
    }


class StaticRoute(object):
    # all schemas
    prefix_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrPrefix.properties_schema,
        required=True,
    )
    next_hop_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
    )
    if_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    route_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )

    # properties list
    PROPERTIES = (
        'prefix',
        'next_hop',
        'if_name',
        'route_id',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'prefix': prefix_schema,
        'next_hop': next_hop_schema,
        'if_name': if_name_schema,
        'route_id': route_id_schema,
    }


class VrfContext(AviResource):
    resource_name = "vrfcontext"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    static_routes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=StaticRoute.properties_schema,
        required=True,
    )
    static_routes_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=static_routes_item_schema,
        required=False,
    )
    bgp_profile_schema = properties.Schema(
        properties.Schema.MAP,
        _("Bgp Local and Peer Info"),
        schema=BgpProfile.properties_schema,
        required=False,
    )
    system_default_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'name',
        'static_routes',
        'bgp_profile',
        'system_default',
        'description',
        'cloud_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'static_routes': static_routes_schema,
        'bgp_profile': bgp_profile_schema,
        'system_default': system_default_schema,
        'description': description_schema,
        'cloud_uuid': cloud_uuid_schema,
    }


def resource_mapping():
    return {
        'Avi::VrfContext': VrfContext,
    }

