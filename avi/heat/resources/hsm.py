# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from options import *


class HSMSafenetClientInfo(object):
    # all schemas
    client_priv_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("Client Private Key generated by createCert"),
        required=False,
        update_allowed=False,
    )
    client_cert_schema = properties.Schema(
        properties.Schema.STRING,
        _("Client Certificate generated by createCert"),
        required=False,
        update_allowed=False,
    )
    client_ip_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name prepended to client key and certificate filename"),
        required=True,
        update_allowed=True,
    )
    chrystoki_conf_schema = properties.Schema(
        properties.Schema.STRING,
        _("Generated File - Chrystoki.conf "),
        required=False,
        update_allowed=False,
    )
    session_major_number_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Major number of the sesseion"),
        required=False,
        update_allowed=False,
    )
    session_minor_number_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Minor number of the sesseion"),
        required=False,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = (
        'client_priv_key',
        'client_cert',
        'client_ip',
        'chrystoki_conf',
        'session_major_number',
        'session_minor_number',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'client_priv_key': client_priv_key_schema,
        'client_cert': client_cert_schema,
        'client_ip': client_ip_schema,
        'chrystoki_conf': chrystoki_conf_schema,
        'session_major_number': session_major_number_schema,
        'session_minor_number': session_minor_number_schema,
    }

    unique_keys = {
        'my_key': 'client_ip',
    }



class HSMThalesRFS(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP address of the RFS server from where to sync the Thales encrypted private key"),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Port at which the RFS server accepts the sync request from clients for Thales encrypted private key (Default: 9004)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'port',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'port': port_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ip': getattr(IpAddr, 'field_references', {}),
    }

    unique_keys = {
        'ip': getattr(IpAddr, 'unique_keys', {}),
    }



class HSMThalesNetHsm(object):
    # all schemas
    remote_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP address of the netHSM device"),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    remote_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Port at which the netHSM device accepts the connection (Default: 9004)"),
        required=False,
        update_allowed=True,
    )
    esn_schema = properties.Schema(
        properties.Schema.STRING,
        _("Electronic serial number of the netHSM device. Use Thales anonkneti utility to find the netHSM ESN"),
        required=True,
        update_allowed=True,
    )
    module_id_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Local module id of the netHSM device (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    keyhash_schema = properties.Schema(
        properties.Schema.STRING,
        _("Hash of the key that netHSM device uses to authenticate itself. Use Thales anonkneti utility to find the netHSM keyhash"),
        required=True,
        update_allowed=True,
    )
    priority_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Priority class of the nethsm in an high availability setup. 1 is the highest priority and 100 is the lowest priority (Default: 100)"),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'remote_ip',
        'remote_port',
        'esn',
        'module_id',
        'keyhash',
        'priority',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'remote_ip': remote_ip_schema,
        'remote_port': remote_port_schema,
        'esn': esn_schema,
        'module_id': module_id_schema,
        'keyhash': keyhash_schema,
        'priority': priority_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'remote_ip': getattr(IpAddr, 'field_references', {}),
    }

    unique_keys = {
        'remote_ip': getattr(IpAddr, 'unique_keys', {}),
    }



class HSMAwsCloudHsm(object):
    # all schemas
    cluster_cert_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.7) AWS CloudHSM Cluster Certificate"),
        required=False,
        update_allowed=True,
    )
    hsm_ip_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.7) IP address of the HSM in the cluster. If there are more than one HSMs, only one is sufficient"),
        required=True,
        update_allowed=False,
    )
    hsm_ip_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.7) IP address of the HSM in the cluster. If there are more than one HSMs, only one is sufficient"),
        schema=hsm_ip_item_schema,
        required=False,
        update_allowed=True,
    )
    client_config_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.7) "),
        required=False,
        update_allowed=False,
    )
    mgmt_config_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.7) "),
        required=False,
        update_allowed=False,
    )
    crypto_user_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.7) Username of the Crypto User. This will be used to access the keys on the HSM "),
        required=False,
        update_allowed=True,
    )
    crypto_user_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.7) Password of the Crypto User. This will be used to access the keys on the HSM "),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cluster_cert',
        'hsm_ip',
        'client_config',
        'mgmt_config',
        'crypto_user_name',
        'crypto_user_password',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cluster_cert': cluster_cert_schema,
        'hsm_ip': hsm_ip_schema,
        'client_config': client_config_schema,
        'mgmt_config': mgmt_config_schema,
        'crypto_user_name': crypto_user_name_schema,
        'crypto_user_password': crypto_user_password_schema,
    }



class HSMSafenetLunaServer(object):
    # all schemas
    remote_ip_schema = properties.Schema(
        properties.Schema.STRING,
        _("IP address of the Safenet/Gemalto HSM device"),
        required=True,
        update_allowed=True,
    )
    server_cert_schema = properties.Schema(
        properties.Schema.STRING,
        _("CA certificate of the server"),
        required=True,
        update_allowed=True,
    )
    partition_passwd_schema = properties.Schema(
        properties.Schema.STRING,
        _("Password of the partition assigned to this client"),
        required=False,
        update_allowed=True,
    )
    partition_serial_number_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 16.5.2,17.2.3) Serial number of the partition assigned to this client."),
        required=False,
        update_allowed=True,
    )
    index_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 16.5.2,17.2.3) "),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'remote_ip',
        'server_cert',
        'partition_passwd',
        'partition_serial_number',
        'index',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'remote_ip': remote_ip_schema,
        'server_cert': server_cert_schema,
        'partition_passwd': partition_passwd_schema,
        'partition_serial_number': partition_serial_number_schema,
        'index': index_schema,
    }

    unique_keys = {
        'my_key': 'index',
    }



class HSMSafenetLuna(object):
    # all schemas
    server_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("SafeNet/Gemalto HSM Servers used for crypto operations"),
        schema=HSMSafenetLunaServer.properties_schema,
        required=True,
        update_allowed=False,
    )
    server_schema = properties.Schema(
        properties.Schema.LIST,
        _("SafeNet/Gemalto HSM Servers used for crypto operations"),
        schema=server_item_schema,
        required=False,
        update_allowed=True,
    )
    is_ha_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Set to indicate HA across more than one servers (Default: False)"),
        required=True,
        update_allowed=True,
    )
    ha_group_num_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Group Number of generated HA Group"),
        required=False,
        update_allowed=False,
    )
    node_info_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Node specific information"),
        schema=HSMSafenetClientInfo.properties_schema,
        required=True,
        update_allowed=False,
    )
    node_info_schema = properties.Schema(
        properties.Schema.LIST,
        _("Node specific information"),
        schema=node_info_item_schema,
        required=False,
        update_allowed=True,
    )
    server_pem_schema = properties.Schema(
        properties.Schema.STRING,
        _("Generated File - server.pem"),
        required=False,
        update_allowed=False,
    )
    use_dedicated_network_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If enabled, dedicated network is used to communicate with HSM,else, the management network is used. (Default: False)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'server',
        'is_ha',
        'ha_group_num',
        'node_info',
        'server_pem',
        'use_dedicated_network',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'server': server_schema,
        'is_ha': is_ha_schema,
        'ha_group_num': ha_group_num_schema,
        'node_info': node_info_schema,
        'server_pem': server_pem_schema,
        'use_dedicated_network': use_dedicated_network_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'node_info': getattr(HSMSafenetClientInfo, 'field_references', {}),
        'server': getattr(HSMSafenetLunaServer, 'field_references', {}),
    }

    unique_keys = {
        'node_info': getattr(HSMSafenetClientInfo, 'unique_keys', {}),
        'server': getattr(HSMSafenetLunaServer, 'unique_keys', {}),
    }



class HardwareSecurityModule(object):
    # all schemas
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _("HSM type to use"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['HSM_TYPE_AWS_CLOUDHSM', 'HSM_TYPE_SAFENET_LUNA', 'HSM_TYPE_THALES_NETHSM']),
        ],
    )
    rfs_schema = properties.Schema(
        properties.Schema.MAP,
        _("Thales Remote File Server (RFS), used for the netHSMs, configuration"),
        schema=HSMThalesRFS.properties_schema,
        required=False,
        update_allowed=True,
    )
    nethsm_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Thales netHSM specific configuration"),
        schema=HSMThalesNetHsm.properties_schema,
        required=True,
        update_allowed=False,
    )
    nethsm_schema = properties.Schema(
        properties.Schema.LIST,
        _("Thales netHSM specific configuration"),
        schema=nethsm_item_schema,
        required=False,
        update_allowed=True,
    )
    sluna_schema = properties.Schema(
        properties.Schema.MAP,
        _("Safenet/Gemalto Luna/Gem specific configuration"),
        schema=HSMSafenetLuna.properties_schema,
        required=False,
        update_allowed=True,
    )
    cloudhsm_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.7) AWS CloudHSM specific configuration"),
        schema=HSMAwsCloudHsm.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'type',
        'rfs',
        'nethsm',
        'sluna',
        'cloudhsm',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'type': type_schema,
        'rfs': rfs_schema,
        'nethsm': nethsm_schema,
        'sluna': sluna_schema,
        'cloudhsm': cloudhsm_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'rfs': getattr(HSMThalesRFS, 'field_references', {}),
        'sluna': getattr(HSMSafenetLuna, 'field_references', {}),
        'nethsm': getattr(HSMThalesNetHsm, 'field_references', {}),
        'cloudhsm': getattr(HSMAwsCloudHsm, 'field_references', {}),
    }

    unique_keys = {
        'rfs': getattr(HSMThalesRFS, 'unique_keys', {}),
        'sluna': getattr(HSMSafenetLuna, 'unique_keys', {}),
        'nethsm': getattr(HSMThalesNetHsm, 'unique_keys', {}),
        'cloudhsm': getattr(HSMAwsCloudHsm, 'unique_keys', {}),
    }



class HardwareSecurityModuleGroup(AviResource):
    resource_name = "hardwaresecuritymodulegroup"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of the HSM Group configuration object"),
        required=True,
        update_allowed=True,
    )
    hsm_schema = properties.Schema(
        properties.Schema.MAP,
        _("Hardware Security Module configuration"),
        schema=HardwareSecurityModule.properties_schema,
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'hsm',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'hsm': hsm_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'hsm': getattr(HardwareSecurityModule, 'field_references', {}),
    }

    unique_keys = {
        'hsm': getattr(HardwareSecurityModule, 'unique_keys', {}),
    }



def resource_mapping():
    return {
        'Avi::LBaaS::HardwareSecurityModuleGroup': HardwareSecurityModuleGroup,
    }

