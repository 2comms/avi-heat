# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from common import *
from options import *


class SeResources(object):
    # all schemas
    num_vcpus_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    memory_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    disk_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
    )
    hyper_threading_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    sockets_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    cores_per_socket_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'num_vcpus',
        'memory',
        'disk',
        'hyper_threading',
        'sockets',
        'cores_per_socket',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'num_vcpus': num_vcpus_schema,
        'memory': memory_schema,
        'disk': disk_schema,
        'hyper_threading': hyper_threading_schema,
        'sockets': sockets_schema,
        'cores_per_socket': cores_per_socket_schema,
    }


class ConServer(object):
    # all schemas
    server_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
    )
    virtual_network_id_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    virtual_network_id_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=virtual_network_id_item_schema,
        required=False,
    )
    subnet_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrPrefix.properties_schema,
        required=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=subnet_item_schema,
        required=False,
    )
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'server_ip',
        'virtual_network_id',
        'subnet',
        'pool_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'server_ip': server_ip_schema,
        'virtual_network_id': virtual_network_id_schema,
        'subnet': subnet_schema,
        'pool_uuid': pool_uuid_schema,
    }


class DefaultGateway(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
    )
    discovered_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=True,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'discovered',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'discovered': discovered_schema,
    }


class ConVip(object):
    # all schemas
    vip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=False,
    )
    virtual_network_id_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    virtual_network_id_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=virtual_network_id_item_schema,
        required=False,
    )
    subnet_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrPrefix.properties_schema,
        required=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=subnet_item_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'vip',
        'virtual_network_id',
        'subnet',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vip': vip_schema,
        'virtual_network_id': virtual_network_id_schema,
        'subnet': subnet_schema,
    }


class vNICNetwork(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrPrefix.properties_schema,
        required=True,
    )
    ctlr_alloc_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    mode_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'ctlr_alloc',
        'mode',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'ctlr_alloc': ctlr_alloc_schema,
        'mode': mode_schema,
    }


class ConInfo(object):
    # all schemas
    con_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    vip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ConVip.properties_schema,
        required=True,
    )
    servers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ConServer.properties_schema,
        required=True,
    )
    servers_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=servers_item_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'con_uuid',
        'vip',
        'servers',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'con_uuid': con_uuid_schema,
        'vip': vip_schema,
        'servers': servers_schema,
    }


class VlanInterface(object):
    # all schemas
    if_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    vlan_id_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    dhcp_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    vnic_networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vNICNetwork.properties_schema,
        required=True,
    )
    vnic_networks_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vnic_networks_item_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'if_name',
        'vlan_id',
        'dhcp_enabled',
        'vnic_networks',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'if_name': if_name_schema,
        'vlan_id': vlan_id_schema,
        'dhcp_enabled': dhcp_enabled_schema,
        'vnic_networks': vnic_networks_schema,
    }


class vNIC(object):
    # all schemas
    if_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    mac_address_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
    )
    connected_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    is_mgmt_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    dhcp_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    is_avi_internal_network_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    adapter_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    vlan_id_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    pci_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    linux_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    port_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    del_pending_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    mtu_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    vnic_networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vNICNetwork.properties_schema,
        required=True,
    )
    vnic_networks_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vnic_networks_item_schema,
        required=False,
    )
    can_se_dp_takeover_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    vrf_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    vrf_id_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
    )
    vlan_interfaces_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=VlanInterface.properties_schema,
        required=True,
    )
    vlan_interfaces_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=vlan_interfaces_item_schema,
        required=False,
    )

    # properties list
    PROPERTIES = (
        'if_name',
        'mac_address',
        'connected',
        'is_mgmt',
        'network_uuid',
        'network_name',
        'dhcp_enabled',
        'is_avi_internal_network',
        'enabled',
        'adapter',
        'vlan_id',
        'pci_id',
        'linux_name',
        'port_uuid',
        'del_pending',
        'mtu',
        'vnic_networks',
        'can_se_dp_takeover',
        'vrf_uuid',
        'vrf_id',
        'vlan_interfaces',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'if_name': if_name_schema,
        'mac_address': mac_address_schema,
        'connected': connected_schema,
        'is_mgmt': is_mgmt_schema,
        'network_uuid': network_uuid_schema,
        'network_name': network_name_schema,
        'dhcp_enabled': dhcp_enabled_schema,
        'is_avi_internal_network': is_avi_internal_network_schema,
        'enabled': enabled_schema,
        'adapter': adapter_schema,
        'vlan_id': vlan_id_schema,
        'pci_id': pci_id_schema,
        'linux_name': linux_name_schema,
        'port_uuid': port_uuid_schema,
        'del_pending': del_pending_schema,
        'mtu': mtu_schema,
        'vnic_networks': vnic_networks_schema,
        'can_se_dp_takeover': can_se_dp_takeover_schema,
        'vrf_uuid': vrf_uuid_schema,
        'vrf_id': vrf_id_schema,
        'vlan_interfaces': vlan_interfaces_schema,
    }


class ServiceEngine(AviResource):
    resource_name = "serviceengine"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    mgmt_vnic_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vNIC.properties_schema,
        required=False,
    )
    resources_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=SeResources.properties_schema,
        required=False,
    )
    data_vnics_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vNIC.properties_schema,
        required=True,
    )
    data_vnics_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=data_vnics_item_schema,
        required=False,
    )
    controller_ip_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    host_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    default_gws_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DefaultGateway.properties_schema,
        required=True,
    )
    default_gws_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=default_gws_item_schema,
        required=False,
    )
    controller_created_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    se_group_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    container_mode_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
    )
    flavor_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    hypervisor_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )
    availability_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
    )

    # properties list
    PROPERTIES = (
        'name',
        'cloud_uuid',
        'mgmt_vnic',
        'resources',
        'data_vnics',
        'controller_ip',
        'host_uuid',
        'default_gws',
        'controller_created',
        'se_group_uuid',
        'container_mode',
        'flavor',
        'hypervisor',
        'availability_zone',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'cloud_uuid': cloud_uuid_schema,
        'mgmt_vnic': mgmt_vnic_schema,
        'resources': resources_schema,
        'data_vnics': data_vnics_schema,
        'controller_ip': controller_ip_schema,
        'host_uuid': host_uuid_schema,
        'default_gws': default_gws_schema,
        'controller_created': controller_created_schema,
        'se_group_uuid': se_group_uuid_schema,
        'container_mode': container_mode_schema,
        'flavor': flavor_schema,
        'hypervisor': hypervisor_schema,
        'availability_zone': availability_zone_schema,
    }


def resource_mapping():
    return {
        'Avi::ServiceEngine': ServiceEngine,
    }

