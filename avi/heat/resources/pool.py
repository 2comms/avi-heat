# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from common import *
from options import *
from rate import *
from match import *


class FailActionHTTPLocalResponse(object):
    # all schemas
    status_code_schema = properties.Schema(
        properties.Schema.STRING,
        _(" (Default: FAIL_HTTP_STATUS_CODE_503)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['FAIL_HTTP_STATUS_CODE_200', 'FAIL_HTTP_STATUS_CODE_503']),
        ],
    )
    file_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=HTTPLocalFile.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'status_code',
        'file',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'status_code': status_code_schema,
        'file': file_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'file': getattr(HTTPLocalFile, 'field_references', {}),
    }

    unique_keys = {
        'file': getattr(HTTPLocalFile, 'unique_keys', {}),
    }



class PriorityLabels(AviResource):
    resource_name = "prioritylabels"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("The name of the priority labels."),
        required=True,
        update_allowed=True,
    )
    equivalent_labels_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Equivalent priority labels in descending order."),
        schema=EquivalentLabels.properties_schema,
        required=True,
        update_allowed=False,
    )
    equivalent_labels_schema = properties.Schema(
        properties.Schema.LIST,
        _("Equivalent priority labels in descending order."),
        schema=equivalent_labels_item_schema,
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _("A description of the priority labels."),
        required=False,
        update_allowed=True,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'equivalent_labels',
        'description',
        'cloud_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'equivalent_labels': equivalent_labels_schema,
        'description': description_schema,
        'cloud_uuid': cloud_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'equivalent_labels': getattr(EquivalentLabels, 'field_references', {}),
    }

    unique_keys = {
        'equivalent_labels': getattr(EquivalentLabels, 'unique_keys', {}),
    }



class PoolGroupMember(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the pool You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=True,
    )
    ratio_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Ratio of selecting eligible pools in the pool group.  (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    priority_label_schema = properties.Schema(
        properties.Schema.STRING,
        _("All pools with same label are treated similarly in a pool group. A pool with a higher priority is selected, as long as the pool is eligible or an explicit policy chooses a different pool."),
        required=False,
        update_allowed=True,
    )
    deployment_state_schema = properties.Schema(
        properties.Schema.STRING,
        _("Pool deployment state used with the PG deployment policy"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['EVALUATION_FAILED', 'EVALUATION_IN_PROGRESS', 'IN_SERVICE', 'OUT_OF_SERVICE']),
        ],
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'ratio',
        'priority_label',
        'deployment_state',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'ratio': ratio_schema,
        'priority_label': priority_label_schema,
        'deployment_state': deployment_state_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'pool_uuid': 'pool',
    }



class AbPool(object):
    # all schemas
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Pool configured as B pool for A/B testing You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=True,
    )
    ratio_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Ratio of traffic diverted to the B pool, for A/B testing (Default: 0)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'pool_uuid',
        'ratio',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pool_uuid': pool_uuid_schema,
        'ratio': ratio_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'pool_uuid': 'pool',
    }



class FailActionBackupPool(object):
    # all schemas
    backup_pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Specifies the UUID of the Pool acting as backup pool. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'backup_pool_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'backup_pool_uuid': backup_pool_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'backup_pool_uuid': 'pool',
    }



class FailActionHTTPRedirect(object):
    # all schemas
    protocol_schema = properties.Schema(
        properties.Schema.STRING,
        _(" (Default: HTTPS)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['HTTP', 'HTTPS']),
        ],
    )
    host_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    path_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    query_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    status_code_schema = properties.Schema(
        properties.Schema.STRING,
        _(" (Default: HTTP_REDIRECT_STATUS_CODE_302)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['HTTP_REDIRECT_STATUS_CODE_301', 'HTTP_REDIRECT_STATUS_CODE_302', 'HTTP_REDIRECT_STATUS_CODE_307']),
        ],
    )

    # properties list
    PROPERTIES = (
        'protocol',
        'host',
        'path',
        'query',
        'status_code',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'protocol': protocol_schema,
        'host': host_schema,
        'path': path_schema,
        'query': query_schema,
        'status_code': status_code_schema,
    }



class PGDeploymentRule(object):
    # all schemas
    metric_id_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    operator_schema = properties.Schema(
        properties.Schema.STRING,
        _(" (Default: CO_GE)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['CO_EQ', 'CO_GE', 'CO_GT', 'CO_LE', 'CO_LT', 'CO_NE']),
        ],
    )
    threshold_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("metric threshold that is used as the pass fail. If it is not provided then it will simply compare it with current pool vs new pool"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'metric_id',
        'operator',
        'threshold',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'metric_id': metric_id_schema,
        'operator': operator_schema,
        'threshold': threshold_schema,
    }



class PlacementNetwork(object):
    # all schemas
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(" You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'network_uuid',
        'subnet',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'network_uuid': network_uuid_schema,
        'subnet': subnet_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'network_uuid': 'network',
    }

    unique_keys = {
        'subnet': getattr(IpAddrPrefix, 'unique_keys', {}),
    }



class FailAction(object):
    # all schemas
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _("Enables a response to client when pool experiences a failure. By default TCP connection is closed. (Default: FAIL_ACTION_CLOSE_CONN)"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['FAIL_ACTION_BACKUP_POOL', 'FAIL_ACTION_CLOSE_CONN', 'FAIL_ACTION_HTTP_LOCAL_RSP', 'FAIL_ACTION_HTTP_REDIRECT']),
        ],
    )
    redirect_schema = properties.Schema(
        properties.Schema.MAP,
        _("URL to redirect HTTP requests to when pool experiences a failure"),
        schema=FailActionHTTPRedirect.properties_schema,
        required=False,
        update_allowed=True,
    )
    local_rsp_schema = properties.Schema(
        properties.Schema.MAP,
        _("Local response to HTTP requests when pool experiences a failure"),
        schema=FailActionHTTPLocalResponse.properties_schema,
        required=False,
        update_allowed=True,
    )
    backup_pool_schema = properties.Schema(
        properties.Schema.MAP,
        _("Backup Pool when pool experiences a failure"),
        schema=FailActionBackupPool.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'type',
        'redirect',
        'local_rsp',
        'backup_pool',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'type': type_schema,
        'redirect': redirect_schema,
        'local_rsp': local_rsp_schema,
        'backup_pool': backup_pool_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'redirect': getattr(FailActionHTTPRedirect, 'field_references', {}),
        'backup_pool': getattr(FailActionBackupPool, 'field_references', {}),
        'local_rsp': getattr(FailActionHTTPLocalResponse, 'field_references', {}),
    }

    unique_keys = {
        'redirect': getattr(FailActionHTTPRedirect, 'unique_keys', {}),
        'backup_pool': getattr(FailActionBackupPool, 'unique_keys', {}),
        'local_rsp': getattr(FailActionHTTPLocalResponse, 'unique_keys', {}),
    }



class PoolGroupDeploymentPolicy(AviResource):
    resource_name = "poolgroupdeploymentpolicy"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("The name of the pool group deployment policy"),
        required=True,
        update_allowed=True,
    )
    scheme_schema = properties.Schema(
        properties.Schema.STRING,
        _("deployment scheme (Default: BLUE_GREEN)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['BLUE_GREEN', 'CANARY']),
        ],
    )
    test_traffic_ratio_rampup_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Ratio of the traffic that is sent to the pool under test. test ratio of 100 means blue green (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    rules_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=PGDeploymentRule.properties_schema,
        required=True,
        update_allowed=False,
    )
    rules_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=rules_item_schema,
        required=False,
        update_allowed=True,
    )
    webhook_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) Webhook configured with URL that Avi controller will pass back information about pool group, old and new pool information and current deployment rule results"),
        required=False,
        update_allowed=True,
    )
    evaluation_duration_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Duration of evaluation period for automatic deployment (Units: SEC) (Default: 300)"),
        required=False,
        update_allowed=True,
    )
    target_test_traffic_ratio_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Target traffic ratio before pool is made production (Units: RATIO) (Default: 100)"),
        required=False,
        update_allowed=True,
    )
    auto_disable_old_prod_pools_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("It will automatically disable old production pools once there is a new production candidate (Default: True)"),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'scheme',
        'test_traffic_ratio_rampup',
        'rules',
        'webhook_uuid',
        'evaluation_duration',
        'target_test_traffic_ratio',
        'auto_disable_old_prod_pools',
        'description',
        'cloud_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'scheme': scheme_schema,
        'test_traffic_ratio_rampup': test_traffic_ratio_rampup_schema,
        'rules': rules_schema,
        'webhook_uuid': webhook_uuid_schema,
        'evaluation_duration': evaluation_duration_schema,
        'target_test_traffic_ratio': target_test_traffic_ratio_schema,
        'auto_disable_old_prod_pools': auto_disable_old_prod_pools_schema,
        'description': description_schema,
        'cloud_uuid': cloud_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'rules': getattr(PGDeploymentRule, 'field_references', {}),
    }

    unique_keys = {
        'rules': getattr(PGDeploymentRule, 'unique_keys', {}),
    }



class NetworkFilter(object):
    # all schemas
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(" You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=True,
    )
    server_filter_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'network_uuid',
        'server_filter',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'network_uuid': network_uuid_schema,
        'server_filter': server_filter_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'network_uuid': 'vimgrnwruntime',
    }



class HTTPReselectRespCode(object):
    # all schemas
    codes_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("HTTP response code to be matched."),
        required=True,
        update_allowed=False,
    )
    codes_schema = properties.Schema(
        properties.Schema.LIST,
        _("HTTP response code to be matched."),
        schema=codes_item_schema,
        required=False,
        update_allowed=True,
    )
    ranges_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("HTTP response code ranges to match."),
        schema=HTTPStatusRange.properties_schema,
        required=True,
        update_allowed=False,
    )
    ranges_schema = properties.Schema(
        properties.Schema.LIST,
        _("HTTP response code ranges to match."),
        schema=ranges_item_schema,
        required=False,
        update_allowed=True,
    )
    resp_code_block_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("Block of HTTP response codes to match for server reselect."),
        required=True,
        update_allowed=False,
        constraints=[
            constraints.AllowedValues(['HTTP_RSP_4XX', 'HTTP_RSP_5XX']),
        ],
    )
    resp_code_block_schema = properties.Schema(
        properties.Schema.LIST,
        _("Block of HTTP response codes to match for server reselect."),
        schema=resp_code_block_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'codes',
        'ranges',
        'resp_code_block',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'codes': codes_schema,
        'ranges': ranges_schema,
        'resp_code_block': resp_code_block_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ranges': getattr(HTTPStatusRange, 'field_references', {}),
    }

    unique_keys = {
        'ranges': getattr(HTTPStatusRange, 'unique_keys', {}),
    }



class DiscoveredNetwork(object):
    # all schemas
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Discovered network for this IP. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=True,
    )
    subnet_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Discovered subnet for this IP."),
        schema=IpAddrPrefix.properties_schema,
        required=True,
        update_allowed=False,
    )
    subnet_schema = properties.Schema(
        properties.Schema.LIST,
        _("Discovered subnet for this IP."),
        schema=subnet_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'network_uuid',
        'subnet',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'network_uuid': network_uuid_schema,
        'subnet': subnet_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'network_uuid': 'network',
    }

    unique_keys = {
        'subnet': getattr(IpAddrPrefix, 'unique_keys', {}),
    }



class PoolGroup(AviResource):
    resource_name = "poolgroup"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("The name of the pool group."),
        required=True,
        update_allowed=True,
    )
    members_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("List of pool group members object of type PoolGroupMember."),
        schema=PoolGroupMember.properties_schema,
        required=True,
        update_allowed=False,
    )
    members_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of pool group members object of type PoolGroupMember."),
        schema=members_item_schema,
        required=False,
        update_allowed=True,
    )
    priority_labels_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the priority labels. If not provided, pool group member priority label will be interpreted as a number with a larger number considered higher priority. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    min_servers_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The minimum number of servers to distribute traffic to. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    deployment_policy_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("When setup autoscale manager will automatically promote new pools into production when deployment goals are met."),
        required=False,
        update_allowed=True,
    )
    fail_action_schema = properties.Schema(
        properties.Schema.MAP,
        _("Enable an action - Close Connection, HTTP Redirect, or Local HTTP Response - when a pool group failure happens. By default, a connection will be closed, in case the pool group experiences a failure."),
        schema=FailAction.properties_schema,
        required=False,
        update_allowed=True,
    )
    created_by_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of the user who created the object."),
        required=False,
        update_allowed=True,
    )
    cloud_config_cksum_schema = properties.Schema(
        properties.Schema.STRING,
        _("Checksum of cloud configuration for PoolGroup. Internally set by cloud connector"),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _("Description of Pool Group."),
        required=False,
        update_allowed=True,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'members',
        'priority_labels_uuid',
        'min_servers',
        'deployment_policy_uuid',
        'fail_action',
        'created_by',
        'cloud_config_cksum',
        'description',
        'cloud_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'members': members_schema,
        'priority_labels_uuid': priority_labels_uuid_schema,
        'min_servers': min_servers_schema,
        'deployment_policy_uuid': deployment_policy_uuid_schema,
        'fail_action': fail_action_schema,
        'created_by': created_by_schema,
        'cloud_config_cksum': cloud_config_cksum_schema,
        'description': description_schema,
        'cloud_uuid': cloud_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'priority_labels_uuid': 'prioritylabels',
        'fail_action': getattr(FailAction, 'field_references', {}),
        'members': getattr(PoolGroupMember, 'field_references', {}),
    }

    unique_keys = {
        'fail_action': getattr(FailAction, 'unique_keys', {}),
        'members': getattr(PoolGroupMember, 'unique_keys', {}),
    }



class HTTPServerReselect(object):
    # all schemas
    enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable HTTP request reselect when server responds with specific response codes. (Default: False)"),
        required=True,
        update_allowed=True,
    )
    svr_resp_code_schema = properties.Schema(
        properties.Schema.MAP,
        _("Server response codes which will trigger an HTTP request retry."),
        schema=HTTPReselectRespCode.properties_schema,
        required=False,
        update_allowed=True,
    )
    num_retries_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of times to retry an HTTP request when server responds with configured status codes. (Default: 4)"),
        required=False,
        update_allowed=True,
    )
    retry_nonidempotent_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Allow retry of non-idempotent HTTP requests. (Default: False)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'enabled',
        'svr_resp_code',
        'num_retries',
        'retry_nonidempotent',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'enabled': enabled_schema,
        'svr_resp_code': svr_resp_code_schema,
        'num_retries': num_retries_schema,
        'retry_nonidempotent': retry_nonidempotent_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'svr_resp_code': getattr(HTTPReselectRespCode, 'field_references', {}),
    }

    unique_keys = {
        'svr_resp_code': getattr(HTTPReselectRespCode, 'unique_keys', {}),
    }



class Server(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP Address of the server.  Required if there is no resolvable host name."),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Optionally specify the servers port number.  This will override the pool's default server port attribute."),
        required=False,
        update_allowed=True,
    )
    hostname_schema = properties.Schema(
        properties.Schema.STRING,
        _("DNS resolvable name of the server.  May be used in place of the IP address."),
        required=False,
        update_allowed=True,
    )
    enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable, Disable or Graceful Disable determine if new or existing connections to the server are allowed. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    ratio_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Ratio of selecting eligible servers in the pool (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    vm_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(internal-use) This field is used internally by Avi, not editable by the user. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    nw_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(internal-use) This field is used internally by Avi, not editable by the user. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    discovered_network_uuid_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Deprecated in: 17.1.1) (internal-use) Discovered network for this server. This field is deprecated."),
        required=True,
        update_allowed=False,
    )
    discovered_network_uuid_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Deprecated in: 17.1.1) (internal-use) Discovered network for this server. This field is deprecated. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        schema=discovered_network_uuid_item_schema,
        required=False,
        update_allowed=True,
    )
    external_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID identifying VM in OpenStack and other external compute"),
        required=False,
        update_allowed=True,
    )
    discovered_subnet_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Deprecated in: 17.1.1) (internal-use) Discovered subnet for this server. This field is deprecated."),
        schema=IpAddrPrefix.properties_schema,
        required=True,
        update_allowed=False,
    )
    discovered_subnet_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Deprecated in: 17.1.1) (internal-use) Discovered subnet for this server. This field is deprecated."),
        schema=discovered_subnet_item_schema,
        required=False,
        update_allowed=True,
    )
    verify_network_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Verify server belongs to a discovered network or reachable via a discovered network. Verify reachable network isn't the OpenStack management network (Default: False)"),
        required=False,
        update_allowed=True,
    )
    discovered_networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(internal-use) Discovered networks providing reachability for server IP. This field is used internally by Avi, not editable by the user."),
        schema=DiscoveredNetwork.properties_schema,
        required=True,
        update_allowed=False,
    )
    discovered_networks_schema = properties.Schema(
        properties.Schema.LIST,
        _("(internal-use) Discovered networks providing reachability for server IP. This field is used internally by Avi, not editable by the user."),
        schema=discovered_networks_item_schema,
        required=False,
        update_allowed=True,
    )
    resolve_server_by_dns_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Auto resolve server's IP using DNS name (Default: False)"),
        required=False,
        update_allowed=True,
    )
    prst_hdr_val_schema = properties.Schema(
        properties.Schema.STRING,
        _("Header value for custom header persistence."),
        required=False,
        update_allowed=True,
    )
    mac_address_schema = properties.Schema(
        properties.Schema.STRING,
        _("MAC address of server."),
        required=False,
        update_allowed=True,
    )
    static_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If statically learned. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    server_node_schema = properties.Schema(
        properties.Schema.STRING,
        _("Hostname of the node where the server VM or container resides"),
        required=False,
        update_allowed=True,
    )
    availability_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _("Availability-zone of the server VM."),
        required=False,
        update_allowed=True,
    )
    rewrite_host_header_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Rewrite incoming Host Header to server name. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    external_orchestration_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("UID of server in external orchestration systems"),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _("A description of the Server."),
        required=False,
        update_allowed=True,
    )
    location_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.1.1) (internal-use) Geographic location of the server.Currently only for internal usage."),
        schema=GeoLocation.properties_schema,
        required=False,
        update_allowed=False,
    )
    autoscaling_group_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.2) Name of autoscaling group this server belongs to."),
        required=False,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'port',
        'hostname',
        'enabled',
        'ratio',
        'vm_uuid',
        'nw_uuid',
        'discovered_network_uuid',
        'external_uuid',
        'discovered_subnet',
        'verify_network',
        'discovered_networks',
        'resolve_server_by_dns',
        'prst_hdr_val',
        'mac_address',
        'static',
        'server_node',
        'availability_zone',
        'rewrite_host_header',
        'external_orchestration_id',
        'description',
        'location',
        'autoscaling_group_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'port': port_schema,
        'hostname': hostname_schema,
        'enabled': enabled_schema,
        'ratio': ratio_schema,
        'vm_uuid': vm_uuid_schema,
        'nw_uuid': nw_uuid_schema,
        'discovered_network_uuid': discovered_network_uuid_schema,
        'external_uuid': external_uuid_schema,
        'discovered_subnet': discovered_subnet_schema,
        'verify_network': verify_network_schema,
        'discovered_networks': discovered_networks_schema,
        'resolve_server_by_dns': resolve_server_by_dns_schema,
        'prst_hdr_val': prst_hdr_val_schema,
        'mac_address': mac_address_schema,
        'static': static_schema,
        'server_node': server_node_schema,
        'availability_zone': availability_zone_schema,
        'rewrite_host_header': rewrite_host_header_schema,
        'external_orchestration_id': external_orchestration_id_schema,
        'description': description_schema,
        'location': location_schema,
        'autoscaling_group_name': autoscaling_group_name_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ip': getattr(IpAddr, 'field_references', {}),
        'discovered_networks': getattr(DiscoveredNetwork, 'field_references', {}),
        'discovered_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'vm_uuid': 'vimgrvmruntime',
        'location': getattr(GeoLocation, 'field_references', {}),
        'discovered_network_uuid': 'network',
        'nw_uuid': 'vimgrnwruntime',
    }

    unique_keys = {
        'ip': getattr(IpAddr, 'unique_keys', {}),
        'discovered_networks': getattr(DiscoveredNetwork, 'unique_keys', {}),
        'my_key': 'ip,port',
        'location': getattr(GeoLocation, 'unique_keys', {}),
        'discovered_subnet': getattr(IpAddrPrefix, 'unique_keys', {}),
    }



class Pool(AviResource):
    resource_name = "pool"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("The name of the pool."),
        required=True,
        update_allowed=True,
    )
    default_server_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Traffic sent to servers will use this destination server port unless overridden by the server's specific port attribute. The SSL checkbox enables Avi to server encryption. (Default: 80)"),
        required=False,
        update_allowed=True,
    )
    graceful_disable_timeout_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Used to gracefully disable a server. Virtual service waits for the specified time before terminating the existing connections  to the servers that are disabled. (Units: MIN) (Default: 1)"),
        required=False,
        update_allowed=True,
    )
    connection_ramp_duration_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Duration for which new connections will be gradually ramped up to a server recently brought online.  Useful for LB algorithms that are least connection based. (Units: MIN) (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    max_concurrent_connections_per_server_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The maximum number of concurrent connections allowed to each server within the pool. NOTE: applied value will be no less than the number of service engines that the pool is placed on. If set to 0, no limit is applied. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    health_monitor_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("Verify server health by applying one or more health monitors.  Active monitors generate synthetic traffic from each Service Engine and mark a server up or down based on the response. The Passive monitor listens only to client to server communication. It raises or lowers the ratio of traffic destined to a server based on successful responses."),
        required=True,
        update_allowed=False,
    )
    health_monitor_uuids_schema = properties.Schema(
        properties.Schema.LIST,
        _("Verify server health by applying one or more health monitors.  Active monitors generate synthetic traffic from each Service Engine and mark a server up or down based on the response. The Passive monitor listens only to client to server communication. It raises or lowers the ratio of traffic destined to a server based on successful responses. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        schema=health_monitor_uuids_item_schema,
        required=False,
        update_allowed=True,
    )
    servers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("The pool directs load balanced traffic to this list of destination servers. The servers can be configured by IP address, name, network or via IP Address Group"),
        schema=Server.properties_schema,
        required=True,
        update_allowed=False,
    )
    servers_schema = properties.Schema(
        properties.Schema.LIST,
        _("The pool directs load balanced traffic to this list of destination servers. The servers can be configured by IP address, name, network or via IP Address Group"),
        schema=servers_item_schema,
        required=False,
        update_allowed=True,
    )
    server_count_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    lb_algorithm_schema = properties.Schema(
        properties.Schema.STRING,
        _("The load balancing algorithm will pick a server within the pool's list of available servers. (Default: LB_ALGORITHM_LEAST_CONNECTIONS)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['LB_ALGORITHM_CONSISTENT_HASH', 'LB_ALGORITHM_CORE_AFFINITY', 'LB_ALGORITHM_FASTEST_RESPONSE', 'LB_ALGORITHM_FEWEST_SERVERS', 'LB_ALGORITHM_FEWEST_TASKS', 'LB_ALGORITHM_LEAST_CONNECTIONS', 'LB_ALGORITHM_LEAST_LOAD', 'LB_ALGORITHM_NEAREST_SERVER', 'LB_ALGORITHM_RANDOM', 'LB_ALGORITHM_ROUND_ROBIN']),
        ],
    )
    lb_algorithm_hash_schema = properties.Schema(
        properties.Schema.STRING,
        _("Criteria used as a key for determining the hash between the client and  server. (Default: LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['LB_ALGORITHM_CONSISTENT_HASH_CUSTOM_HEADER', 'LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS', 'LB_ALGORITHM_CONSISTENT_HASH_SOURCE_IP_ADDRESS_AND_PORT', 'LB_ALGORITHM_CONSISTENT_HASH_URI']),
        ],
    )
    lb_algorithm_consistent_hash_hdr_schema = properties.Schema(
        properties.Schema.STRING,
        _("HTTP header name to be used for the hash key."),
        required=False,
        update_allowed=True,
    )
    networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(internal-use) Networks designated as containing servers for this pool.  The servers may be further narrowed down by a filter. This field is used internally by Avi, not editable by the user."),
        schema=NetworkFilter.properties_schema,
        required=True,
        update_allowed=False,
    )
    networks_schema = properties.Schema(
        properties.Schema.LIST,
        _("(internal-use) Networks designated as containing servers for this pool.  The servers may be further narrowed down by a filter. This field is used internally by Avi, not editable by the user."),
        schema=networks_item_schema,
        required=False,
        update_allowed=True,
    )
    placement_networks_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Manually select the networks and subnets used to provide reachability to the pool's servers.  Specify the Subnet using the following syntax: 10-1-1-0/24. Use static routes in VRF configuration when pool servers are not directly connected butroutable from the service engine."),
        schema=PlacementNetwork.properties_schema,
        required=True,
        update_allowed=False,
    )
    placement_networks_schema = properties.Schema(
        properties.Schema.LIST,
        _("Manually select the networks and subnets used to provide reachability to the pool's servers.  Specify the Subnet using the following syntax: 10-1-1-0/24. Use static routes in VRF configuration when pool servers are not directly connected butroutable from the service engine."),
        schema=placement_networks_item_schema,
        required=False,
        update_allowed=True,
    )
    application_persistence_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Persistence will ensure the same user sticks to the same server for a desired duration of time. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    ssl_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("When enabled, Avi re-encrypts traffic to the backend servers. The specific SSL profile defines which ciphers and SSL versions will be supported. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    inline_health_monitor_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("The Passive monitor will monitor client to server connections and requests and adjust traffic load to servers based on successful responses.  This may alter the expected behavior of the LB method, such as Round Robin. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    use_service_port_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Do not translate the client's destination port when sending the connection to the server.  The pool or servers specified service port will still be used for health monitoring. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    fail_action_schema = properties.Schema(
        properties.Schema.MAP,
        _("Enable an action - Close Connection, HTTP Redirect or Local HTTP Response - when a pool failure happens. By default, a connection will be closed, in case the pool experiences a failure."),
        schema=FailAction.properties_schema,
        required=False,
        update_allowed=True,
    )
    capacity_estimation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Inline estimation of capacity of servers. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    capacity_estimation_ttfb_thresh_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The maximum time-to-first-byte of a server. (Units: MILLISECONDS) (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    pki_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi will validate the SSL certificate present by a server against the selected PKI Profile. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    ssl_key_and_certificate_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Service Engines will present a client SSL certificate to the server. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    server_auto_scale_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Server AutoScale. Not used anymore. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    prst_hdr_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Header name for custom header persistence"),
        required=False,
        update_allowed=True,
    )
    apic_epg_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Synchronize Cisco APIC EPG members with pool servers"),
        required=False,
        update_allowed=True,
    )
    autoscale_networks_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("Network Ids for the launch configuration"),
        required=True,
        update_allowed=False,
    )
    autoscale_networks_schema = properties.Schema(
        properties.Schema.LIST,
        _("Network Ids for the launch configuration"),
        schema=autoscale_networks_item_schema,
        required=False,
        update_allowed=True,
    )
    autoscale_policy_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Reference to Server Autoscale Policy You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    autoscale_launch_config_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("If configured then Avi will trigger orchestration of pool server creation and deletion. It is only supported for container clouds like Mesos, Opensift, Kubernates, Docker etc. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    vrf_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Virtual Routing Context that the pool is bound to. This is used to provide the isolation of the set of networks the pool is attached to. The pool inherits the Virtual Routing Conext of the Virtual Service, and this field is used only internally, and is set by pb-transform. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=False,
    )
    ipaddrgroup_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use list of servers from Ip Address Group You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    fewest_tasks_feedback_delay_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Periodicity of feedback for fewest tasks server selection algorithm. (Units: SEC) (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable or disable the pool.  Disabling will terminate all open connections and pause health monitors. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    max_conn_rate_per_server_schema = properties.Schema(
        properties.Schema.MAP,
        _("Rate Limit connections to each server."),
        schema=RateProfile.properties_schema,
        required=False,
        update_allowed=True,
    )
    east_west_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Inherited config from VirtualService."),
        required=False,
        update_allowed=True,
    )
    created_by_schema = properties.Schema(
        properties.Schema.STRING,
        _("Creator name"),
        required=False,
        update_allowed=True,
    )
    cloud_config_cksum_schema = properties.Schema(
        properties.Schema.STRING,
        _("Checksum of cloud configuration for Pool. Internally set by cloud connector"),
        required=False,
        update_allowed=True,
    )
    request_queue_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable request queue when pool is full (Default: False)"),
        required=False,
        update_allowed=True,
    )
    request_queue_depth_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Minimum number of requests to be queued when pool is full. (Default: 128)"),
        required=False,
        update_allowed=True,
    )
    ab_pool_schema = properties.Schema(
        properties.Schema.MAP,
        _("A/B pool configuration."),
        schema=AbPool.properties_schema,
        required=False,
        update_allowed=True,
    )
    server_reselect_schema = properties.Schema(
        properties.Schema.MAP,
        _("Server reselect configuration for HTTP requests."),
        schema=HTTPServerReselect.properties_schema,
        required=False,
        update_allowed=True,
    )
    a_pool_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of container cloud application that constitutes A pool in a A-B pool configuration, if different from VS app"),
        required=False,
        update_allowed=True,
    )
    ab_priority_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Priority of this pool in a A-B pool pair. Internally used"),
        required=False,
        update_allowed=True,
    )
    host_check_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable common name check for server certificate. If enabled and no explicit domain name is specified, Avi will use the incoming host header to do the match. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    domain_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates. It is performed only when common name check host_check_enabled is enabled."),
        required=True,
        update_allowed=False,
    )
    domain_name_schema = properties.Schema(
        properties.Schema.LIST,
        _("Comma separated list of domain names which will be used to verify the common names or subject alternative names presented by server certificates. It is performed only when common name check host_check_enabled is enabled."),
        schema=domain_name_item_schema,
        required=False,
        update_allowed=True,
    )
    sni_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable TLS SNI for server connections. If disabled, Avi will not send the SNI extension as part of the handshake. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    server_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Fully qualified DNS hostname which will be used in the TLS SNI extension in server connections if SNI is enabled. If no value is specified, Avi will use the incoming host header instead."),
        required=False,
        update_allowed=True,
    )
    rewrite_host_header_to_sni_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If SNI server name is specified, rewrite incoming host header to the SNI server name. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    rewrite_host_header_to_server_name_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Rewrite incoming Host Header to server name of the server to which the request is proxied.  Enabling this feature rewrites Host Header for requests to all servers in the pool. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    nsx_securitygroup_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) A list of NSX Service Groups where the Servers for the Pool are created "),
        required=True,
        update_allowed=False,
    )
    nsx_securitygroup_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.1.1) A list of NSX Service Groups where the Servers for the Pool are created "),
        schema=nsx_securitygroup_item_schema,
        required=False,
        update_allowed=True,
    )
    external_autoscale_groups_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.2) Names of external auto-scale groups for pool servers. Currently available only for AWS"),
        required=True,
        update_allowed=False,
    )
    external_autoscale_groups_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.1.2) Names of external auto-scale groups for pool servers. Currently available only for AWS"),
        schema=external_autoscale_groups_item_schema,
        required=False,
        update_allowed=True,
    )
    lb_algorithm_core_nonaffinity_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.3) Degree of non-affinity for core afffinity based server selection. (Default: 2)"),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _("A description of the pool."),
        required=False,
        update_allowed=True,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'default_server_port',
        'graceful_disable_timeout',
        'connection_ramp_duration',
        'max_concurrent_connections_per_server',
        'health_monitor_uuids',
        'servers',
        'server_count',
        'lb_algorithm',
        'lb_algorithm_hash',
        'lb_algorithm_consistent_hash_hdr',
        'networks',
        'placement_networks',
        'application_persistence_profile_uuid',
        'ssl_profile_uuid',
        'inline_health_monitor',
        'use_service_port',
        'fail_action',
        'capacity_estimation',
        'capacity_estimation_ttfb_thresh',
        'pki_profile_uuid',
        'ssl_key_and_certificate_uuid',
        'server_auto_scale',
        'prst_hdr_name',
        'apic_epg_name',
        'autoscale_networks',
        'autoscale_policy_uuid',
        'autoscale_launch_config_uuid',
        'vrf_uuid',
        'ipaddrgroup_uuid',
        'fewest_tasks_feedback_delay',
        'enabled',
        'max_conn_rate_per_server',
        'east_west',
        'created_by',
        'cloud_config_cksum',
        'request_queue_enabled',
        'request_queue_depth',
        'ab_pool',
        'server_reselect',
        'a_pool',
        'ab_priority',
        'host_check_enabled',
        'domain_name',
        'sni_enabled',
        'server_name',
        'rewrite_host_header_to_sni',
        'rewrite_host_header_to_server_name',
        'nsx_securitygroup',
        'external_autoscale_groups',
        'lb_algorithm_core_nonaffinity',
        'description',
        'cloud_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'default_server_port': default_server_port_schema,
        'graceful_disable_timeout': graceful_disable_timeout_schema,
        'connection_ramp_duration': connection_ramp_duration_schema,
        'max_concurrent_connections_per_server': max_concurrent_connections_per_server_schema,
        'health_monitor_uuids': health_monitor_uuids_schema,
        'servers': servers_schema,
        'server_count': server_count_schema,
        'lb_algorithm': lb_algorithm_schema,
        'lb_algorithm_hash': lb_algorithm_hash_schema,
        'lb_algorithm_consistent_hash_hdr': lb_algorithm_consistent_hash_hdr_schema,
        'networks': networks_schema,
        'placement_networks': placement_networks_schema,
        'application_persistence_profile_uuid': application_persistence_profile_uuid_schema,
        'ssl_profile_uuid': ssl_profile_uuid_schema,
        'inline_health_monitor': inline_health_monitor_schema,
        'use_service_port': use_service_port_schema,
        'fail_action': fail_action_schema,
        'capacity_estimation': capacity_estimation_schema,
        'capacity_estimation_ttfb_thresh': capacity_estimation_ttfb_thresh_schema,
        'pki_profile_uuid': pki_profile_uuid_schema,
        'ssl_key_and_certificate_uuid': ssl_key_and_certificate_uuid_schema,
        'server_auto_scale': server_auto_scale_schema,
        'prst_hdr_name': prst_hdr_name_schema,
        'apic_epg_name': apic_epg_name_schema,
        'autoscale_networks': autoscale_networks_schema,
        'autoscale_policy_uuid': autoscale_policy_uuid_schema,
        'autoscale_launch_config_uuid': autoscale_launch_config_uuid_schema,
        'vrf_uuid': vrf_uuid_schema,
        'ipaddrgroup_uuid': ipaddrgroup_uuid_schema,
        'fewest_tasks_feedback_delay': fewest_tasks_feedback_delay_schema,
        'enabled': enabled_schema,
        'max_conn_rate_per_server': max_conn_rate_per_server_schema,
        'east_west': east_west_schema,
        'created_by': created_by_schema,
        'cloud_config_cksum': cloud_config_cksum_schema,
        'request_queue_enabled': request_queue_enabled_schema,
        'request_queue_depth': request_queue_depth_schema,
        'ab_pool': ab_pool_schema,
        'server_reselect': server_reselect_schema,
        'a_pool': a_pool_schema,
        'ab_priority': ab_priority_schema,
        'host_check_enabled': host_check_enabled_schema,
        'domain_name': domain_name_schema,
        'sni_enabled': sni_enabled_schema,
        'server_name': server_name_schema,
        'rewrite_host_header_to_sni': rewrite_host_header_to_sni_schema,
        'rewrite_host_header_to_server_name': rewrite_host_header_to_server_name_schema,
        'nsx_securitygroup': nsx_securitygroup_schema,
        'external_autoscale_groups': external_autoscale_groups_schema,
        'lb_algorithm_core_nonaffinity': lb_algorithm_core_nonaffinity_schema,
        'description': description_schema,
        'cloud_uuid': cloud_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'pki_profile_uuid': 'pkiprofile',
        'autoscale_policy_uuid': 'serverautoscalepolicy',
        'application_persistence_profile_uuid': 'applicationpersistenceprofile',
        'ipaddrgroup_uuid': 'ipaddrgroup',
        'server_reselect': getattr(HTTPServerReselect, 'field_references', {}),
        'ssl_key_and_certificate_uuid': 'sslkeyandcertificate',
        'max_conn_rate_per_server': getattr(RateProfile, 'field_references', {}),
        'placement_networks': getattr(PlacementNetwork, 'field_references', {}),
        'health_monitor_uuids': 'healthmonitor',
        'ssl_profile_uuid': 'sslprofile',
        'autoscale_launch_config_uuid': 'autoscalelaunchconfig',
        'ab_pool': getattr(AbPool, 'field_references', {}),
        'fail_action': getattr(FailAction, 'field_references', {}),
        'servers': getattr(Server, 'field_references', {}),
        'vrf_uuid': 'vrfcontext',
        'networks': getattr(NetworkFilter, 'field_references', {}),
    }

    unique_keys = {
        'server_reselect': getattr(HTTPServerReselect, 'unique_keys', {}),
        'max_conn_rate_per_server': getattr(RateProfile, 'unique_keys', {}),
        'placement_networks': getattr(PlacementNetwork, 'unique_keys', {}),
        'ab_pool': getattr(AbPool, 'unique_keys', {}),
        'fail_action': getattr(FailAction, 'unique_keys', {}),
        'servers': getattr(Server, 'unique_keys', {}),
        'networks': getattr(NetworkFilter, 'unique_keys', {}),
    }



class PoolServers(AviNestedResource, Server):
    resource_name = "pool"
    nested_property_name = "servers"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of pool."
          " You can also provide a name"
          " with the prefix 'get_avi_uuid_by_name:', e.g.,"
          " 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=False,
    )
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )


    # properties list
    PROPERTIES = Server.PROPERTIES + (
        'pool_uuid','avi_version')

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'pool_uuid': parent_uuid_schema,
    }
    properties_schema.update(Server.properties_schema)

    # field references
    field_references = {
        'pool_uuid': 'pool',
    }
    field_references.update(getattr(Server, 'field_references', {}))


def resource_mapping():
    return {
        'Avi::LBaaS::PriorityLabels': PriorityLabels,
        'Avi::LBaaS::PoolGroup': PoolGroup,
        'Avi::LBaaS::Pool::Server': PoolServers,
        'Avi::LBaaS::PoolGroupDeploymentPolicy': PoolGroupDeploymentPolicy,
        'Avi::LBaaS::Pool': Pool,
    }

