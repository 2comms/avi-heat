# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from common import *
from options import *
from vi_mgr_common import *


class VIMgrVcenterRuntime(AviResource):
    resource_name = "vimgrvcenterruntime"
    # all schemas
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['HTTP_SECURITY_ACTION_SEND_RESPONSE', 'HTTP_SECURITY_ACTION_REDIRECT_TO_HTTPS', 'HTTP_SECURITY_ACTION_RATE_LIMIT', 'HTTP_SECURITY_ACTION_ALLOW', 'HTTP_SECURITY_ACTION_CLOSE_CONN']),
        ],
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    vcenter_url_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    datacenter_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    datacenter_uuids_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=datacenter_uuids_item_schema,
        required=False,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WRITE_ACCESS', 'READ_ACCESS', 'NO_ACCESS']),
        ],
    )
    inventory_state_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['VCENTER_DISCOVERY_COMPLETE_PER_TENANT_IP_ROUTE', 'VCENTER_DISCOVERY_FAILURE', 'VCENTER_DISCOVERY_ONGOING', 'VCENTER_DISCOVERY_WAITING_DC', 'VCENTER_DISCOVERY_RETRIEVING_NW', 'VCENTER_DISCOVERY_RESYNCING', 'VCENTER_DISCOVERY_COMPLETE_NO_MGMT_NW', 'VCENTER_DISCOVERY_RETRIEVING_DC', 'VCENTER_DISCOVERY_BAD_CREDENTIALS', 'VCENTER_DISCOVERY_COMPLETE', 'VCENTER_DISCOVERY_DELETING_VCENTER']),
        ],
    )
    discovered_datacenter_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    discovered_datacenter_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=discovered_datacenter_item_schema,
        required=False,
        update_allowed=True,
    )
    progress_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_dcs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_hosts_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_clusters_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_vms_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_nws_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    num_vcenter_req_pending_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    disc_start_time_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    disc_end_time_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    management_network_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    inventory_progress_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    apic_mode_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    vcenter_template_se_location_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    api_version_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vcenter_fullname_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    vcenter_connected_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    cloud_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'type',
        'name',
        'vcenter_url',
        'username',
        'password',
        'datacenter_uuids',
        'privilege',
        'inventory_state',
        'discovered_datacenter',
        'progress',
        'num_dcs',
        'num_hosts',
        'num_clusters',
        'num_vms',
        'num_nws',
        'num_vcenter_req_pending',
        'disc_start_time',
        'disc_end_time',
        'management_network',
        'inventory_progress',
        'apic_mode',
        'vcenter_template_se_location',
        'api_version',
        'vcenter_fullname',
        'vcenter_connected',
        'cloud_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'type': type_schema,
        'name': name_schema,
        'vcenter_url': vcenter_url_schema,
        'username': username_schema,
        'password': password_schema,
        'datacenter_uuids': datacenter_uuids_schema,
        'privilege': privilege_schema,
        'inventory_state': inventory_state_schema,
        'discovered_datacenter': discovered_datacenter_schema,
        'progress': progress_schema,
        'num_dcs': num_dcs_schema,
        'num_hosts': num_hosts_schema,
        'num_clusters': num_clusters_schema,
        'num_vms': num_vms_schema,
        'num_nws': num_nws_schema,
        'num_vcenter_req_pending': num_vcenter_req_pending_schema,
        'disc_start_time': disc_start_time_schema,
        'disc_end_time': disc_end_time_schema,
        'management_network': management_network_schema,
        'inventory_progress': inventory_progress_schema,
        'apic_mode': apic_mode_schema,
        'vcenter_template_se_location': vcenter_template_se_location_schema,
        'api_version': api_version_schema,
        'vcenter_fullname': vcenter_fullname_schema,
        'vcenter_connected': vcenter_connected_schema,
        'cloud_uuid': cloud_uuid_schema,
    }




class VIMgrVcenterRuntimeDatacenterUuids(AviNestedResource):
    resource_name = "vimgrvcenterruntime"
    nested_property_name = "datacenter_uuids"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of vimgrvcenterruntime"),
        required=True,
        update_allowed=False,
    )
    datacenter_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('vimgrvcenterruntime_uuid',
                  'datacenter_uuids',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'vimgrvcenterruntime_uuid': parent_uuid_schema,
        'datacenter_uuids': datacenter_uuids_item_schema,
    }


class VIMgrVcenterRuntimeDiscoveredDatacenter(AviNestedResource):
    resource_name = "vimgrvcenterruntime"
    nested_property_name = "discovered_datacenter"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of vimgrvcenterruntime"),
        required=True,
        update_allowed=False,
    )
    discovered_datacenter_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = ('vimgrvcenterruntime_uuid',
                  'discovered_datacenter',
                 )

    # mapping of properties to their schemas
    properties_schema = {
        'vimgrvcenterruntime_uuid': parent_uuid_schema,
        'discovered_datacenter': discovered_datacenter_item_schema,
    }


def resource_mapping():
    return {
        'Avi::VIMgrVcenterRuntime': VIMgrVcenterRuntime,
        'Avi::VIMgrVcenterRuntime::DiscoveredDatacenter': VIMgrVcenterRuntimeDiscoveredDatacenter,
        'Avi::VIMgrVcenterRuntime::DatacenterUuid': VIMgrVcenterRuntimeDatacenterUuids,
    }

