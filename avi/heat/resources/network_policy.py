# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from match import *
from options import *


class NetworkSecurityMatchTarget(object):
    # all schemas
    client_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrMatch.properties_schema,
        required=False,
        update_allowed=True,
    )
    vs_port_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=PortMatch.properties_schema,
        required=False,
        update_allowed=True,
    )
    microservice_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MicroServiceMatch.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'client_ip',
        'vs_port',
        'microservice',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'client_ip': client_ip_schema,
        'vs_port': vs_port_schema,
        'microservice': microservice_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'microservice': getattr(MicroServiceMatch, 'field_references', {}),
        'client_ip': getattr(IpAddrMatch, 'field_references', {}),
        'vs_port': getattr(PortMatch, 'field_references', {}),
    }



class NetworkSecurityPolicyActionRLParam(object):
    # all schemas
    max_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    burst_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'max_rate',
        'burst_size',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'max_rate': max_rate_schema,
        'burst_size': burst_size_schema,
    }




class NetworkSecurityRule(object):
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    index_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    enable_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=True,
        update_allowed=True,
    )
    match_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=NetworkSecurityMatchTarget.properties_schema,
        required=True,
        update_allowed=True,
    )
    action_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['NETWORK_SECURITY_POLICY_ACTION_TYPE_ALLOW', 'NETWORK_SECURITY_POLICY_ACTION_TYPE_DENY', 'NETWORK_SECURITY_POLICY_ACTION_TYPE_RATE_LIMIT']),
        ],
    )
    log_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    rl_param_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=NetworkSecurityPolicyActionRLParam.properties_schema,
        required=False,
        update_allowed=True,
    )
    age_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Time in minutes after which rule will be deleted."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'index',
        'enable',
        'match',
        'action',
        'log',
        'rl_param',
        'age',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'index': index_schema,
        'enable': enable_schema,
        'match': match_schema,
        'action': action_schema,
        'log': log_schema,
        'rl_param': rl_param_schema,
        'age': age_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'rl_param': getattr(NetworkSecurityPolicyActionRLParam, 'field_references', {}),
        'match': getattr(NetworkSecurityMatchTarget, 'field_references', {}),
    }



class NetworkSecurityPolicy(AviResource):
    resource_name = "networksecuritypolicy"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    rules_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=NetworkSecurityRule.properties_schema,
        required=True,
        update_allowed=False,
    )
    rules_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=rules_item_schema,
        required=False,
        update_allowed=True,
    )
    created_by_schema = properties.Schema(
        properties.Schema.STRING,
        _("Creator name"),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'rules',
        'created_by',
        'description',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'rules': rules_schema,
        'created_by': created_by_schema,
        'description': description_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'rules': getattr(NetworkSecurityRule, 'field_references', {}),
    }



class NetworkSecurityPolicyRules(AviNestedResource, NetworkSecurityRule):
    resource_name = "networksecuritypolicy"
    nested_property_name = "rules"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of networksecuritypolicy."
          " You can also provide a name"
          " with the prefix 'get_avi_uuid_for_name:', e.g.,"
          " 'get_avi_uuid_for_name:my_obj_name'."),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = NetworkSecurityRule.PROPERTIES + ('networksecuritypolicy_uuid',)

    # mapping of properties to their schemas
    properties_schema = {
        'networksecuritypolicy_uuid': parent_uuid_schema,
    }
    properties_schema.update(NetworkSecurityRule.properties_schema)

    # field references
    field_references = {
        'networksecuritypolicy_uuid': 'networksecuritypolicy',
    }
    field_references.update(getattr(NetworkSecurityRule, 'field_references', {}))


def resource_mapping():
    return {
        'Avi::NetworkSecurityPolicy': NetworkSecurityPolicy,
        'Avi::NetworkSecurityPolicy::Rule': NetworkSecurityPolicyRules,
    }

