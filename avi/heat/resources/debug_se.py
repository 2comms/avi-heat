# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from common import *
from options import *
from debug_controller import *


class DebugSeAgent(object):
    # all schemas
    sub_module_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    trace_level_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    log_level_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'sub_module',
        'trace_level',
        'log_level',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'sub_module': sub_module_schema,
        'trace_level': trace_level_schema,
        'log_level': log_level_schema,
    }




class DebugSeDataplane(object):
    # all schemas
    flag_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'flag',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'flag': flag_schema,
    }




class DebugSeCpuShares(object):
    # all schemas
    cpu_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    shares_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'cpu',
        'shares',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'cpu': cpu_schema,
        'shares': shares_schema,
    }




class DebugServiceEngine(AviResource):
    resource_name = "debugserviceengine"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    seagent_debug_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugSeAgent.properties_schema,
        required=True,
        update_allowed=False,
    )
    seagent_debug_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=seagent_debug_item_schema,
        required=False,
        update_allowed=True,
    )
    flags_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugSeDataplane.properties_schema,
        required=True,
        update_allowed=False,
    )
    flags_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=flags_item_schema,
        required=False,
        update_allowed=True,
    )
    cpu_shares_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugSeCpuShares.properties_schema,
        required=True,
        update_allowed=False,
    )
    cpu_shares_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=cpu_shares_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'seagent_debug',
        'flags',
        'cpu_shares',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'seagent_debug': seagent_debug_schema,
        'flags': flags_schema,
        'cpu_shares': cpu_shares_schema,
    }




class DebugServiceEngineSeagentDebug(AviNestedResource, DebugSeAgent):
    resource_name = "debugserviceengine"
    nested_property_name = "seagent_debug"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of debugserviceengine"),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = DebugSeAgent.PROPERTIES + ('debugserviceengine_uuid',)

    # mapping of properties to their schemas
    properties_schema = {
        'debugserviceengine_uuid': parent_uuid_schema,
    }
    properties_schema.update(DebugSeAgent.properties_schema)


class DebugServiceEngineFlags(AviNestedResource, DebugSeDataplane):
    resource_name = "debugserviceengine"
    nested_property_name = "flags"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of debugserviceengine"),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = DebugSeDataplane.PROPERTIES + ('debugserviceengine_uuid',)

    # mapping of properties to their schemas
    properties_schema = {
        'debugserviceengine_uuid': parent_uuid_schema,
    }
    properties_schema.update(DebugSeDataplane.properties_schema)


class DebugServiceEngineCpuShares(AviNestedResource, DebugSeCpuShares):
    resource_name = "debugserviceengine"
    nested_property_name = "cpu_shares"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of debugserviceengine"),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = DebugSeCpuShares.PROPERTIES + ('debugserviceengine_uuid',)

    # mapping of properties to their schemas
    properties_schema = {
        'debugserviceengine_uuid': parent_uuid_schema,
    }
    properties_schema.update(DebugSeCpuShares.properties_schema)


class DebugIpAddr(object):
    # all schemas
    addrs_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=False,
    )
    addrs_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=addrs_item_schema,
        required=False,
        update_allowed=True,
    )
    ranges_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrRange.properties_schema,
        required=True,
        update_allowed=False,
    )
    ranges_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=ranges_item_schema,
        required=False,
        update_allowed=True,
    )
    prefixes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddrPrefix.properties_schema,
        required=True,
        update_allowed=False,
    )
    prefixes_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=prefixes_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'addrs',
        'ranges',
        'prefixes',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'addrs': addrs_schema,
        'ranges': ranges_schema,
        'prefixes': prefixes_schema,
    }




class DebugVirtualServiceSeParams(object):
    # all schemas
    se_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    se_uuids_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=se_uuids_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'se_uuids',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'se_uuids': se_uuids_schema,
    }




class DebugVirtualServiceCapture(object):
    # all schemas
    pkt_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of bytes of each packet to capture. Use 0 to capture the entire packet."),
        required=False,
        update_allowed=True,
    )
    duration_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Number of minutes to capture packets. Use 0 to capture until manually stopped."),
        required=False,
        update_allowed=True,
    )
    num_pkts_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Total number of packets to capture."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'pkt_size',
        'duration',
        'num_pkts',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'pkt_size': pkt_size_schema,
        'duration': duration_schema,
        'num_pkts': num_pkts_schema,
    }




class DebugVsDataplane(object):
    # all schemas
    flag_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'flag',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'flag': flag_schema,
    }




class DebugVirtualService(AviResource):
    resource_name = "debugvirtualservice"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    flags_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugVsDataplane.properties_schema,
        required=True,
        update_allowed=False,
    )
    flags_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=flags_item_schema,
        required=False,
        update_allowed=True,
    )
    debug_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugIpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )
    capture_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    capture_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugVirtualServiceCapture.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_params_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DebugVirtualServiceSeParams.properties_schema,
        required=False,
        update_allowed=True,
    )
    debug_hm_schema = properties.Schema(
        properties.Schema.STRING,
        _("Health Monitor debug options."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'flags',
        'debug_ip',
        'capture',
        'capture_params',
        'se_params',
        'debug_hm',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'flags': flags_schema,
        'debug_ip': debug_ip_schema,
        'capture': capture_schema,
        'capture_params': capture_params_schema,
        'se_params': se_params_schema,
        'debug_hm': debug_hm_schema,
    }




class DebugVirtualServiceFlags(AviNestedResource, DebugVsDataplane):
    resource_name = "debugvirtualservice"
    nested_property_name = "flags"

    parent_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of debugvirtualservice"),
        required=True,
        update_allowed=False,
    )

    # properties list
    PROPERTIES = DebugVsDataplane.PROPERTIES + ('debugvirtualservice_uuid',)

    # mapping of properties to their schemas
    properties_schema = {
        'debugvirtualservice_uuid': parent_uuid_schema,
    }
    properties_schema.update(DebugVsDataplane.properties_schema)


def resource_mapping():
    return {
        'AviBeta16.1::DebugServiceEngine::Flag': DebugServiceEngineFlags,
        'AviBeta16.1::DebugVirtualService': DebugVirtualService,
        'AviBeta16.1::DebugServiceEngine': DebugServiceEngine,
        'AviBeta16.1::DebugServiceEngine::CpuShare': DebugServiceEngineCpuShares,
        'AviBeta16.1::DebugVirtualService::Flag': DebugVirtualServiceFlags,
        'AviBeta16.1::DebugServiceEngine::SeagentDebug': DebugServiceEngineSeagentDebug,
    }

