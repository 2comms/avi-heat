# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from options import *


class CloneServer(object):
    # all schemas
    ip_address_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP Address of the Clone Server."),
        schema=IpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )
    mac_schema = properties.Schema(
        properties.Schema.STRING,
        _("MAC Address of the Clone Server."),
        required=False,
        update_allowed=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Subnet of the network to clone the traffic to"),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Network to clone the traffic to You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ip_address',
        'mac',
        'subnet',
        'network_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip_address': ip_address_schema,
        'mac': mac_schema,
        'subnet': subnet_schema,
        'network_uuid': network_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'ip_address': getattr(IpAddr, 'field_references', {}),
        'network_uuid': 'network',
    }



class TrafficCloneProfile(AviResource):
    resource_name = "trafficcloneprofile"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name for the Traffic Clone Profile."),
        required=True,
        update_allowed=True,
    )
    clone_servers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=CloneServer.properties_schema,
        required=True,
        update_allowed=False,
    )
    clone_servers_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=clone_servers_item_schema,
        required=False,
        update_allowed=True,
    )
    preserve_client_ip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Specifies if client IP needs to be preserved to clone destination (Default: False)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'clone_servers',
        'preserve_client_ip',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'clone_servers': clone_servers_schema,
        'preserve_client_ip': preserve_client_ip_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'clone_servers': getattr(CloneServer, 'field_references', {}),
    }



def resource_mapping():
    return {
        'Avi::LBaaS::TrafficCloneProfile': TrafficCloneProfile,
    }

