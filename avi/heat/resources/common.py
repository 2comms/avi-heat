# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from options import *


class IpAddrRange(object):
    # all schemas
    begin_schema = properties.Schema(
        properties.Schema.MAP,
        _("Starting IP address of the range"),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    end_schema = properties.Schema(
        properties.Schema.MAP,
        _("Ending IP address of the range"),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'begin',
        'end',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'begin': begin_schema,
        'end': end_schema,
    }




class RepeatableString(object):
    # all schemas
    str_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'str',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'str': str_schema,
    }




class TenantConfiguration(object):
    # all schemas
    tenant_vrf_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_in_provider_context_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    tenant_access_to_provider_se_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'tenant_vrf',
        'se_in_provider_context',
        'tenant_access_to_provider_se',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'tenant_vrf': tenant_vrf_schema,
        'se_in_provider_context': se_in_provider_context_schema,
        'tenant_access_to_provider_se': tenant_access_to_provider_se_schema,
    }




class Tag(object):
    # all schemas
    value_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'value',
        'type',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'value': value_schema,
        'type': type_schema,
    }




class TimeStamp(object):
    # all schemas
    secs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    usecs_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'secs',
        'usecs',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'secs': secs_schema,
        'usecs': usecs_schema,
    }




class HTTPLocalFile(object):
    # all schemas
    content_type_schema = properties.Schema(
        properties.Schema.STRING,
        _("Mime-type of the content in the file."),
        required=True,
        update_allowed=True,
    )
    file_content_schema = properties.Schema(
        properties.Schema.STRING,
        _("File content to used in the local HTTP response body."),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'content_type',
        'file_content',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'content_type': content_type_schema,
        'file_content': file_content_schema,
    }




class OperationalStatus(object):
    # all schemas
    state_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    reason_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    reason_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=reason_item_schema,
        required=False,
        update_allowed=True,
    )
    reason_code_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    last_changed_time_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=TimeStamp.properties_schema,
        required=False,
        update_allowed=True,
    )
    reason_code_string_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'state',
        'reason',
        'reason_code',
        'last_changed_time',
        'reason_code_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'state': state_schema,
        'reason': reason_schema,
        'reason_code': reason_code_schema,
        'last_changed_time': last_changed_time_schema,
        'reason_code_string': reason_code_string_schema,
    }




class AppInfo(object):
    # all schemas
    app_hdr_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    app_hdr_value_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'app_hdr_name',
        'app_hdr_value',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'app_hdr_name': app_hdr_name_schema,
        'app_hdr_value': app_hdr_value_schema,
    }




class Port(object):
    # all schemas
    port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("TCP/UDP port number."),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'port',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'port': port_schema,
    }




class Tenant(AviResource):
    resource_name = "tenant"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    local_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    config_settings_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=TenantConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'local',
        'description',
        'config_settings',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'local': local_schema,
        'description': description_schema,
        'config_settings': config_settings_schema,
    }




class PortRange(object):
    # all schemas
    start_schema = properties.Schema(
        properties.Schema.MAP,
        _("TCP/UDP port range start (inclusive)."),
        schema=Port.properties_schema,
        required=True,
        update_allowed=True,
    )
    end_schema = properties.Schema(
        properties.Schema.MAP,
        _("TCP/UDP port range end (inclusive)."),
        schema=Port.properties_schema,
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'start',
        'end',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'start': start_schema,
        'end': end_schema,
    }




class IpAddrPort(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP Address of host. One of IP address or hostname should be set"),
        schema=IpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.MAP,
        _("Port number of server"),
        schema=Port.properties_schema,
        required=True,
        update_allowed=True,
    )
    hostname_schema = properties.Schema(
        properties.Schema.STRING,
        _("Hostname of server. One of IP address or hostname should be set"),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'port',
        'hostname',
        'name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'port': port_schema,
        'hostname': hostname_schema,
        'name': name_schema,
    }




def resource_mapping():
    return {
        'AviBeta16.1::Tenant': Tenant,
    }

