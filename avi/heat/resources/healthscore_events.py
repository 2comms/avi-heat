# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from options import *

from options import *


class HealthScoreDetails(object):
    # all schemas
    value_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    previous_value_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=True,
    )
    timestamp_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    reason_schema = properties.Schema(
        properties.Schema.STRING,
        _("Reason for the Health Score Change"),
        required=False,
        update_allowed=True,
    )
    anomaly_penalty_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    anomaly_reason_schema = properties.Schema(
        properties.Schema.STRING,
        _("Reason for Anomaly Penalty"),
        required=False,
        update_allowed=True,
    )
    resources_penalty_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    resources_reason_schema = properties.Schema(
        properties.Schema.STRING,
        _("Reason for Resources Penalty"),
        required=False,
        update_allowed=True,
    )
    performance_score_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    performance_reason_schema = properties.Schema(
        properties.Schema.STRING,
        _("Reason for Performance Score"),
        required=False,
        update_allowed=True,
    )
    security_penalty_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    security_reason_schema = properties.Schema(
        properties.Schema.STRING,
        _("Reason for Security Threat Level"),
        required=False,
        update_allowed=True,
    )
    sub_resource_prefix_schema = properties.Schema(
        properties.Schema.STRING,
        _("Resource prefix containing entity information."),
        required=False,
        update_allowed=True,
    )
    step_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("The step interval in seconds"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'value',
        'previous_value',
        'timestamp',
        'reason',
        'anomaly_penalty',
        'anomaly_reason',
        'resources_penalty',
        'resources_reason',
        'performance_score',
        'performance_reason',
        'security_penalty',
        'security_reason',
        'sub_resource_prefix',
        'step',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'value': value_schema,
        'previous_value': previous_value_schema,
        'timestamp': timestamp_schema,
        'reason': reason_schema,
        'anomaly_penalty': anomaly_penalty_schema,
        'anomaly_reason': anomaly_reason_schema,
        'resources_penalty': resources_penalty_schema,
        'resources_reason': resources_reason_schema,
        'performance_score': performance_score_schema,
        'performance_reason': performance_reason_schema,
        'security_penalty': security_penalty_schema,
        'security_reason': security_reason_schema,
        'sub_resource_prefix': sub_resource_prefix_schema,
        'step': step_schema,
    }
