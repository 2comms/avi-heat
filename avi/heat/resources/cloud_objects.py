# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from common import *
from options import *
from system import *


class vCloudAirConfiguration(object):
    # all schemas
    vca_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir username"),
        required=True,
        update_allowed=True,
    )
    vca_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir password"),
        required=True,
        update_allowed=True,
    )
    vca_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir host address"),
        required=True,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir access mode (Default: WRITE_ACCESS)"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WRITE_ACCESS', 'READ_ACCESS', 'NO_ACCESS']),
        ],
    )
    vca_instance_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir instance ID"),
        required=True,
        update_allowed=True,
    )
    vca_orgnization_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir orgnization ID"),
        required=True,
        update_allowed=True,
    )
    vca_vdc_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir virtual data center name"),
        required=True,
        update_allowed=True,
    )
    vca_mgmt_network_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir management network"),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vca_username',
        'vca_password',
        'vca_host',
        'privilege',
        'vca_instance',
        'vca_orgnization',
        'vca_vdc',
        'vca_mgmt_network',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vca_username': vca_username_schema,
        'vca_password': vca_password_schema,
        'vca_host': vca_host_schema,
        'privilege': privilege_schema,
        'vca_instance': vca_instance_schema,
        'vca_orgnization': vca_orgnization_schema,
        'vca_vdc': vca_vdc_schema,
        'vca_mgmt_network': vca_mgmt_network_schema,
    }




class AwsZoneConfig(object):
    # all schemas
    availability_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _("Availability zone"),
        required=True,
        update_allowed=True,
    )
    mgmt_network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name or CIDR of the network in the Availability Zone that will be used as management network."),
        required=True,
        update_allowed=True,
    )
    mgmt_network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the network in the Availability Zone that will be used as management network."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'availability_zone',
        'mgmt_network_name',
        'mgmt_network_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'availability_zone': availability_zone_schema,
        'mgmt_network_name': mgmt_network_name_schema,
        'mgmt_network_uuid': mgmt_network_uuid_schema,
    }




class CloudStackConfiguration(object):
    # all schemas
    api_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("CloudStack API URL"),
        required=True,
        update_allowed=True,
    )
    access_key_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("CloudStack API Key"),
        required=True,
        update_allowed=True,
    )
    secret_access_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("CloudStack Secret Key"),
        required=True,
        update_allowed=True,
    )
    mgmt_network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Management network name"),
        required=True,
        update_allowed=True,
    )
    mgmt_network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Management network name"),
        required=False,
        update_allowed=True,
    )
    cntr_public_ip_schema = properties.Schema(
        properties.Schema.STRING,
        _("If controller's management IP is in a private network, a publicly accessible IP to reach the controller."),
        required=False,
        update_allowed=True,
    )
    hypervisor_schema = properties.Schema(
        properties.Schema.STRING,
        _("Default hypervisor type (Default: KVM)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['DEFAULT', 'VMWARE_VSAN', 'XEN', 'VMWARE_ESX', 'KVM']),
        ],
    )

    # properties list
    PROPERTIES = (
        'api_url',
        'access_key_id',
        'secret_access_key',
        'mgmt_network_name',
        'mgmt_network_uuid',
        'cntr_public_ip',
        'hypervisor',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'api_url': api_url_schema,
        'access_key_id': access_key_id_schema,
        'secret_access_key': secret_access_key_schema,
        'mgmt_network_name': mgmt_network_name_schema,
        'mgmt_network_uuid': mgmt_network_uuid_schema,
        'cntr_public_ip': cntr_public_ip_schema,
        'hypervisor': hypervisor_schema,
    }




class MesosSeResources(object):
    # all schemas
    attribute_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute (Fleet or Mesos) key of Hosts"),
        required=True,
        update_allowed=True,
    )
    attribute_value_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute (Fleet or Mesos) value of Hosts"),
        required=True,
        update_allowed=True,
    )
    cpu_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Obsolete - ignored (Default: 2.0)"),
        required=False,
        update_allowed=True,
    )
    memory_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Obsolete - ignored (Default: 4096)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'attribute_key',
        'attribute_value',
        'cpu',
        'memory',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'attribute_key': attribute_key_schema,
        'attribute_value': attribute_value_schema,
        'cpu': cpu_schema,
        'memory': memory_schema,
    }




class HostAttributes(object):
    # all schemas
    attr_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    attr_val_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'attr_key',
        'attr_val',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'attr_key': attr_key_schema,
        'attr_val': attr_val_schema,
    }




class LinuxServerHost(object):
    # all schemas
    host_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    host_attr_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=HostAttributes.properties_schema,
        required=True,
        update_allowed=False,
    )
    host_attr_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=host_attr_item_schema,
        required=False,
        update_allowed=True,
    )
    node_availability_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _("Node's availability zone. ServiceEngines belonging to the availability zone will be rebooted during a manual DR failover"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'host_ip',
        'host_attr',
        'node_availability_zone',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'host_ip': host_ip_schema,
        'host_attr': host_attr_schema,
        'node_availability_zone': node_availability_zone_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'host_attr': getattr(HostAttributes, 'field_references', {}),
        'host_ip': getattr(IpAddr, 'field_references', {}),
    }



class vCenterConfiguration(object):
    # all schemas
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username Avi Vantage will use when authenticating with vCenter."),
        required=False,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password Avi Vantage will use when authenticating with vCenter."),
        required=False,
        update_allowed=True,
    )
    vcenter_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCenter hostname or IP address."),
        required=False,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _("Set the access mode to vCenter as either Read, which allows Avi to discover networks and servers, or Write, which also allows Avi to create Service Engines and configure their network properties. (Default: WRITE_ACCESS)"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WRITE_ACCESS', 'READ_ACCESS', 'NO_ACCESS']),
        ],
    )
    datacenter_schema = properties.Schema(
        properties.Schema.STRING,
        _("Datacenter for virtual infrastructure discovery"),
        required=False,
        update_allowed=True,
    )
    management_network_schema = properties.Schema(
        properties.Schema.STRING,
        _("Management network to use for Avi Service Engines"),
        required=False,
        update_allowed=True,
    )
    management_ip_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Management subnet to use for Avi Service Engines"),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    vcenter_template_se_location_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Service Engine Template in vCenter to be used for creating Service Engines"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'username',
        'password',
        'vcenter_url',
        'privilege',
        'datacenter',
        'management_network',
        'management_ip_subnet',
        'vcenter_template_se_location',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'username': username_schema,
        'password': password_schema,
        'vcenter_url': vcenter_url_schema,
        'privilege': privilege_schema,
        'datacenter': datacenter_schema,
        'management_network': management_network_schema,
        'management_ip_subnet': management_ip_subnet_schema,
        'vcenter_template_se_location': vcenter_template_se_location_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'management_ip_subnet': getattr(IpAddrPrefix, 'field_references', {}),
    }



class CloudConnectorUser(AviResource):
    resource_name = "cloudconnectoruser"
    # all schemas
    version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    private_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    public_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'version',
        'name',
        'private_key',
        'public_key',
        'password',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'version': version_schema,
        'name': name_schema,
        'private_key': private_key_schema,
        'public_key': public_key_schema,
        'password': password_schema,
    }




class APICConfiguration(object):
    # all schemas
    apic_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("The hostname or IP address of the APIC controller."),
        required=True,
        update_allowed=False,
    )
    apic_name_schema = properties.Schema(
        properties.Schema.LIST,
        _("The hostname or IP address of the APIC controller."),
        schema=apic_name_item_schema,
        required=False,
        update_allowed=True,
    )
    apic_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username Avi Vantage will use when authenticating with APIC."),
        required=False,
        update_allowed=True,
    )
    apic_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password Avi Vantage will use when authenticating with APIC."),
        required=False,
        update_allowed=True,
    )
    apic_admin_tenant_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of the Avi specific tenant created within APIC."),
        required=False,
        update_allowed=True,
    )
    apic_vendor_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    apic_product_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    deployment_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    apic_domain_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCenter's virtual machine manager domain within APIC."),
        required=False,
        update_allowed=True,
    )
    avi_controller_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username APIC will use when authenticating with Avi Vantage."),
        required=False,
        update_allowed=True,
    )
    avi_controller_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password APIC will use when authenticating with Avi Vantage."),
        required=False,
        update_allowed=True,
    )
    version_schema = properties.Schema(
        properties.Schema.STRING,
        _("AVI Device Package Version"),
        required=False,
        update_allowed=True,
    )
    minor_schema = properties.Schema(
        properties.Schema.STRING,
        _("AVI Device Package Minor Version"),
        required=False,
        update_allowed=True,
    )
    context_aware_schema = properties.Schema(
        properties.Schema.STRING,
        _("Context aware for supporting Service Graphs across VRFs (Default: SINGLE_CONTEXT)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['MULTI_CONTEXT', 'SINGLE_CONTEXT']),
        ],
    )
    managed_mode_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.1.1) Use Managed Mode for APIC Service Insertion (Default: True)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'apic_name',
        'apic_username',
        'apic_password',
        'apic_admin_tenant',
        'apic_vendor',
        'apic_product',
        'deployment',
        'apic_domain',
        'avi_controller_username',
        'avi_controller_password',
        'version',
        'minor',
        'context_aware',
        'managed_mode',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'apic_name': apic_name_schema,
        'apic_username': apic_username_schema,
        'apic_password': apic_password_schema,
        'apic_admin_tenant': apic_admin_tenant_schema,
        'apic_vendor': apic_vendor_schema,
        'apic_product': apic_product_schema,
        'deployment': deployment_schema,
        'apic_domain': apic_domain_schema,
        'avi_controller_username': avi_controller_username_schema,
        'avi_controller_password': avi_controller_password_schema,
        'version': version_schema,
        'minor': minor_schema,
        'context_aware': context_aware_schema,
        'managed_mode': managed_mode_schema,
    }




class NuageSDNController(object):
    # all schemas
    nuage_vsd_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("Nuage VSD host name or IP address"),
        required=False,
        update_allowed=True,
    )
    nuage_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 8443)"),
        required=False,
        update_allowed=True,
    )
    nuage_username_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_password_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_organization_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_domain_schema = properties.Schema(
        properties.Schema.STRING,
        _("Domain to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _("Zone to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_network_schema = properties.Schema(
        properties.Schema.STRING,
        _("Network to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_enterprise_schema = properties.Schema(
        properties.Schema.STRING,
        _("Enterprise to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_user_schema = properties.Schema(
        properties.Schema.STRING,
        _("User to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_policy_group_schema = properties.Schema(
        properties.Schema.STRING,
        _("Policy Group to be used for SE creation"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'nuage_vsd_host',
        'nuage_port',
        'nuage_username',
        'nuage_password',
        'nuage_organization',
        'se_domain',
        'se_zone',
        'se_network',
        'se_enterprise',
        'se_user',
        'se_policy_group',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'nuage_vsd_host': nuage_vsd_host_schema,
        'nuage_port': nuage_port_schema,
        'nuage_username': nuage_username_schema,
        'nuage_password': nuage_password_schema,
        'nuage_organization': nuage_organization_schema,
        'se_domain': se_domain_schema,
        'se_zone': se_zone_schema,
        'se_network': se_network_schema,
        'se_enterprise': se_enterprise_schema,
        'se_user': se_user_schema,
        'se_policy_group': se_policy_group_schema,
    }




class SSHSeDeployment(object):
    # all schemas
    ssh_user_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Deprecated in: 17.1.1) Username for SSH access to hosts"),
        required=False,
        update_allowed=True,
    )
    sudo_user_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Deprecated in: 17.1.1) Username for sudo"),
        required=False,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Deprecated in: 17.1.1) Password for ssh and/or sudo"),
        required=False,
        update_allowed=True,
    )
    host_os_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Deprecated in: 17.1.1) Host OS distribution e.g. COREOS, UBUNTU, REDHAT"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ssh_user',
        'sudo_user',
        'password',
        'host_os',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ssh_user': ssh_user_schema,
        'sudo_user': sudo_user_schema,
        'password': password_schema,
        'host_os': host_os_schema,
    }




class MarathonSeDeployment(object):
    # all schemas
    host_os_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host OS distribution e.g. COREOS, UBUNTU, REDHAT"),
        required=False,
        update_allowed=True,
    )
    docker_image_schema = properties.Schema(
        properties.Schema.STRING,
        _("Docker image to be used for Avi SE installation e.g. fedora, ubuntu"),
        required=False,
        update_allowed=True,
    )
    uris_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("URIs to be resolved for starting the application"),
        required=True,
        update_allowed=False,
    )
    uris_schema = properties.Schema(
        properties.Schema.LIST,
        _("URIs to be resolved for starting the application"),
        schema=uris_item_schema,
        required=False,
        update_allowed=True,
    )
    resource_roles_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("Accepted resource roles for SEs"),
        required=True,
        update_allowed=False,
    )
    resource_roles_schema = properties.Schema(
        properties.Schema.LIST,
        _("Accepted resource roles for SEs"),
        schema=resource_roles_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'host_os',
        'docker_image',
        'uris',
        'resource_roles',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'host_os': host_os_schema,
        'docker_image': docker_image_schema,
        'uris': uris_schema,
        'resource_roles': resource_roles_schema,
    }




class MesosAttribute(object):
    # all schemas
    attribute_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute to match"),
        required=True,
        update_allowed=True,
    )
    value_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute value. If not set, match any value"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'attribute',
        'value',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'attribute': attribute_schema,
        'value': value_schema,
    }




class MarathonConfiguration(object):
    # all schemas
    marathon_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("Marathon API URL of the form http://host:port"),
        required=False,
        update_allowed=True,
    )
    marathon_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("Username for Marathon authentication"),
        required=False,
        update_allowed=True,
    )
    marathon_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("Password for Marathon authentication"),
        required=False,
        update_allowed=True,
    )
    public_port_range_schema = properties.Schema(
        properties.Schema.MAP,
        _("Public port range allocated to this Marathon framework instance"),
        schema=PortRange.properties_schema,
        required=False,
        update_allowed=True,
    )
    private_port_range_schema = properties.Schema(
        properties.Schema.MAP,
        _("Private port range allocated to this Marathon framework instance"),
        schema=PortRange.properties_schema,
        required=False,
        update_allowed=True,
    )
    framework_tag_schema = properties.Schema(
        properties.Schema.STRING,
        _("Framework tag to be used in Virtualservice name. Default is framework name from Mesos. If this tag is altered atruntime, Virtualservices will be deleted and re-created"),
        required=False,
        update_allowed=True,
    )
    vs_name_tag_framework_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Tag VS name with framework name or framework_tag. Useful in deployments with multiple frameworks (Default: False)"),
        required=False,
        update_allowed=True,
    )
    use_token_auth_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use Token based authentication instead of basic authentication. Token is refreshed every 5 minutes. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    tenant_schema = properties.Schema(
        properties.Schema.STRING,
        _("Tenant to pin this Marathon instance to. If set, a tenant object will be created in Avi bearing this name and all applications created in this marathon will be associated with this tenant regardless of, if any, tenant configuration in marathon label for this application."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'marathon_url',
        'marathon_username',
        'marathon_password',
        'public_port_range',
        'private_port_range',
        'framework_tag',
        'vs_name_tag_framework',
        'use_token_auth',
        'tenant',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'marathon_url': marathon_url_schema,
        'marathon_username': marathon_username_schema,
        'marathon_password': marathon_password_schema,
        'public_port_range': public_port_range_schema,
        'private_port_range': private_port_range_schema,
        'framework_tag': framework_tag_schema,
        'vs_name_tag_framework': vs_name_tag_framework_schema,
        'use_token_auth': use_token_auth_schema,
        'tenant': tenant_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'public_port_range': getattr(PortRange, 'field_references', {}),
        'private_port_range': getattr(PortRange, 'field_references', {}),
    }



class OshiftSharedVirtualService(object):
    # all schemas
    virtualservice_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) Name of shared virtualservice. VirtualService will be created automatically by Cloud Connector"),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'virtualservice_name',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'virtualservice_name': virtualservice_name_schema,
    }




class OshiftDockerRegistryMetaData(object):
    # all schemas
    registry_service_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of the Integrated registry Service in Openshift."),
        required=False,
        update_allowed=True,
    )
    registry_namespace_schema = properties.Schema(
        properties.Schema.STRING,
        _("Namespace for the ServiceEngine image to be hosted in Openshift Integrated registry."),
        required=False,
        update_allowed=True,
    )
    registry_vip_schema = properties.Schema(
        properties.Schema.MAP,
        _("Static VIP for 'docker-registry' service in Openshift if Avi is proxying for this service.This VIP should be outside the cluster IP subnet in Kubernetes and within the subnet configured (but outside the available pool of IPs) in the East West IPAM profile configuration for this Cloud. For example, if kubernetes cluster VIP range is 172.30.0.0/16 and subnet configured in East West IPAM profile is 172.50.0.0/16, then 172.50.0.2 can be used for this vip and IP pool can start from 172.50.0.3 onwards. Use this static VIP in '--insecure-registry <this-vip>:5000' docker config if using an insecure registry or add this to the list of IPs/hostnames when generating certificates if using a secure TLS registry."),
        schema=IpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'registry_service',
        'registry_namespace',
        'registry_vip',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'registry_service': registry_service_schema,
        'registry_namespace': registry_namespace_schema,
        'registry_vip': registry_vip_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'registry_vip': getattr(IpAddr, 'field_references', {}),
    }



class NsxConfiguration(object):
    # all schemas
    nsx_manager_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) The hostname or IP address of the NSX MGr."),
        required=True,
        update_allowed=True,
    )
    nsx_manager_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) The username Avi Vantage will use when authenticating with NSX Mgr."),
        required=True,
        update_allowed=True,
    )
    nsx_manager_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) The password Avi Vantage will use when authenticating with NSX Mgr."),
        required=True,
        update_allowed=True,
    )
    avi_nsx_prefix_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) This prefix will be added to the names of all NSX objects created by Avi Controller. It should be unique across all the Avi Controller clusters"),
        required=True,
        update_allowed=True,
    )
    nsx_poll_time_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.1.1) The interval (in secs) with which Avi Controller polls the NSX Manager for updates (Units: SECONDS) (Default: 300)"),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'nsx_manager_name',
        'nsx_manager_username',
        'nsx_manager_password',
        'avi_nsx_prefix',
        'nsx_poll_time',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'nsx_manager_name': nsx_manager_name_schema,
        'nsx_manager_username': nsx_manager_username_schema,
        'nsx_manager_password': nsx_manager_password_schema,
        'avi_nsx_prefix': avi_nsx_prefix_schema,
        'nsx_poll_time': nsx_poll_time_schema,
    }




class AwsConfiguration(object):
    # all schemas
    access_key_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("AWS access key ID"),
        required=False,
        update_allowed=True,
    )
    secret_access_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("AWS secret access key"),
        required=False,
        update_allowed=True,
    )
    region_schema = properties.Schema(
        properties.Schema.STRING,
        _("AWS region"),
        required=False,
        update_allowed=True,
    )
    vpc_schema = properties.Schema(
        properties.Schema.STRING,
        _("VPC name"),
        required=False,
        update_allowed=True,
    )
    vpc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("VPC ID"),
        required=True,
        update_allowed=True,
    )
    zones_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AwsZoneConfig.properties_schema,
        required=True,
        update_allowed=False,
    )
    zones_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=zones_item_schema,
        required=False,
        update_allowed=True,
    )
    route53_integration_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If enabled, create/update DNS entries in Amazon Route 53 zones (Default: False)"),
        required=False,
        update_allowed=True,
    )
    free_elasticips_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Free unused elastic IP addresses. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    use_iam_roles_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use IAM roles instead of access and secret key. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    iam_assume_role_schema = properties.Schema(
        properties.Schema.STRING,
        _("IAM assume role for cross-account access."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'access_key_id',
        'secret_access_key',
        'region',
        'vpc',
        'vpc_id',
        'zones',
        'route53_integration',
        'free_elasticips',
        'use_iam_roles',
        'iam_assume_role',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'access_key_id': access_key_id_schema,
        'secret_access_key': secret_access_key_schema,
        'region': region_schema,
        'vpc': vpc_schema,
        'vpc_id': vpc_id_schema,
        'zones': zones_schema,
        'route53_integration': route53_integration_schema,
        'free_elasticips': free_elasticips_schema,
        'use_iam_roles': use_iam_roles_schema,
        'iam_assume_role': iam_assume_role_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'zones': getattr(AwsZoneConfig, 'field_references', {}),
    }



class FeProxyRoutePublishConfig(object):
    # all schemas
    mode_schema = properties.Schema(
        properties.Schema.STRING,
        _("Publish ECMP route to upstream router for VIP (Default: FE_PROXY_ROUTE_PUBLISH_NONE)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['FE_PROXY_ROUTE_PUBLISH_NONE', 'FE_PROXY_ROUTE_PUBLISH_QUAGGA_WEBAPP']),
        ],
    )
    token_schema = properties.Schema(
        properties.Schema.STRING,
        _("Token for tracking changes"),
        required=False,
        update_allowed=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Subnet for publisher (Default: 32)"),
        required=False,
        update_allowed=True,
    )
    publisher_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Listener port for publisher (Default: 80)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'mode',
        'token',
        'subnet',
        'publisher_port',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'mode': mode_schema,
        'token': token_schema,
        'subnet': subnet_schema,
        'publisher_port': publisher_port_schema,
    }




class OpenStackRoleMapping(object):
    # all schemas
    os_role_schema = properties.Schema(
        properties.Schema.STRING,
        _("Role name in OpenStack"),
        required=True,
        update_allowed=True,
    )
    avi_role_schema = properties.Schema(
        properties.Schema.STRING,
        _("Role name in Avi"),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'os_role',
        'avi_role',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'os_role': os_role_schema,
        'avi_role': avi_role_schema,
    }




class DockerRegistry(object):
    # all schemas
    registry_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi ServiceEngine repository name. For private registry, it's registry:port/repository, for public registry, it's registry/repository, for openshift registry, it's registry:port/<namespace>/<repo>"),
        required=False,
        update_allowed=True,
    )
    private_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Set if docker registry is private. Avi controller will not attempt to push SE image to the registry, unless se_repository_push is set (Default: False)"),
        required=False,
        update_allowed=True,
    )
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _("Username for docker registry. Authorized 'regular user' if registry is Openshift integrated registry."),
        required=False,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("Password for docker registry. Authorized 'regular user' password if registry is Openshift integrated registry."),
        required=False,
        update_allowed=True,
    )
    se_repository_push_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Avi Controller will push ServiceEngine image to docker repository (Default: False)"),
        required=False,
        update_allowed=True,
    )
    oshift_registry_schema = properties.Schema(
        properties.Schema.MAP,
        _("Openshift integrated registry config."),
        schema=OshiftDockerRegistryMetaData.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'registry',
        'private',
        'username',
        'password',
        'se_repository_push',
        'oshift_registry',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'registry': registry_schema,
        'private': private_schema,
        'username': username_schema,
        'password': password_schema,
        'se_repository_push': se_repository_push_schema,
        'oshift_registry': oshift_registry_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'oshift_registry': getattr(OshiftDockerRegistryMetaData, 'field_references', {}),
    }



class LinuxServerConfiguration(object):
    # all schemas
    ssh_attr_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Deprecated in: 17.1.1) Parameters for SSH to hosts"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Private docker registry for SE image storage"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    hosts_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=LinuxServerHost.properties_schema,
        required=True,
        update_allowed=False,
    )
    hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=hosts_item_schema,
        required=False,
        update_allowed=True,
    )
    se_sys_disk_path_schema = properties.Schema(
        properties.Schema.STRING,
        _("SE System Logs disk path for cloud"),
        required=False,
        update_allowed=True,
    )
    se_sys_disk_size_GB_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("SE System Logs disk size for cloud (Default: 10)"),
        required=False,
        update_allowed=True,
    )
    se_log_disk_path_schema = properties.Schema(
        properties.Schema.STRING,
        _("SE Client Logs disk path for cloud"),
        required=False,
        update_allowed=True,
    )
    se_log_disk_size_GB_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("SE Client Log disk size for cloud (Default: 5)"),
        required=False,
        update_allowed=True,
    )
    se_inband_mgmt_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Flag to notify the SE's in this cloud have an inband management interface, this can be overridden at SE host level by setting host_attr attr_key as SE_INBAND_MGMT with value of true or false (Default: False)"),
        required=False,
        update_allowed=True,
    )
    ssh_user_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) Cloud connector user uuid for SSH to hosts You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ssh_attr',
        'docker_registry_se',
        'hosts',
        'se_sys_disk_path',
        'se_sys_disk_size_GB',
        'se_log_disk_path',
        'se_log_disk_size_GB',
        'se_inband_mgmt',
        'ssh_user_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ssh_attr': ssh_attr_schema,
        'docker_registry_se': docker_registry_se_schema,
        'hosts': hosts_schema,
        'se_sys_disk_path': se_sys_disk_path_schema,
        'se_sys_disk_size_GB': se_sys_disk_size_GB_schema,
        'se_log_disk_path': se_log_disk_path_schema,
        'se_log_disk_size_GB': se_log_disk_size_GB_schema,
        'se_inband_mgmt': se_inband_mgmt_schema,
        'ssh_user_uuid': ssh_user_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_attr': getattr(SSHSeDeployment, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'hosts': getattr(LinuxServerHost, 'field_references', {}),
        'ssh_user_uuid': 'cloudconnectoruser',
    }



class MesosConfiguration(object):
    # all schemas
    marathon_configurations_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("List of Marathon frameworks."),
        schema=MarathonConfiguration.properties_schema,
        required=True,
        update_allowed=False,
    )
    marathon_configurations_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of Marathon frameworks."),
        schema=marathon_configurations_item_schema,
        required=False,
        update_allowed=True,
    )
    mesos_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("Mesos URL of the form http://host:port"),
        required=False,
        update_allowed=True,
    )
    vip_schema = properties.Schema(
        properties.Schema.MAP,
        _("VIP to be used by all East-West apps on all Hosts. Preferrably use an address from outside the subnet"),
        schema=IpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )
    use_bridge_ip_as_vip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use Bridge IP on each Host as VIP (Default: True)"),
        required=False,
        update_allowed=True,
    )
    container_port_match_http_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService (Default: True)"),
        required=False,
        update_allowed=True,
    )
    http_container_ports_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        required=True,
        update_allowed=False,
    )
    http_container_ports_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        schema=http_container_ports_item_schema,
        required=False,
        update_allowed=True,
    )
    east_west_placement_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Match against this prefix when placing east-west VSs on SEs (Mesos mode only)"),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_deployment_method_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use Fleet/SSH for deploying Service Engines (Default: MESOS_SE_CREATE_FLEET)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['MESOS_SE_CREATE_FLEET', 'MESOS_SE_CREATE_SSH', 'MESOS_SE_CREATE_MARATHON']),
        ],
    )
    use_controller_image_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, use controller generated SE docker image via fileservice, else use docker repository image as defined by docker_registry_se (Default: False)"),
        required=False,
        update_allowed=True,
    )
    marathon_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("Options for Marathon SE deployment"),
        schema=MarathonSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Optional fleet remote endpoint if fleet is used for SE deployment"),
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Docker registry for ServiceEngine image"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_spawn_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("New SE spawn rate per minute (Default: 25)"),
        required=False,
        update_allowed=True,
    )
    app_sync_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Sync frequency in seconds with frameworks (Default: 60)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_se_creation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE creation (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_frontend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for front end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_backend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for back end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    use_container_ip_port_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use container IP address:port for pool instead of host IP address:hostport. This mode is applicable if the container IP is reachable (not a private NATed IP) from other hosts in a routed environment for containers (Default: False)"),
        required=False,
        update_allowed=True,
    )
    feproxy_route_publish_schema = properties.Schema(
        properties.Schema.MAP,
        _("Publish ECMP route to upstream router for VIP"),
        schema=FeProxyRoutePublishConfig.properties_schema,
        required=False,
        update_allowed=True,
    )
    feproxy_bridge_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of second Linux bridge on Host providing connectivity for Front End proxies. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    se_resources_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Obsolete - ignored"),
        schema=MesosSeResources.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_resources_schema = properties.Schema(
        properties.Schema.LIST,
        _("Obsolete - ignored"),
        schema=se_resources_item_schema,
        required=False,
        update_allowed=True,
    )
    se_volume_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host volume to be used as a disk for Avi SE, This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    coredump_directory_schema = properties.Schema(
        properties.Schema.STRING,
        _("Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    ssh_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Deprecated in: 17.1.1) Parameters for SSH SE deployment"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    enable_event_subscription_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Marathon event subscriptions (Default: True)"),
        required=False,
        update_allowed=True,
    )
    nuage_controller_schema = properties.Schema(
        properties.Schema.MAP,
        _("Nuage Overlay SDN Controller information"),
        schema=NuageSDNController.properties_schema,
        required=False,
        update_allowed=True,
    )
    all_vses_are_feproxy_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Consider all Virtualservices as Front End Proxies. Front End proxies are placed on specific SEs as opposed to Back End proxies placed on all SEs. Applicable where each service has its own VIP and VIP is reachable from anywhere (Default: False)"),
        required=False,
        update_allowed=True,
    )
    feproxy_container_port_as_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("For Front End proxies, use container port as service port (Default: True)"),
        required=False,
        update_allowed=True,
    )
    services_accessible_all_interfaces_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Make service ports accessible on all Host interfaces in addition to East-West VIP and/or bridge IP. Usually enabled AWS Mesos clusters to export East-West services on Host interface (Default: False)"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies (Default: True)"),
        required=False,
        update_allowed=True,
    )
    se_exclude_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Exclude hosts with attributes for SE creation"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_exclude_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Exclude hosts with attributes for SE creation"),
        schema=se_exclude_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    se_include_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Create SEs just on hosts with include attributes"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_include_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Create SEs just on hosts with include attributes"),
        schema=se_include_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    ssh_user_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) Cloud connector user uuid for SSH to hosts You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    node_availability_zone_label_schema = properties.Schema(
        properties.Schema.STRING,
        _("Mesos Node label to be used as Mesos Node's availability zone in a dual availability zone deployment. ServiceEngines belonging to the availability zone will be rebooted during a manual DR failover"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'marathon_configurations',
        'mesos_url',
        'vip',
        'use_bridge_ip_as_vip',
        'container_port_match_http_service',
        'http_container_ports',
        'east_west_placement_subnet',
        'se_deployment_method',
        'use_controller_image',
        'marathon_se_deployment',
        'fleet_endpoint',
        'docker_registry_se',
        'se_spawn_rate',
        'app_sync_frequency',
        'disable_auto_se_creation',
        'disable_auto_frontend_service_sync',
        'disable_auto_backend_service_sync',
        'use_container_ip_port',
        'feproxy_route_publish',
        'feproxy_bridge_name',
        'se_resources',
        'se_volume',
        'coredump_directory',
        'ssh_se_deployment',
        'enable_event_subscription',
        'nuage_controller',
        'all_vses_are_feproxy',
        'feproxy_container_port_as_service',
        'services_accessible_all_interfaces',
        'feproxy_vips_enable_proxy_arp',
        'se_exclude_attributes',
        'se_include_attributes',
        'ssh_user_uuid',
        'node_availability_zone_label',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'marathon_configurations': marathon_configurations_schema,
        'mesos_url': mesos_url_schema,
        'vip': vip_schema,
        'use_bridge_ip_as_vip': use_bridge_ip_as_vip_schema,
        'container_port_match_http_service': container_port_match_http_service_schema,
        'http_container_ports': http_container_ports_schema,
        'east_west_placement_subnet': east_west_placement_subnet_schema,
        'se_deployment_method': se_deployment_method_schema,
        'use_controller_image': use_controller_image_schema,
        'marathon_se_deployment': marathon_se_deployment_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'docker_registry_se': docker_registry_se_schema,
        'se_spawn_rate': se_spawn_rate_schema,
        'app_sync_frequency': app_sync_frequency_schema,
        'disable_auto_se_creation': disable_auto_se_creation_schema,
        'disable_auto_frontend_service_sync': disable_auto_frontend_service_sync_schema,
        'disable_auto_backend_service_sync': disable_auto_backend_service_sync_schema,
        'use_container_ip_port': use_container_ip_port_schema,
        'feproxy_route_publish': feproxy_route_publish_schema,
        'feproxy_bridge_name': feproxy_bridge_name_schema,
        'se_resources': se_resources_schema,
        'se_volume': se_volume_schema,
        'coredump_directory': coredump_directory_schema,
        'ssh_se_deployment': ssh_se_deployment_schema,
        'enable_event_subscription': enable_event_subscription_schema,
        'nuage_controller': nuage_controller_schema,
        'all_vses_are_feproxy': all_vses_are_feproxy_schema,
        'feproxy_container_port_as_service': feproxy_container_port_as_service_schema,
        'services_accessible_all_interfaces': services_accessible_all_interfaces_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'se_exclude_attributes': se_exclude_attributes_schema,
        'se_include_attributes': se_include_attributes_schema,
        'ssh_user_uuid': ssh_user_uuid_schema,
        'node_availability_zone_label': node_availability_zone_label_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_se_deployment': getattr(SSHSeDeployment, 'field_references', {}),
        'marathon_configurations': getattr(MarathonConfiguration, 'field_references', {}),
        'marathon_se_deployment': getattr(MarathonSeDeployment, 'field_references', {}),
        'nuage_controller': getattr(NuageSDNController, 'field_references', {}),
        'se_exclude_attributes': getattr(MesosAttribute, 'field_references', {}),
        'se_include_attributes': getattr(MesosAttribute, 'field_references', {}),
        'se_resources': getattr(MesosSeResources, 'field_references', {}),
        'vip': getattr(IpAddr, 'field_references', {}),
        'east_west_placement_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'feproxy_route_publish': getattr(FeProxyRoutePublishConfig, 'field_references', {}),
        'ssh_user_uuid': 'cloudconnectoruser',
    }



class DockerConfiguration(object):
    # all schemas
    ucp_nodes_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("List of Docker UCP nodes; In case of a load balanced UCP cluster, use Virtual IP of the cluster"),
        required=True,
        update_allowed=False,
    )
    ucp_nodes_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of Docker UCP nodes; In case of a load balanced UCP cluster, use Virtual IP of the cluster"),
        schema=ucp_nodes_item_schema,
        required=False,
        update_allowed=True,
    )
    client_tls_key_and_certificate_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the client TLS cert and key You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    ca_tls_key_and_certificate_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the UCP CA TLS cert and key You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    container_port_match_http_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService (Default: True)"),
        required=False,
        update_allowed=True,
    )
    http_container_ports_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        required=True,
        update_allowed=False,
    )
    http_container_ports_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        schema=http_container_ports_item_schema,
        required=False,
        update_allowed=True,
    )
    east_west_placement_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Match against this prefix when placing east-west VSs on SEs "),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_deployment_method_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use Fleet/SSH for SE deployment (Default: SE_CREATE_SSH)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['SE_CREATE_FLEET', 'SE_CREATE_SSH']),
        ],
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Optional fleet remote endpoint if fleet is used for SE deployment"),
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Docker registry for ServiceEngine image"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_spawn_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("New SE spawn rate per minute (Default: 25)"),
        required=False,
        update_allowed=True,
    )
    app_sync_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Sync frequency in seconds with frameworks (Default: 60)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_se_creation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE creation (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_frontend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for front end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_backend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for back end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    use_container_ip_port_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use container IP address:port for pool instead of host IP address:hostport. This mode is applicable if the container IP is reachable (not a private NATed IP) from other hosts in a routed environment for containers (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_volume_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host volume to be used as a disk for Avi SE, This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    coredump_directory_schema = properties.Schema(
        properties.Schema.STRING,
        _("Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    ssh_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Deprecated in: 17.1.1) Parameters for SSH SE deployment"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    enable_event_subscription_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Docker event subscription (Default: True)"),
        required=False,
        update_allowed=True,
    )
    feproxy_container_port_as_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("For Front End proxies, use container port as service port (Default: False)"),
        required=False,
        update_allowed=True,
    )
    services_accessible_all_interfaces_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Make service ports accessible on all Host interfaces in addition to East-West VIP and/or bridge IP. Usually enabled AWS clusters to export East-West services on Host interface (Default: False)"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies (Default: True)"),
        required=False,
        update_allowed=True,
    )
    se_exclude_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Exclude hosts with attributes for SE creation"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_exclude_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Exclude hosts with attributes for SE creation"),
        schema=se_exclude_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    se_include_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Create SEs just on hosts with include attributes"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_include_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Create SEs just on hosts with include attributes"),
        schema=se_include_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    use_controller_image_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, use controller generated SE docker image via fileservice, else use docker repository image as defined by docker_registry_se (Default: False)"),
        required=False,
        update_allowed=True,
    )
    ssh_user_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) Cloud connector user uuid for SSH to hosts You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ucp_nodes',
        'client_tls_key_and_certificate_uuid',
        'ca_tls_key_and_certificate_uuid',
        'container_port_match_http_service',
        'http_container_ports',
        'east_west_placement_subnet',
        'se_deployment_method',
        'fleet_endpoint',
        'docker_registry_se',
        'se_spawn_rate',
        'app_sync_frequency',
        'disable_auto_se_creation',
        'disable_auto_frontend_service_sync',
        'disable_auto_backend_service_sync',
        'use_container_ip_port',
        'se_volume',
        'coredump_directory',
        'ssh_se_deployment',
        'enable_event_subscription',
        'feproxy_container_port_as_service',
        'services_accessible_all_interfaces',
        'feproxy_vips_enable_proxy_arp',
        'se_exclude_attributes',
        'se_include_attributes',
        'use_controller_image',
        'ssh_user_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ucp_nodes': ucp_nodes_schema,
        'client_tls_key_and_certificate_uuid': client_tls_key_and_certificate_uuid_schema,
        'ca_tls_key_and_certificate_uuid': ca_tls_key_and_certificate_uuid_schema,
        'container_port_match_http_service': container_port_match_http_service_schema,
        'http_container_ports': http_container_ports_schema,
        'east_west_placement_subnet': east_west_placement_subnet_schema,
        'se_deployment_method': se_deployment_method_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'docker_registry_se': docker_registry_se_schema,
        'se_spawn_rate': se_spawn_rate_schema,
        'app_sync_frequency': app_sync_frequency_schema,
        'disable_auto_se_creation': disable_auto_se_creation_schema,
        'disable_auto_frontend_service_sync': disable_auto_frontend_service_sync_schema,
        'disable_auto_backend_service_sync': disable_auto_backend_service_sync_schema,
        'use_container_ip_port': use_container_ip_port_schema,
        'se_volume': se_volume_schema,
        'coredump_directory': coredump_directory_schema,
        'ssh_se_deployment': ssh_se_deployment_schema,
        'enable_event_subscription': enable_event_subscription_schema,
        'feproxy_container_port_as_service': feproxy_container_port_as_service_schema,
        'services_accessible_all_interfaces': services_accessible_all_interfaces_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'se_exclude_attributes': se_exclude_attributes_schema,
        'se_include_attributes': se_include_attributes_schema,
        'use_controller_image': use_controller_image_schema,
        'ssh_user_uuid': ssh_user_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_se_deployment': getattr(SSHSeDeployment, 'field_references', {}),
        'east_west_placement_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'se_exclude_attributes': getattr(MesosAttribute, 'field_references', {}),
        'client_tls_key_and_certificate_uuid': 'sslkeyandcertificate',
        'se_include_attributes': getattr(MesosAttribute, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'ca_tls_key_and_certificate_uuid': 'sslkeyandcertificate',
        'ssh_user_uuid': 'cloudconnectoruser',
    }



class OShiftK8SConfiguration(object):
    # all schemas
    master_nodes_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("List of OpenShift/Kubernetes master nodes; In case of a load balanced OpenShift/K8S cluster, use Virtual IP of the cluster. Each node is of the form node:8443 or http://node:8080. If scheme is not provided, https is assumed"),
        required=True,
        update_allowed=False,
    )
    master_nodes_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of OpenShift/Kubernetes master nodes; In case of a load balanced OpenShift/K8S cluster, use Virtual IP of the cluster. Each node is of the form node:8443 or http://node:8080. If scheme is not provided, https is assumed"),
        schema=master_nodes_item_schema,
        required=False,
        update_allowed=True,
    )
    client_tls_key_and_certificate_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the client TLS cert and key instead of service account token. One of client certificate or token is required You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    ca_tls_key_and_certificate_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the UCP CA TLS cert and key You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    avi_bridge_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Avi Linux bridge subnet on OpenShift/K8s nodes"),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    container_port_match_http_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService (Default: True)"),
        required=False,
        update_allowed=True,
    )
    http_container_ports_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        required=True,
        update_allowed=False,
    )
    http_container_ports_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        schema=http_container_ports_item_schema,
        required=False,
        update_allowed=True,
    )
    east_west_placement_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Match against this prefix when placing east-west VSs on SEs "),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_deployment_method_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use Fleet/SSH for SE deployment (Default: SE_CREATE_SSH)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['SE_CREATE_FLEET', 'SE_CREATE_SSH']),
        ],
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Optional fleet remote endpoint if fleet is used for SE deployment"),
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Docker registry for ServiceEngine image"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_spawn_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("New SE spawn rate per minute (Default: 25)"),
        required=False,
        update_allowed=True,
    )
    app_sync_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Sync frequency in seconds with frameworks (Default: 60)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_se_creation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE creation (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_frontend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for front end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_backend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for back end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_volume_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host volume to be used as a disk for Avi SE, This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    coredump_directory_schema = properties.Schema(
        properties.Schema.STRING,
        _("Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    ssh_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Deprecated in: 17.1.1) Parameters for SSH SE deployment"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    enable_event_subscription_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Kubernetes event subscription (Default: True)"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies (Default: True)"),
        required=False,
        update_allowed=True,
    )
    se_exclude_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Exclude hosts with attributes for SE creation"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_exclude_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Exclude hosts with attributes for SE creation"),
        schema=se_exclude_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    se_include_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Create SEs just on hosts with include attributes"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_include_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Create SEs just on hosts with include attributes"),
        schema=se_include_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    nuage_controller_schema = properties.Schema(
        properties.Schema.MAP,
        _("Nuage Overlay SDN Controller information"),
        schema=NuageSDNController.properties_schema,
        required=False,
        update_allowed=True,
    )
    use_service_cluster_ip_as_ew_vip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use Cluster IP of service as VIP for East-West services; This option requires that kube proxy is disabled on all nodes (Default: False)"),
        required=False,
        update_allowed=True,
    )
    default_service_as_east_west_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If there is no explicit east_west_placement field in virtualservice configuration, treat service as a East-West service; default services such a OpenShift API server do not have virtualservice configuration (Default: True)"),
        required=False,
        update_allowed=True,
    )
    sdn_overlay_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Cluster uses overlay based SDN. Enable this flag if cluster uses a overlay based SDN for OpenShift, Flannel, Weave, Nuage. Disable for routed mode (Default: True)"),
        required=False,
        update_allowed=True,
    )
    use_controller_image_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, use controller generated SE docker image via fileservice, else use docker repository image as defined by docker_registry_se (Default: False)"),
        required=False,
        update_allowed=True,
    )
    service_account_token_schema = properties.Schema(
        properties.Schema.STRING,
        _("Authorization token for service account instead of client certificate. One of client certificate or token is required"),
        required=False,
        update_allowed=True,
    )
    use_scheduling_disabled_nodes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable VirtualService placement on Service Engines on nodes with scheduling disabled. When false, Service Engines are disabled on nodes where scheduling is disabled (Default: False)"),
        required=False,
        update_allowed=True,
    )
    l4_health_monitoring_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform Layer4 (TCP/UDP) health monitoring even for Layer7 (HTTP) Pools (Default: False)"),
        required=False,
        update_allowed=True,
    )
    ssh_user_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) Cloud connector user uuid for SSH to hosts You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    routes_share_virtualservice_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.1.1) Routes use shared virtualservices. If configured, all OpenShift Routes will be created under a parent VirtualService. OpenShift Services will not trigger a VirtualService creation (Default: False)"),
        required=False,
        update_allowed=True,
    )
    default_shared_virtualservice_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.1.1) Default shared virtualservice that acts as the parent for all OpenShift Routes"),
        schema=OshiftSharedVirtualService.properties_schema,
        required=False,
        update_allowed=True,
    )
    node_availability_zone_label_schema = properties.Schema(
        properties.Schema.STRING,
        _("OpenShift/K8S Node label to be used as OpenShift/K8S Node's availability zone in a dual availability zone deployment. ServiceEngines belonging to the availability zone will be rebooted during a manual DR failover"),
        required=False,
        update_allowed=True,
    )
    secure_egress_mode_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.1.1) Allow Avi Vantage to create Security Context Constraints and Service Accounts which allow Egress Pods to run in privileged mode in an Openshift environment. Assumption is that credentials provided have cluster-admin role when this mode is enabled. (Default: False)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'master_nodes',
        'client_tls_key_and_certificate_uuid',
        'ca_tls_key_and_certificate_uuid',
        'avi_bridge_subnet',
        'container_port_match_http_service',
        'http_container_ports',
        'east_west_placement_subnet',
        'se_deployment_method',
        'fleet_endpoint',
        'docker_registry_se',
        'se_spawn_rate',
        'app_sync_frequency',
        'disable_auto_se_creation',
        'disable_auto_frontend_service_sync',
        'disable_auto_backend_service_sync',
        'se_volume',
        'coredump_directory',
        'ssh_se_deployment',
        'enable_event_subscription',
        'feproxy_vips_enable_proxy_arp',
        'se_exclude_attributes',
        'se_include_attributes',
        'nuage_controller',
        'use_service_cluster_ip_as_ew_vip',
        'default_service_as_east_west_service',
        'sdn_overlay',
        'use_controller_image',
        'service_account_token',
        'use_scheduling_disabled_nodes',
        'l4_health_monitoring',
        'ssh_user_uuid',
        'routes_share_virtualservice',
        'default_shared_virtualservice',
        'node_availability_zone_label',
        'secure_egress_mode',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'master_nodes': master_nodes_schema,
        'client_tls_key_and_certificate_uuid': client_tls_key_and_certificate_uuid_schema,
        'ca_tls_key_and_certificate_uuid': ca_tls_key_and_certificate_uuid_schema,
        'avi_bridge_subnet': avi_bridge_subnet_schema,
        'container_port_match_http_service': container_port_match_http_service_schema,
        'http_container_ports': http_container_ports_schema,
        'east_west_placement_subnet': east_west_placement_subnet_schema,
        'se_deployment_method': se_deployment_method_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'docker_registry_se': docker_registry_se_schema,
        'se_spawn_rate': se_spawn_rate_schema,
        'app_sync_frequency': app_sync_frequency_schema,
        'disable_auto_se_creation': disable_auto_se_creation_schema,
        'disable_auto_frontend_service_sync': disable_auto_frontend_service_sync_schema,
        'disable_auto_backend_service_sync': disable_auto_backend_service_sync_schema,
        'se_volume': se_volume_schema,
        'coredump_directory': coredump_directory_schema,
        'ssh_se_deployment': ssh_se_deployment_schema,
        'enable_event_subscription': enable_event_subscription_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'se_exclude_attributes': se_exclude_attributes_schema,
        'se_include_attributes': se_include_attributes_schema,
        'nuage_controller': nuage_controller_schema,
        'use_service_cluster_ip_as_ew_vip': use_service_cluster_ip_as_ew_vip_schema,
        'default_service_as_east_west_service': default_service_as_east_west_service_schema,
        'sdn_overlay': sdn_overlay_schema,
        'use_controller_image': use_controller_image_schema,
        'service_account_token': service_account_token_schema,
        'use_scheduling_disabled_nodes': use_scheduling_disabled_nodes_schema,
        'l4_health_monitoring': l4_health_monitoring_schema,
        'ssh_user_uuid': ssh_user_uuid_schema,
        'routes_share_virtualservice': routes_share_virtualservice_schema,
        'default_shared_virtualservice': default_shared_virtualservice_schema,
        'node_availability_zone_label': node_availability_zone_label_schema,
        'secure_egress_mode': secure_egress_mode_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_se_deployment': getattr(SSHSeDeployment, 'field_references', {}),
        'east_west_placement_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'avi_bridge_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'nuage_controller': getattr(NuageSDNController, 'field_references', {}),
        'se_exclude_attributes': getattr(MesosAttribute, 'field_references', {}),
        'client_tls_key_and_certificate_uuid': 'sslkeyandcertificate',
        'default_shared_virtualservice': getattr(OshiftSharedVirtualService, 'field_references', {}),
        'se_include_attributes': getattr(MesosAttribute, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'ca_tls_key_and_certificate_uuid': 'sslkeyandcertificate',
        'ssh_user_uuid': 'cloudconnectoruser',
    }



class OpenStackConfiguration(object):
    # all schemas
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username Avi Vantage will use when authenticating to Keystone. For Keystone v3, provide the user information in user@domain format, unless that user belongs to the Default domain."),
        required=True,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password Avi Vantage will use when authenticating to Keystone."),
        required=False,
        update_allowed=True,
    )
    admin_tenant_schema = properties.Schema(
        properties.Schema.STRING,
        _("OpenStack admin tenant (or project) information. For Keystone v3, provide the project information in project@domain format. Domain need not be specified if the project belongs to the 'Default' domain."),
        required=True,
        update_allowed=True,
    )
    keystone_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("Keystone's hostname or IP address. (Deprecated) Use auth_url instead."),
        required=False,
        update_allowed=True,
    )
    mgmt_network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Management network name or cidr"),
        required=True,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _("Access privilege"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WRITE_ACCESS', 'READ_ACCESS', 'NO_ACCESS']),
        ],
    )
    use_keystone_auth_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use keystone for user authentication (Default: True)"),
        required=False,
        update_allowed=True,
    )
    prov_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("LBaaS provider name"),
        required=True,
        update_allowed=False,
    )
    prov_name_schema = properties.Schema(
        properties.Schema.LIST,
        _("LBaaS provider name"),
        schema=prov_name_item_schema,
        required=False,
        update_allowed=True,
    )
    mgmt_network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Management network UUID"),
        required=False,
        update_allowed=True,
    )
    region_schema = properties.Schema(
        properties.Schema.STRING,
        _("Region name"),
        required=False,
        update_allowed=True,
    )
    hypervisor_schema = properties.Schema(
        properties.Schema.STRING,
        _("Default hypervisor type (Default: KVM)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['DEFAULT', 'VMWARE_VSAN', 'XEN', 'VMWARE_ESX', 'KVM']),
        ],
    )
    tenant_se_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, then SEs will be created in the appropriate tenants, else SEs will be created in the admin_tenant. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    import_keystone_tenants_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Import keystone tenants list into Avi (Default: True)"),
        required=False,
        update_allowed=True,
    )
    anti_affinity_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, an anti-affinity policy will be applied to all SEs of a SE-Group, else no such policy will be applied. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    port_security_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, port-security extension (if detected) will be used instead of security-groups, allowed-address-pairs or interface-secondary-ips. If false, port-security extension is skipped (Default: False)"),
        required=False,
        update_allowed=True,
    )
    security_groups_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If false, security-groups extension will not be used.  (Default: True)"),
        required=False,
        update_allowed=True,
    )
    allowed_address_pairs_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If false, allowed-address-pairs extension will not be used.  (Default: True)"),
        required=False,
        update_allowed=True,
    )
    free_floatingips_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Free unused floating IPs. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    img_format_schema = properties.Schema(
        properties.Schema.STRING,
        _("If OS_IMG_FMT_RAW, use RAW images else use QCOW2 or streamOptimized/flat VMDK as appropriate.  (Default: OS_IMG_FMT_AUTO)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['OS_IMG_FMT_VMDK', 'OS_IMG_FMT_QCOW2', 'OS_IMG_FMT_FLAT', 'OS_IMG_FMT_RAW', 'OS_IMG_FMT_AUTO']),
        ],
    )
    use_admin_url_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If admin URLs are either inaccessible or not to be accessed from Avi Controller, then set this to False. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    role_mapping_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Defines the mapping from OpenStack role names to avi local role names. For an OpenStack role, this mapping is consulted only if there is no local Avi role with the same name as the OpenStack role. This is an ordered list and only the first matching entry is used. You can use '*' to match all OpenStack role names."),
        schema=OpenStackRoleMapping.properties_schema,
        required=True,
        update_allowed=False,
    )
    role_mapping_schema = properties.Schema(
        properties.Schema.LIST,
        _("Defines the mapping from OpenStack role names to avi local role names. For an OpenStack role, this mapping is consulted only if there is no local Avi role with the same name as the OpenStack role. This is an ordered list and only the first matching entry is used. You can use '*' to match all OpenStack role names."),
        schema=role_mapping_item_schema,
        required=False,
        update_allowed=True,
    )
    use_internal_endpoints_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use internalURL for OpenStack endpoints instead of the default publicURL endpoints. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    admin_tenant_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("admin-tenant's UUID in OpenStack"),
        required=False,
        update_allowed=True,
    )
    config_drive_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If false, metadata service will be used instead of  config-drive functionality to retrieve SE VM metadata. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    auth_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("Auth URL for connecting to keystone. If this is specified, any value provided for keystone_host is ignored."),
        required=False,
        update_allowed=True,
    )
    insecure_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Allow self-signed certificates when communicating with https service endpoints. (Default: True)"),
        required=False,
        update_allowed=True,
    )
    intf_sec_ips_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If True, interface-secondary-ips method will be used for VIP association. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    external_networks_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If True, allow selection of networks marked as 'external' for management,  vip or data networks. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    neutron_rbac_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If True, enable neutron rbac discovery of networks shared across tenants/projects (Default: True)"),
        required=False,
        update_allowed=True,
    )
    map_admin_to_cloudadmin_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If True, map Avi 'admin' tenant to the admin_tenant of the Cloud. Else map Avi 'admin' to OpenStack 'admin' tenant. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    usable_network_uuids_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) A tenant can normally use its own networks and any networks shared with it. In addition, this field provides extra networks that are usable by all tenants. If VirtualService does not specify a network and auto_allocate_ip is set, then the first available network from this list will be chosen for IP allocation. "),
        required=True,
        update_allowed=False,
    )
    usable_network_uuids_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.1.1) A tenant can normally use its own networks and any networks shared with it. In addition, this field provides extra networks that are usable by all tenants. If VirtualService does not specify a network and auto_allocate_ip is set, then the first available network from this list will be chosen for IP allocation. "),
        schema=usable_network_uuids_item_schema,
        required=False,
        update_allowed=True,
    )
    nuage_vsd_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("Nuage VSD host name or IP address"),
        required=False,
        update_allowed=True,
    )
    nuage_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(" (Default: 8443)"),
        required=False,
        update_allowed=True,
    )
    nuage_username_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_password_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_organization_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_group_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("The Service Engine Group to use as template."),
        required=False,
        update_allowed=True,
    )
    contrail_plugin_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Contrail plugin mode. (deprecated) (Default: False)"),
        required=False,
        update_allowed=True,
    )
    contrail_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Contrail VNC endpoint url (example http://10.10.10.100:8082). By default, 'http://' scheme and 8082 port will be used if not provided in the url"),
        required=False,
        update_allowed=True,
    )
    name_owner_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If True, embed owner info in VIP port 'name', else embed owner info in 'device_id' field (Default: True)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'username',
        'password',
        'admin_tenant',
        'keystone_host',
        'mgmt_network_name',
        'privilege',
        'use_keystone_auth',
        'prov_name',
        'mgmt_network_uuid',
        'region',
        'hypervisor',
        'tenant_se',
        'import_keystone_tenants',
        'anti_affinity',
        'port_security',
        'security_groups',
        'allowed_address_pairs',
        'free_floatingips',
        'img_format',
        'use_admin_url',
        'role_mapping',
        'use_internal_endpoints',
        'admin_tenant_uuid',
        'config_drive',
        'auth_url',
        'insecure',
        'intf_sec_ips',
        'external_networks',
        'neutron_rbac',
        'map_admin_to_cloudadmin',
        'usable_network_uuids',
        'nuage_vsd_host',
        'nuage_port',
        'nuage_username',
        'nuage_password',
        'nuage_organization',
        'se_group_uuid',
        'contrail_plugin',
        'contrail_endpoint',
        'name_owner',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'username': username_schema,
        'password': password_schema,
        'admin_tenant': admin_tenant_schema,
        'keystone_host': keystone_host_schema,
        'mgmt_network_name': mgmt_network_name_schema,
        'privilege': privilege_schema,
        'use_keystone_auth': use_keystone_auth_schema,
        'prov_name': prov_name_schema,
        'mgmt_network_uuid': mgmt_network_uuid_schema,
        'region': region_schema,
        'hypervisor': hypervisor_schema,
        'tenant_se': tenant_se_schema,
        'import_keystone_tenants': import_keystone_tenants_schema,
        'anti_affinity': anti_affinity_schema,
        'port_security': port_security_schema,
        'security_groups': security_groups_schema,
        'allowed_address_pairs': allowed_address_pairs_schema,
        'free_floatingips': free_floatingips_schema,
        'img_format': img_format_schema,
        'use_admin_url': use_admin_url_schema,
        'role_mapping': role_mapping_schema,
        'use_internal_endpoints': use_internal_endpoints_schema,
        'admin_tenant_uuid': admin_tenant_uuid_schema,
        'config_drive': config_drive_schema,
        'auth_url': auth_url_schema,
        'insecure': insecure_schema,
        'intf_sec_ips': intf_sec_ips_schema,
        'external_networks': external_networks_schema,
        'neutron_rbac': neutron_rbac_schema,
        'map_admin_to_cloudadmin': map_admin_to_cloudadmin_schema,
        'usable_network_uuids': usable_network_uuids_schema,
        'nuage_vsd_host': nuage_vsd_host_schema,
        'nuage_port': nuage_port_schema,
        'nuage_username': nuage_username_schema,
        'nuage_password': nuage_password_schema,
        'nuage_organization': nuage_organization_schema,
        'se_group_uuid': se_group_uuid_schema,
        'contrail_plugin': contrail_plugin_schema,
        'contrail_endpoint': contrail_endpoint_schema,
        'name_owner': name_owner_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'role_mapping': getattr(OpenStackRoleMapping, 'field_references', {}),
    }



class RancherConfiguration(object):
    # all schemas
    rancher_servers_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("List of Rancher servers; In case of a load balanced Rancher multi cluster, use Virtual IP of the cluster"),
        required=True,
        update_allowed=False,
    )
    rancher_servers_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of Rancher servers; In case of a load balanced Rancher multi cluster, use Virtual IP of the cluster"),
        schema=rancher_servers_item_schema,
        required=False,
        update_allowed=True,
    )
    access_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("Access key"),
        required=False,
        update_allowed=True,
    )
    secret_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("Secret key"),
        required=False,
        update_allowed=True,
    )
    container_port_match_http_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService (Default: True)"),
        required=False,
        update_allowed=True,
    )
    http_container_ports_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        required=True,
        update_allowed=False,
    )
    http_container_ports_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        schema=http_container_ports_item_schema,
        required=False,
        update_allowed=True,
    )
    east_west_placement_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Match against this prefix when placing east-west VSs on SEs "),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_deployment_method_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use Fleet/SSH for SE deployment (Default: SE_CREATE_SSH)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['SE_CREATE_FLEET', 'SE_CREATE_SSH']),
        ],
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Optional fleet remote endpoint if fleet is used for SE deployment"),
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Docker registry for ServiceEngine image"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_spawn_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("New SE spawn rate per minute (Default: 25)"),
        required=False,
        update_allowed=True,
    )
    app_sync_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Sync frequency in seconds with frameworks (Default: 60)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_se_creation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE creation (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_frontend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for front end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    disable_auto_backend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for back end services (Default: False)"),
        required=False,
        update_allowed=True,
    )
    use_container_ip_port_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use container IP address:port for pool instead of host IP address:hostport. This mode is applicable if the container IP is reachable (not a private NATed IP) from other hosts in a routed environment for containers (Default: False)"),
        required=False,
        update_allowed=True,
    )
    se_volume_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host volume to be used as a disk for Avi SE, This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    coredump_directory_schema = properties.Schema(
        properties.Schema.STRING,
        _("Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    ssh_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Deprecated in: 17.1.1) Parameters for SSH SE deployment"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    enable_event_subscription_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Docker event subscription (Default: True)"),
        required=False,
        update_allowed=True,
    )
    feproxy_container_port_as_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("For Front End proxies, use container port as service port (Default: False)"),
        required=False,
        update_allowed=True,
    )
    services_accessible_all_interfaces_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Make service ports accessible on all Host interfaces in addition to East-West VIP and/or bridge IP. Usually enabled AWS clusters to export East-West services on Host interface (Default: False)"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies (Default: True)"),
        required=False,
        update_allowed=True,
    )
    se_exclude_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Exclude hosts with attributes for SE creation"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_exclude_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Exclude hosts with attributes for SE creation"),
        schema=se_exclude_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    se_include_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("Create SEs just on hosts with include attributes"),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_include_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Create SEs just on hosts with include attributes"),
        schema=se_include_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    nuage_controller_schema = properties.Schema(
        properties.Schema.MAP,
        _("Nuage Overlay SDN Controller information"),
        schema=NuageSDNController.properties_schema,
        required=False,
        update_allowed=True,
    )
    use_controller_image_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, use controller generated SE docker image via fileservice, else use docker repository image as defined by docker_registry_se (Default: False)"),
        required=False,
        update_allowed=True,
    )
    ssh_user_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.1.1) Cloud connector user uuid for SSH to hosts You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'rancher_servers',
        'access_key',
        'secret_key',
        'container_port_match_http_service',
        'http_container_ports',
        'east_west_placement_subnet',
        'se_deployment_method',
        'fleet_endpoint',
        'docker_registry_se',
        'se_spawn_rate',
        'app_sync_frequency',
        'disable_auto_se_creation',
        'disable_auto_frontend_service_sync',
        'disable_auto_backend_service_sync',
        'use_container_ip_port',
        'se_volume',
        'coredump_directory',
        'ssh_se_deployment',
        'enable_event_subscription',
        'feproxy_container_port_as_service',
        'services_accessible_all_interfaces',
        'feproxy_vips_enable_proxy_arp',
        'se_exclude_attributes',
        'se_include_attributes',
        'nuage_controller',
        'use_controller_image',
        'ssh_user_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'rancher_servers': rancher_servers_schema,
        'access_key': access_key_schema,
        'secret_key': secret_key_schema,
        'container_port_match_http_service': container_port_match_http_service_schema,
        'http_container_ports': http_container_ports_schema,
        'east_west_placement_subnet': east_west_placement_subnet_schema,
        'se_deployment_method': se_deployment_method_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'docker_registry_se': docker_registry_se_schema,
        'se_spawn_rate': se_spawn_rate_schema,
        'app_sync_frequency': app_sync_frequency_schema,
        'disable_auto_se_creation': disable_auto_se_creation_schema,
        'disable_auto_frontend_service_sync': disable_auto_frontend_service_sync_schema,
        'disable_auto_backend_service_sync': disable_auto_backend_service_sync_schema,
        'use_container_ip_port': use_container_ip_port_schema,
        'se_volume': se_volume_schema,
        'coredump_directory': coredump_directory_schema,
        'ssh_se_deployment': ssh_se_deployment_schema,
        'enable_event_subscription': enable_event_subscription_schema,
        'feproxy_container_port_as_service': feproxy_container_port_as_service_schema,
        'services_accessible_all_interfaces': services_accessible_all_interfaces_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'se_exclude_attributes': se_exclude_attributes_schema,
        'se_include_attributes': se_include_attributes_schema,
        'nuage_controller': nuage_controller_schema,
        'use_controller_image': use_controller_image_schema,
        'ssh_user_uuid': ssh_user_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_se_deployment': getattr(SSHSeDeployment, 'field_references', {}),
        'east_west_placement_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'nuage_controller': getattr(NuageSDNController, 'field_references', {}),
        'se_exclude_attributes': getattr(MesosAttribute, 'field_references', {}),
        'se_include_attributes': getattr(MesosAttribute, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'ssh_user_uuid': 'cloudconnectoruser',
    }



class Cloud(AviResource):
    resource_name = "cloud"
    # all schemas
    version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _("Cloud type (Default: CLOUD_NONE)"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['CLOUD_VCENTER', 'CLOUD_DOCKER_UCP', 'CLOUD_APIC', 'CLOUD_OPENSTACK', 'CLOUD_MESOS', 'CLOUD_RANCHER', 'CLOUD_VCA', 'CLOUD_LINUXSERVER', 'CLOUD_OSHIFT_K8S', 'CLOUD_AWS', 'CLOUD_NONE']),
        ],
    )
    vcenter_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vCenterConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    openstack_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=OpenStackConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    aws_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AwsConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    apic_mode_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(" (Default: False)"),
        required=False,
        update_allowed=True,
    )
    apic_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=APICConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    cloudstack_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=CloudStackConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    vca_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vCloudAirConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    mesos_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    proxy_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ProxyConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    linuxserver_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=LinuxServerConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    docker_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DockerConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    rancher_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=RancherConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    oshiftk8s_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=OShiftK8SConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    dhcp_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Select the IP address management scheme (Default: False)"),
        required=False,
        update_allowed=True,
    )
    mtu_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("MTU setting for the cloud (Units: BYTES) (Default: 1500)"),
        required=False,
        update_allowed=True,
    )
    prefer_static_routes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Prefer static routes over interface routes during VirtualService placement. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    enable_vip_static_routes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use static routes for VIP side network resolution during VirtualService placement. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    obj_name_prefix_schema = properties.Schema(
        properties.Schema.STRING,
        _("Default prefix for all automatically created objects in this cloud. This prefix can be overridden by the SE-Group template."),
        required=False,
        update_allowed=True,
    )
    license_type_schema = properties.Schema(
        properties.Schema.STRING,
        _("If no license type is specified then default license enforcement for the cloud type is chosen. The default mappings are Container Cloud is Max Ses, OpenStack and VMware is cores and linux it is Sockets."),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['LIC_SOCKETS', 'LIC_CORES', 'LIC_HOSTS', 'LIC_BACKEND_SERVERS']),
        ],
    )
    ipam_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Ipam Profile for the cloud. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    dns_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("DNS Profile for the cloud. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    east_west_ipam_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Ipam Profile for East-West services. Warning - Please use virtual subnets in this IPAM profile that do not conflict with the underlay networks or any overlay networks in the cluster. For example in AWS and GCP, 169.254.0.0/16 is used for storing instance metadata. Hence, it should not be used in this profile. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    east_west_dns_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("DNS Profile for East-West services. You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    nsx_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.1.1) Configuration parameters for NSX Manager"),
        schema=NsxConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'version',
        'name',
        'vtype',
        'vcenter_configuration',
        'openstack_configuration',
        'aws_configuration',
        'apic_mode',
        'apic_configuration',
        'cloudstack_configuration',
        'vca_configuration',
        'mesos_configuration',
        'proxy_configuration',
        'linuxserver_configuration',
        'docker_configuration',
        'rancher_configuration',
        'oshiftk8s_configuration',
        'dhcp_enabled',
        'mtu',
        'prefer_static_routes',
        'enable_vip_static_routes',
        'obj_name_prefix',
        'license_type',
        'ipam_provider_uuid',
        'dns_provider_uuid',
        'east_west_ipam_provider_uuid',
        'east_west_dns_provider_uuid',
        'nsx_configuration',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'version': version_schema,
        'name': name_schema,
        'vtype': vtype_schema,
        'vcenter_configuration': vcenter_configuration_schema,
        'openstack_configuration': openstack_configuration_schema,
        'aws_configuration': aws_configuration_schema,
        'apic_mode': apic_mode_schema,
        'apic_configuration': apic_configuration_schema,
        'cloudstack_configuration': cloudstack_configuration_schema,
        'vca_configuration': vca_configuration_schema,
        'mesos_configuration': mesos_configuration_schema,
        'proxy_configuration': proxy_configuration_schema,
        'linuxserver_configuration': linuxserver_configuration_schema,
        'docker_configuration': docker_configuration_schema,
        'rancher_configuration': rancher_configuration_schema,
        'oshiftk8s_configuration': oshiftk8s_configuration_schema,
        'dhcp_enabled': dhcp_enabled_schema,
        'mtu': mtu_schema,
        'prefer_static_routes': prefer_static_routes_schema,
        'enable_vip_static_routes': enable_vip_static_routes_schema,
        'obj_name_prefix': obj_name_prefix_schema,
        'license_type': license_type_schema,
        'ipam_provider_uuid': ipam_provider_uuid_schema,
        'dns_provider_uuid': dns_provider_uuid_schema,
        'east_west_ipam_provider_uuid': east_west_ipam_provider_uuid_schema,
        'east_west_dns_provider_uuid': east_west_dns_provider_uuid_schema,
        'nsx_configuration': nsx_configuration_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'vca_configuration': getattr(vCloudAirConfiguration, 'field_references', {}),
        'rancher_configuration': getattr(RancherConfiguration, 'field_references', {}),
        'mesos_configuration': getattr(MesosConfiguration, 'field_references', {}),
        'nsx_configuration': getattr(NsxConfiguration, 'field_references', {}),
        'east_west_ipam_provider_uuid': 'ipamdnsproviderprofile',
        'proxy_configuration': getattr(ProxyConfiguration, 'field_references', {}),
        'east_west_dns_provider_uuid': 'ipamdnsproviderprofile',
        'docker_configuration': getattr(DockerConfiguration, 'field_references', {}),
        'openstack_configuration': getattr(OpenStackConfiguration, 'field_references', {}),
        'dns_provider_uuid': 'ipamdnsproviderprofile',
        'linuxserver_configuration': getattr(LinuxServerConfiguration, 'field_references', {}),
        'apic_configuration': getattr(APICConfiguration, 'field_references', {}),
        'oshiftk8s_configuration': getattr(OShiftK8SConfiguration, 'field_references', {}),
        'aws_configuration': getattr(AwsConfiguration, 'field_references', {}),
        'ipam_provider_uuid': 'ipamdnsproviderprofile',
        'cloudstack_configuration': getattr(CloudStackConfiguration, 'field_references', {}),
        'vcenter_configuration': getattr(vCenterConfiguration, 'field_references', {}),
    }



def resource_mapping():
    return {
        'Avi::LBaaS::Cloud': Cloud,
        'Avi::LBaaS::CloudConnectorUser': CloudConnectorUser,
    }

