# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from common import *
from options import *
from system import *


class vCloudAirConfiguration(object):
    # all schemas
    vca_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir username"),
        required=True,
        update_allowed=True,
    )
    vca_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir password"),
        required=True,
        update_allowed=True,
    )
    vca_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir host address"),
        required=True,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir access mode"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WRITE_ACCESS', 'READ_ACCESS', 'NO_ACCESS']),
        ],
    )
    vca_instance_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir instance ID"),
        required=True,
        update_allowed=True,
    )
    vca_orgnization_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir orgnization ID"),
        required=True,
        update_allowed=True,
    )
    vca_vdc_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir virtual data center name"),
        required=True,
        update_allowed=True,
    )
    vca_mgmt_network_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCloudAir management network"),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'vca_username',
        'vca_password',
        'vca_host',
        'privilege',
        'vca_instance',
        'vca_orgnization',
        'vca_vdc',
        'vca_mgmt_network',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'vca_username': vca_username_schema,
        'vca_password': vca_password_schema,
        'vca_host': vca_host_schema,
        'privilege': privilege_schema,
        'vca_instance': vca_instance_schema,
        'vca_orgnization': vca_orgnization_schema,
        'vca_vdc': vca_vdc_schema,
        'vca_mgmt_network': vca_mgmt_network_schema,
    }




class AwsZoneConfig(object):
    # all schemas
    availability_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _("Availability zone"),
        required=True,
        update_allowed=True,
    )
    mgmt_network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name or CIDR of the network in the Availability Zone that will be used as management network."),
        required=True,
        update_allowed=True,
    )
    mgmt_network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the network in the Availability Zone that will be used as management network."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'availability_zone',
        'mgmt_network_name',
        'mgmt_network_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'availability_zone': availability_zone_schema,
        'mgmt_network_name': mgmt_network_name_schema,
        'mgmt_network_uuid': mgmt_network_uuid_schema,
    }




class CloudStackConfiguration(object):
    # all schemas
    api_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("CloudStack API URL"),
        required=True,
        update_allowed=True,
    )
    access_key_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("CloudStack API Key"),
        required=True,
        update_allowed=True,
    )
    secret_access_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("CloudStack Secret Key"),
        required=True,
        update_allowed=True,
    )
    mgmt_network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Management network name"),
        required=True,
        update_allowed=True,
    )
    mgmt_network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Management network name"),
        required=False,
        update_allowed=True,
    )
    cntr_public_ip_schema = properties.Schema(
        properties.Schema.STRING,
        _("If controller's management IP is in a private network, a publicly accessible IP to reach the controller."),
        required=False,
        update_allowed=True,
    )
    hypervisor_schema = properties.Schema(
        properties.Schema.STRING,
        _("Default hypervisor type"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['DEFAULT', 'VMWARE_VSAN', 'VMWARE_ESX', 'KVM']),
        ],
    )

    # properties list
    PROPERTIES = (
        'api_url',
        'access_key_id',
        'secret_access_key',
        'mgmt_network_name',
        'mgmt_network_uuid',
        'cntr_public_ip',
        'hypervisor',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'api_url': api_url_schema,
        'access_key_id': access_key_id_schema,
        'secret_access_key': secret_access_key_schema,
        'mgmt_network_name': mgmt_network_name_schema,
        'mgmt_network_uuid': mgmt_network_uuid_schema,
        'cntr_public_ip': cntr_public_ip_schema,
        'hypervisor': hypervisor_schema,
    }




class MesosSeResources(object):
    # all schemas
    attribute_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute (Fleet or Mesos) key of Hosts"),
        required=True,
        update_allowed=True,
    )
    attribute_value_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute (Fleet or Mesos) value of Hosts"),
        required=True,
        update_allowed=True,
    )
    cpu_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Obsolete - ignored"),
        required=False,
        update_allowed=True,
    )
    memory_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Obsolete - ignored"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'attribute_key',
        'attribute_value',
        'cpu',
        'memory',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'attribute_key': attribute_key_schema,
        'attribute_value': attribute_value_schema,
        'cpu': cpu_schema,
        'memory': memory_schema,
    }




class HostAttributes(object):
    # all schemas
    attr_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    attr_val_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'attr_key',
        'attr_val',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'attr_key': attr_key_schema,
        'attr_val': attr_val_schema,
    }




class LinuxServerHost(object):
    # all schemas
    host_ip_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    host_attr_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=HostAttributes.properties_schema,
        required=True,
        update_allowed=False,
    )
    host_attr_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=host_attr_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'host_ip',
        'host_attr',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'host_ip': host_ip_schema,
        'host_attr': host_attr_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'host_attr': getattr(HostAttributes, 'field_references', {}),
        'host_ip': getattr(IpAddr, 'field_references', {}),
    }



class vCenterConfiguration(object):
    # all schemas
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username Avi Vantage will use when authenticating with vCenter."),
        required=False,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password Avi Vantage will use when authenticating with vCenter."),
        required=False,
        update_allowed=True,
    )
    vcenter_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCenter hostname or IP address."),
        required=False,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _("Set the access mode to vCenter as either Read, which allows Avi to discover networks and servers, or Write, which also allows Avi to create Service Engines and configure their network properties."),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WRITE_ACCESS', 'READ_ACCESS', 'NO_ACCESS']),
        ],
    )
    datacenter_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Datacenter for virtual infrastructure discovery"),
        required=False,
        update_allowed=True,
    )
    management_network_schema = properties.Schema(
        properties.Schema.STRING,
        _("Management network to use for Avi Service Engines You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    management_ip_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Management subnet to use for Avi Service Engines"),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    vcenter_template_se_location_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Service Engine Template in Vcenter to be used for creating Service Engines"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'username',
        'password',
        'vcenter_url',
        'privilege',
        'datacenter_uuid',
        'management_network',
        'management_ip_subnet',
        'vcenter_template_se_location',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'username': username_schema,
        'password': password_schema,
        'vcenter_url': vcenter_url_schema,
        'privilege': privilege_schema,
        'datacenter_uuid': datacenter_uuid_schema,
        'management_network': management_network_schema,
        'management_ip_subnet': management_ip_subnet_schema,
        'vcenter_template_se_location': vcenter_template_se_location_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'management_ip_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'management_network': 'vimgrnwruntime',
    }



class CloudConnectorUser(AviResource):
    resource_name = "cloudconnectoruser"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    private_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    public_key_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'private_key',
        'public_key',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'private_key': private_key_schema,
        'public_key': public_key_schema,
    }




class NuageSDNController(object):
    # all schemas
    nuage_vsd_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("Nuage VSD host name or IP address"),
        required=False,
        update_allowed=True,
    )
    nuage_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_username_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_password_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_organization_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_domain_schema = properties.Schema(
        properties.Schema.STRING,
        _("Domain to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_zone_schema = properties.Schema(
        properties.Schema.STRING,
        _("Zone to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_network_schema = properties.Schema(
        properties.Schema.STRING,
        _("Network to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_enterprise_schema = properties.Schema(
        properties.Schema.STRING,
        _("Enterprise to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_user_schema = properties.Schema(
        properties.Schema.STRING,
        _("User to be used for SE creation"),
        required=False,
        update_allowed=True,
    )
    se_policy_group_schema = properties.Schema(
        properties.Schema.STRING,
        _("Policy Group to be used for SE creation"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'nuage_vsd_host',
        'nuage_port',
        'nuage_username',
        'nuage_password',
        'nuage_organization',
        'se_domain',
        'se_zone',
        'se_network',
        'se_enterprise',
        'se_user',
        'se_policy_group',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'nuage_vsd_host': nuage_vsd_host_schema,
        'nuage_port': nuage_port_schema,
        'nuage_username': nuage_username_schema,
        'nuage_password': nuage_password_schema,
        'nuage_organization': nuage_organization_schema,
        'se_domain': se_domain_schema,
        'se_zone': se_zone_schema,
        'se_network': se_network_schema,
        'se_enterprise': se_enterprise_schema,
        'se_user': se_user_schema,
        'se_policy_group': se_policy_group_schema,
    }




class SSHSeDeployment(object):
    # all schemas
    ssh_user_schema = properties.Schema(
        properties.Schema.STRING,
        _("Username for SSH access to hosts"),
        required=False,
        update_allowed=True,
    )
    sudo_user_schema = properties.Schema(
        properties.Schema.STRING,
        _("Username for sudo"),
        required=False,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("Password for ssh and/or sudo"),
        required=False,
        update_allowed=True,
    )
    host_os_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host OS distribution e.g. COREOS, UBUNTU, REDHAT"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ssh_user',
        'sudo_user',
        'password',
        'host_os',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ssh_user': ssh_user_schema,
        'sudo_user': sudo_user_schema,
        'password': password_schema,
        'host_os': host_os_schema,
    }




class MarathonSeDeployment(object):
    # all schemas
    host_os_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host OS distribution e.g. COREOS, UBUNTU, REDHAT"),
        required=False,
        update_allowed=True,
    )
    docker_image_schema = properties.Schema(
        properties.Schema.STRING,
        _("Docker image to be used for Avi SE installation e.g. fedora, ubuntu"),
        required=False,
        update_allowed=True,
    )
    uris_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    uris_schema = properties.Schema(
        properties.Schema.LIST,
        _("URIs to be resolved for starting the application"),
        schema=uris_item_schema,
        required=False,
        update_allowed=True,
    )
    resource_roles_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    resource_roles_schema = properties.Schema(
        properties.Schema.LIST,
        _("Accepted resource roles for SEs"),
        schema=resource_roles_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'host_os',
        'docker_image',
        'uris',
        'resource_roles',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'host_os': host_os_schema,
        'docker_image': docker_image_schema,
        'uris': uris_schema,
        'resource_roles': resource_roles_schema,
    }




class MarathonConfiguration(object):
    # all schemas
    marathon_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("Marathon API URL of the form http://host:port"),
        required=False,
        update_allowed=True,
    )
    marathon_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("Username for Basic Auth"),
        required=False,
        update_allowed=True,
    )
    marathon_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("Password for Basic Auth"),
        required=False,
        update_allowed=True,
    )
    public_port_range_schema = properties.Schema(
        properties.Schema.MAP,
        _("Public port range allocated to this Marathon framework instance"),
        schema=PortRange.properties_schema,
        required=False,
        update_allowed=True,
    )
    private_port_range_schema = properties.Schema(
        properties.Schema.MAP,
        _("Private port range allocated to this Marathon framework instance"),
        schema=PortRange.properties_schema,
        required=False,
        update_allowed=True,
    )
    framework_tag_schema = properties.Schema(
        properties.Schema.STRING,
        _("Framework tag to be used in Virtualservice name. Default is framework name from Mesos. If this tag is altered atruntime, Virtualservices will be deleted and re-created"),
        required=False,
        update_allowed=True,
    )
    vs_name_tag_framework_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Tag VS name with framework name or framework_tag. Useful in deployments with multiple frameworks"),
        required=False,
        update_allowed=True,
    )
    use_token_auth_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use Token based authentication instead of basic authentication. Token is refreshed every 5 minutes."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'marathon_url',
        'marathon_username',
        'marathon_password',
        'public_port_range',
        'private_port_range',
        'framework_tag',
        'vs_name_tag_framework',
        'use_token_auth',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'marathon_url': marathon_url_schema,
        'marathon_username': marathon_username_schema,
        'marathon_password': marathon_password_schema,
        'public_port_range': public_port_range_schema,
        'private_port_range': private_port_range_schema,
        'framework_tag': framework_tag_schema,
        'vs_name_tag_framework': vs_name_tag_framework_schema,
        'use_token_auth': use_token_auth_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'public_port_range': getattr(PortRange, 'field_references', {}),
        'private_port_range': getattr(PortRange, 'field_references', {}),
    }



class APICConfiguration(object):
    # all schemas
    apic_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    apic_name_schema = properties.Schema(
        properties.Schema.LIST,
        _("The hostname or IP address of the APIC controller."),
        schema=apic_name_item_schema,
        required=False,
        update_allowed=True,
    )
    apic_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username Avi Vantage will use when authenticating with APIC."),
        required=False,
        update_allowed=True,
    )
    apic_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password Avi Vantage will use when authenticating with APIC."),
        required=False,
        update_allowed=True,
    )
    apic_admin_tenant_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of the Avi specific tenant created within APIC."),
        required=False,
        update_allowed=True,
    )
    apic_vendor_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    apic_product_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    deployment_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    apic_domain_schema = properties.Schema(
        properties.Schema.STRING,
        _("vCenter's virtual machine manager domain within APIC."),
        required=False,
        update_allowed=True,
    )
    avi_controller_username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username APIC will use when authenticating with Avi Vantage."),
        required=False,
        update_allowed=True,
    )
    avi_controller_password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password APIC will use when authenticating with Avi Vantage."),
        required=False,
        update_allowed=True,
    )
    version_schema = properties.Schema(
        properties.Schema.STRING,
        _("AVI Device Package Version"),
        required=False,
        update_allowed=True,
    )
    minor_schema = properties.Schema(
        properties.Schema.STRING,
        _("AVI Device Package Minor Version"),
        required=False,
        update_allowed=True,
    )
    context_aware_schema = properties.Schema(
        properties.Schema.STRING,
        _("Context aware for supporting Service Graphs across VRFs"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['SINGLE_CONTEXT', 'MULTI_CONTEXT']),
        ],
    )

    # properties list
    PROPERTIES = (
        'apic_name',
        'apic_username',
        'apic_password',
        'apic_admin_tenant',
        'apic_vendor',
        'apic_product',
        'deployment',
        'apic_domain',
        'avi_controller_username',
        'avi_controller_password',
        'version',
        'minor',
        'context_aware',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'apic_name': apic_name_schema,
        'apic_username': apic_username_schema,
        'apic_password': apic_password_schema,
        'apic_admin_tenant': apic_admin_tenant_schema,
        'apic_vendor': apic_vendor_schema,
        'apic_product': apic_product_schema,
        'deployment': deployment_schema,
        'apic_domain': apic_domain_schema,
        'avi_controller_username': avi_controller_username_schema,
        'avi_controller_password': avi_controller_password_schema,
        'version': version_schema,
        'minor': minor_schema,
        'context_aware': context_aware_schema,
    }




class AwsConfiguration(object):
    # all schemas
    access_key_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("AWS access key ID"),
        required=False,
        update_allowed=True,
    )
    secret_access_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("AWS secret access key"),
        required=False,
        update_allowed=True,
    )
    region_schema = properties.Schema(
        properties.Schema.STRING,
        _("AWS region"),
        required=False,
        update_allowed=True,
    )
    vpc_schema = properties.Schema(
        properties.Schema.STRING,
        _("VPC name"),
        required=False,
        update_allowed=True,
    )
    vpc_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("VPC ID"),
        required=True,
        update_allowed=True,
    )
    zones_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AwsZoneConfig.properties_schema,
        required=True,
        update_allowed=False,
    )
    zones_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=zones_item_schema,
        required=False,
        update_allowed=True,
    )
    route53_integration_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If enabled, create/update DNS entries in Route53 zones"),
        required=False,
        update_allowed=True,
    )
    free_elasticips_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Free unused elastic IP addresses."),
        required=False,
        update_allowed=True,
    )
    use_iam_roles_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use IAM roles instead of access and secret key."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'access_key_id',
        'secret_access_key',
        'region',
        'vpc',
        'vpc_id',
        'zones',
        'route53_integration',
        'free_elasticips',
        'use_iam_roles',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'access_key_id': access_key_id_schema,
        'secret_access_key': secret_access_key_schema,
        'region': region_schema,
        'vpc': vpc_schema,
        'vpc_id': vpc_id_schema,
        'zones': zones_schema,
        'route53_integration': route53_integration_schema,
        'free_elasticips': free_elasticips_schema,
        'use_iam_roles': use_iam_roles_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'zones': getattr(AwsZoneConfig, 'field_references', {}),
    }



class FeProxyRoutePublishConfig(object):
    # all schemas
    mode_schema = properties.Schema(
        properties.Schema.STRING,
        _("Publish ECMP route to upstream router for VIP"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['FE_PROXY_ROUTE_PUBLISH_NONE', 'FE_PROXY_ROUTE_PUBLISH_QUAGGA_WEBAPP']),
        ],
    )
    token_schema = properties.Schema(
        properties.Schema.STRING,
        _("Token for tracking changes"),
        required=False,
        update_allowed=True,
    )
    subnet_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Subnet for publisher"),
        required=False,
        update_allowed=True,
    )
    publisher_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Listener port for publisher"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'mode',
        'token',
        'subnet',
        'publisher_port',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'mode': mode_schema,
        'token': token_schema,
        'subnet': subnet_schema,
        'publisher_port': publisher_port_schema,
    }




class MesosAttribute(object):
    # all schemas
    attribute_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute to match"),
        required=True,
        update_allowed=True,
    )
    value_schema = properties.Schema(
        properties.Schema.STRING,
        _("Attribute value. If not set, match any value"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'attribute',
        'value',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'attribute': attribute_schema,
        'value': value_schema,
    }




class OpenStackRoleMapping(object):
    # all schemas
    os_role_schema = properties.Schema(
        properties.Schema.STRING,
        _("Role name in OpenStack"),
        required=True,
        update_allowed=True,
    )
    avi_role_schema = properties.Schema(
        properties.Schema.STRING,
        _("Role name in Avi"),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'os_role',
        'avi_role',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'os_role': os_role_schema,
        'avi_role': avi_role_schema,
    }




class DockerRegistry(object):
    # all schemas
    registry_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi ServiceEngine repository name. For private registry, it's registry:port/repository, for public registry, it's registry/repository."),
        required=False,
        update_allowed=True,
    )
    private_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Set if docker registry is private. Avi controller will not attempt to push SE image to the registry, unless se_repository_push is set"),
        required=False,
        update_allowed=True,
    )
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _("Username for docker registry"),
        required=False,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("Password for docker registry"),
        required=False,
        update_allowed=True,
    )
    se_repository_push_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Avi Controller will push ServiceEngine image to docker repository"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'registry',
        'private',
        'username',
        'password',
        'se_repository_push',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'registry': registry_schema,
        'private': private_schema,
        'username': username_schema,
        'password': password_schema,
        'se_repository_push': se_repository_push_schema,
    }




class LinuxServerConfiguration(object):
    # all schemas
    ssh_attr_schema = properties.Schema(
        properties.Schema.MAP,
        _("Parameters for SSH to hosts"),
        schema=SSHSeDeployment.properties_schema,
        required=True,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Private docker registry for SE image storage"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    hosts_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=LinuxServerHost.properties_schema,
        required=True,
        update_allowed=False,
    )
    hosts_schema = properties.Schema(
        properties.Schema.LIST,
        _(""),
        schema=hosts_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ssh_attr',
        'docker_registry_se',
        'hosts',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ssh_attr': ssh_attr_schema,
        'docker_registry_se': docker_registry_se_schema,
        'hosts': hosts_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_attr': getattr(SSHSeDeployment, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'hosts': getattr(LinuxServerHost, 'field_references', {}),
    }



class MesosConfiguration(object):
    # all schemas
    marathon_configurations_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MarathonConfiguration.properties_schema,
        required=True,
        update_allowed=False,
    )
    marathon_configurations_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of Marathon frameworks."),
        schema=marathon_configurations_item_schema,
        required=False,
        update_allowed=True,
    )
    mesos_url_schema = properties.Schema(
        properties.Schema.STRING,
        _("Mesos URL of the form http://host:port"),
        required=False,
        update_allowed=True,
    )
    vip_schema = properties.Schema(
        properties.Schema.MAP,
        _("VIP to be used by all East-West apps on all Hosts. Preferrably use an address from outside the subnet"),
        schema=IpAddr.properties_schema,
        required=False,
        update_allowed=True,
    )
    use_bridge_ip_as_vip_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use Bridge IP on each Host as VIP"),
        required=False,
        update_allowed=True,
    )
    container_port_match_http_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService"),
        required=False,
        update_allowed=True,
    )
    http_container_ports_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=False,
    )
    http_container_ports_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        schema=http_container_ports_item_schema,
        required=False,
        update_allowed=True,
    )
    east_west_placement_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Match against this prefix when placing east-west VSs on SEs (Mesos mode only)"),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_deployment_method_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use Fleet/SSH/Marathon for SE deployment"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['MESOS_SE_CREATE_FLEET', 'MESOS_SE_CREATE_SSH', 'MESOS_SE_CREATE_MARATHON']),
        ],
    )
    use_controller_image_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, use controller generated SE docker image via fileservice, else use docker repository image as defined by docker_registry_se"),
        required=False,
        update_allowed=True,
    )
    marathon_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("Options for Marathon SE deployment"),
        schema=MarathonSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Optional fleet remote endpoint if fleet is used for SE deployment"),
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Docker registry for ServiceEngine image"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_spawn_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("New SE spawn rate per minute"),
        required=False,
        update_allowed=True,
    )
    app_sync_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Sync frequency in seconds with frameworks"),
        required=False,
        update_allowed=True,
    )
    disable_auto_se_creation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE creation"),
        required=False,
        update_allowed=True,
    )
    disable_auto_frontend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for front end services"),
        required=False,
        update_allowed=True,
    )
    disable_auto_backend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for back end services"),
        required=False,
        update_allowed=True,
    )
    use_container_ip_port_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use container IP address:port for pool instead of host IP address:hostport. This mode is applicable if the container IP is reachable (not a private NATed IP) from other hosts in a routed environment for containers"),
        required=False,
        update_allowed=True,
    )
    feproxy_route_publish_schema = properties.Schema(
        properties.Schema.MAP,
        _("Publish ECMP route to upstream router for VIP"),
        schema=FeProxyRoutePublishConfig.properties_schema,
        required=False,
        update_allowed=True,
    )
    feproxy_bridge_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Name of second Linux bridge on Host providing connectivity for Front End proxies. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    se_resources_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosSeResources.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_resources_schema = properties.Schema(
        properties.Schema.LIST,
        _("Obsolete - ignored"),
        schema=se_resources_item_schema,
        required=False,
        update_allowed=True,
    )
    se_volume_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host volume to be used as a disk for Avi SE, This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    coredump_directory_schema = properties.Schema(
        properties.Schema.STRING,
        _("Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    ssh_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("Parameters for SSH SE deployment"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    enable_event_subscription_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Marathon event subscriptions"),
        required=False,
        update_allowed=True,
    )
    nuage_controller_schema = properties.Schema(
        properties.Schema.MAP,
        _("Nuage Overlay SDN Controller information"),
        schema=NuageSDNController.properties_schema,
        required=False,
        update_allowed=True,
    )
    all_vses_are_feproxy_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Consider all Virtualservices as Front End Proxies. Front End proxies are placed on specific SEs as opposed to Back End proxies placed on all SEs. Applicable where each service has its own VIP and VIP is reachable from anywhere"),
        required=False,
        update_allowed=True,
    )
    feproxy_container_port_as_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("For Front End proxies, use container port as service port"),
        required=False,
        update_allowed=True,
    )
    services_accessible_all_interfaces_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Make service ports accessible on all Host interfaces in addition to East/West VIP and/or bridge IP. Usually enabled AWS Mesos clusters to export East-West services on Host interface"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies"),
        required=False,
        update_allowed=True,
    )
    se_exclude_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_exclude_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Exclude hosts with attributes for SE creation"),
        schema=se_exclude_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    se_include_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_include_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Create SEs just on hosts with include attributes"),
        schema=se_include_attributes_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'marathon_configurations',
        'mesos_url',
        'vip',
        'use_bridge_ip_as_vip',
        'container_port_match_http_service',
        'http_container_ports',
        'east_west_placement_subnet',
        'se_deployment_method',
        'use_controller_image',
        'marathon_se_deployment',
        'fleet_endpoint',
        'docker_registry_se',
        'se_spawn_rate',
        'app_sync_frequency',
        'disable_auto_se_creation',
        'disable_auto_frontend_service_sync',
        'disable_auto_backend_service_sync',
        'use_container_ip_port',
        'feproxy_route_publish',
        'feproxy_bridge_name',
        'se_resources',
        'se_volume',
        'coredump_directory',
        'ssh_se_deployment',
        'enable_event_subscription',
        'nuage_controller',
        'all_vses_are_feproxy',
        'feproxy_container_port_as_service',
        'services_accessible_all_interfaces',
        'feproxy_vips_enable_proxy_arp',
        'se_exclude_attributes',
        'se_include_attributes',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'marathon_configurations': marathon_configurations_schema,
        'mesos_url': mesos_url_schema,
        'vip': vip_schema,
        'use_bridge_ip_as_vip': use_bridge_ip_as_vip_schema,
        'container_port_match_http_service': container_port_match_http_service_schema,
        'http_container_ports': http_container_ports_schema,
        'east_west_placement_subnet': east_west_placement_subnet_schema,
        'se_deployment_method': se_deployment_method_schema,
        'use_controller_image': use_controller_image_schema,
        'marathon_se_deployment': marathon_se_deployment_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'docker_registry_se': docker_registry_se_schema,
        'se_spawn_rate': se_spawn_rate_schema,
        'app_sync_frequency': app_sync_frequency_schema,
        'disable_auto_se_creation': disable_auto_se_creation_schema,
        'disable_auto_frontend_service_sync': disable_auto_frontend_service_sync_schema,
        'disable_auto_backend_service_sync': disable_auto_backend_service_sync_schema,
        'use_container_ip_port': use_container_ip_port_schema,
        'feproxy_route_publish': feproxy_route_publish_schema,
        'feproxy_bridge_name': feproxy_bridge_name_schema,
        'se_resources': se_resources_schema,
        'se_volume': se_volume_schema,
        'coredump_directory': coredump_directory_schema,
        'ssh_se_deployment': ssh_se_deployment_schema,
        'enable_event_subscription': enable_event_subscription_schema,
        'nuage_controller': nuage_controller_schema,
        'all_vses_are_feproxy': all_vses_are_feproxy_schema,
        'feproxy_container_port_as_service': feproxy_container_port_as_service_schema,
        'services_accessible_all_interfaces': services_accessible_all_interfaces_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'se_exclude_attributes': se_exclude_attributes_schema,
        'se_include_attributes': se_include_attributes_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_se_deployment': getattr(SSHSeDeployment, 'field_references', {}),
        'marathon_configurations': getattr(MarathonConfiguration, 'field_references', {}),
        'marathon_se_deployment': getattr(MarathonSeDeployment, 'field_references', {}),
        'nuage_controller': getattr(NuageSDNController, 'field_references', {}),
        'se_exclude_attributes': getattr(MesosAttribute, 'field_references', {}),
        'se_include_attributes': getattr(MesosAttribute, 'field_references', {}),
        'se_resources': getattr(MesosSeResources, 'field_references', {}),
        'vip': getattr(IpAddr, 'field_references', {}),
        'east_west_placement_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'feproxy_route_publish': getattr(FeProxyRoutePublishConfig, 'field_references', {}),
    }



class RancherConfiguration(object):
    # all schemas
    rancher_servers_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    rancher_servers_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of Rancher servers; In case of a load balanced Rancher multi cluster, use Virtual IP of the cluster"),
        schema=rancher_servers_item_schema,
        required=False,
        update_allowed=True,
    )
    access_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("Access key"),
        required=False,
        update_allowed=True,
    )
    secret_key_schema = properties.Schema(
        properties.Schema.STRING,
        _("Secret key"),
        required=False,
        update_allowed=True,
    )
    container_port_match_http_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService"),
        required=False,
        update_allowed=True,
    )
    http_container_ports_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=False,
    )
    http_container_ports_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        schema=http_container_ports_item_schema,
        required=False,
        update_allowed=True,
    )
    east_west_placement_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Match against this prefix when placing east-west VSs on SEs "),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_deployment_method_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use Fleet/SSH for SE deployment"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['SE_CREATE_FLEET', 'SE_CREATE_SSH']),
        ],
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Optional fleet remote endpoint if fleet is used for SE deployment"),
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Docker registry for ServiceEngine image"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_spawn_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("New SE spawn rate per minute"),
        required=False,
        update_allowed=True,
    )
    app_sync_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Sync frequency in seconds with frameworks"),
        required=False,
        update_allowed=True,
    )
    disable_auto_se_creation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE creation"),
        required=False,
        update_allowed=True,
    )
    disable_auto_frontend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for front end services"),
        required=False,
        update_allowed=True,
    )
    disable_auto_backend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for back end services"),
        required=False,
        update_allowed=True,
    )
    use_container_ip_port_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use container IP address:port for pool instead of host IP address:hostport. This mode is applicable if the container IP is reachable (not a private NATed IP) from other hosts in a routed environment for containers"),
        required=False,
        update_allowed=True,
    )
    se_volume_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host volume to be used as a disk for Avi SE, This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    coredump_directory_schema = properties.Schema(
        properties.Schema.STRING,
        _("Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    ssh_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("Parameters for SSH SE deployment"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    enable_event_subscription_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Docker event subscription"),
        required=False,
        update_allowed=True,
    )
    feproxy_container_port_as_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("For Front End proxies, use container port as service port"),
        required=False,
        update_allowed=True,
    )
    services_accessible_all_interfaces_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Make service ports accessible on all Host interfaces in addition to East/West VIP and/or bridge IP. Usually enabled AWS clusters to export East-West services on Host interface"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies"),
        required=False,
        update_allowed=True,
    )
    se_exclude_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_exclude_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Exclude hosts with attributes for SE creation"),
        schema=se_exclude_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    se_include_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_include_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Create SEs just on hosts with include attributes"),
        schema=se_include_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    nuage_controller_schema = properties.Schema(
        properties.Schema.MAP,
        _("Nuage Overlay SDN Controller information"),
        schema=NuageSDNController.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'rancher_servers',
        'access_key',
        'secret_key',
        'container_port_match_http_service',
        'http_container_ports',
        'east_west_placement_subnet',
        'se_deployment_method',
        'fleet_endpoint',
        'docker_registry_se',
        'se_spawn_rate',
        'app_sync_frequency',
        'disable_auto_se_creation',
        'disable_auto_frontend_service_sync',
        'disable_auto_backend_service_sync',
        'use_container_ip_port',
        'se_volume',
        'coredump_directory',
        'ssh_se_deployment',
        'enable_event_subscription',
        'feproxy_container_port_as_service',
        'services_accessible_all_interfaces',
        'feproxy_vips_enable_proxy_arp',
        'se_exclude_attributes',
        'se_include_attributes',
        'nuage_controller',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'rancher_servers': rancher_servers_schema,
        'access_key': access_key_schema,
        'secret_key': secret_key_schema,
        'container_port_match_http_service': container_port_match_http_service_schema,
        'http_container_ports': http_container_ports_schema,
        'east_west_placement_subnet': east_west_placement_subnet_schema,
        'se_deployment_method': se_deployment_method_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'docker_registry_se': docker_registry_se_schema,
        'se_spawn_rate': se_spawn_rate_schema,
        'app_sync_frequency': app_sync_frequency_schema,
        'disable_auto_se_creation': disable_auto_se_creation_schema,
        'disable_auto_frontend_service_sync': disable_auto_frontend_service_sync_schema,
        'disable_auto_backend_service_sync': disable_auto_backend_service_sync_schema,
        'use_container_ip_port': use_container_ip_port_schema,
        'se_volume': se_volume_schema,
        'coredump_directory': coredump_directory_schema,
        'ssh_se_deployment': ssh_se_deployment_schema,
        'enable_event_subscription': enable_event_subscription_schema,
        'feproxy_container_port_as_service': feproxy_container_port_as_service_schema,
        'services_accessible_all_interfaces': services_accessible_all_interfaces_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'se_exclude_attributes': se_exclude_attributes_schema,
        'se_include_attributes': se_include_attributes_schema,
        'nuage_controller': nuage_controller_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_se_deployment': getattr(SSHSeDeployment, 'field_references', {}),
        'east_west_placement_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'nuage_controller': getattr(NuageSDNController, 'field_references', {}),
        'se_exclude_attributes': getattr(MesosAttribute, 'field_references', {}),
        'se_include_attributes': getattr(MesosAttribute, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
    }



class DockerConfiguration(object):
    # all schemas
    ucp_nodes_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    ucp_nodes_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of Docker UCP nodes; In case of a load balanced UCP cluster, use Virtual IP of the cluster"),
        schema=ucp_nodes_item_schema,
        required=False,
        update_allowed=True,
    )
    client_tls_key_and_certificate_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the client TLS cert and key You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    ca_tls_key_and_certificate_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the UCP CA TLS cert and key You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    container_port_match_http_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Perform container port matching to create a HTTP Virtualservice instead of a TCP/UDP VirtualService"),
        required=False,
        update_allowed=True,
    )
    http_container_ports_item_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=True,
        update_allowed=False,
    )
    http_container_ports_schema = properties.Schema(
        properties.Schema.LIST,
        _("List of container ports that create a HTTP Virtualservice instead of a TCP/UDP VirtualService. Defaults to 80"),
        schema=http_container_ports_item_schema,
        required=False,
        update_allowed=True,
    )
    east_west_placement_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("Match against this prefix when placing east-west VSs on SEs "),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_deployment_method_schema = properties.Schema(
        properties.Schema.STRING,
        _("Use Fleet/SSH for SE deployment"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['SE_CREATE_FLEET', 'SE_CREATE_SSH']),
        ],
    )
    fleet_endpoint_schema = properties.Schema(
        properties.Schema.STRING,
        _("Optional fleet remote endpoint if fleet is used for SE deployment"),
        required=False,
        update_allowed=True,
    )
    docker_registry_se_schema = properties.Schema(
        properties.Schema.MAP,
        _("Docker registry for ServiceEngine image"),
        schema=DockerRegistry.properties_schema,
        required=False,
        update_allowed=True,
    )
    se_spawn_rate_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("New SE spawn rate per minute"),
        required=False,
        update_allowed=True,
    )
    app_sync_frequency_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Sync frequency in seconds with frameworks"),
        required=False,
        update_allowed=True,
    )
    disable_auto_se_creation_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable SE creation"),
        required=False,
        update_allowed=True,
    )
    disable_auto_frontend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for front end services"),
        required=False,
        update_allowed=True,
    )
    disable_auto_backend_service_sync_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Disable auto service sync for back end services"),
        required=False,
        update_allowed=True,
    )
    use_container_ip_port_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use container IP address:port for pool instead of host IP address:hostport. This mode is applicable if the container IP is reachable (not a private NATed IP) from other hosts in a routed environment for containers"),
        required=False,
        update_allowed=True,
    )
    se_volume_schema = properties.Schema(
        properties.Schema.STRING,
        _("Host volume to be used as a disk for Avi SE, This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    coredump_directory_schema = properties.Schema(
        properties.Schema.STRING,
        _("Directory to mount to check for core dumps on Service Engines. This will be mapped read only to /var/crash on any new Service Engines. This is a disruptive change"),
        required=False,
        update_allowed=True,
    )
    ssh_se_deployment_schema = properties.Schema(
        properties.Schema.MAP,
        _("Parameters for SSH SE deployment"),
        schema=SSHSeDeployment.properties_schema,
        required=False,
        update_allowed=True,
    )
    enable_event_subscription_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable Docker event subscription"),
        required=False,
        update_allowed=True,
    )
    feproxy_container_port_as_service_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("For Front End proxies, use container port as service port"),
        required=False,
        update_allowed=True,
    )
    services_accessible_all_interfaces_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Make service ports accessible on all Host interfaces in addition to East/West VIP and/or bridge IP. Usually enabled AWS clusters to export East-West services on Host interface"),
        required=False,
        update_allowed=True,
    )
    feproxy_vips_enable_proxy_arp_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Enable proxy ARP from Host interface for Front End  proxies"),
        required=False,
        update_allowed=True,
    )
    se_exclude_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_exclude_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Exclude hosts with attributes for SE creation"),
        schema=se_exclude_attributes_item_schema,
        required=False,
        update_allowed=True,
    )
    se_include_attributes_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosAttribute.properties_schema,
        required=True,
        update_allowed=False,
    )
    se_include_attributes_schema = properties.Schema(
        properties.Schema.LIST,
        _("Create SEs just on hosts with include attributes"),
        schema=se_include_attributes_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ucp_nodes',
        'client_tls_key_and_certificate_uuid',
        'ca_tls_key_and_certificate_uuid',
        'container_port_match_http_service',
        'http_container_ports',
        'east_west_placement_subnet',
        'se_deployment_method',
        'fleet_endpoint',
        'docker_registry_se',
        'se_spawn_rate',
        'app_sync_frequency',
        'disable_auto_se_creation',
        'disable_auto_frontend_service_sync',
        'disable_auto_backend_service_sync',
        'use_container_ip_port',
        'se_volume',
        'coredump_directory',
        'ssh_se_deployment',
        'enable_event_subscription',
        'feproxy_container_port_as_service',
        'services_accessible_all_interfaces',
        'feproxy_vips_enable_proxy_arp',
        'se_exclude_attributes',
        'se_include_attributes',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ucp_nodes': ucp_nodes_schema,
        'client_tls_key_and_certificate_uuid': client_tls_key_and_certificate_uuid_schema,
        'ca_tls_key_and_certificate_uuid': ca_tls_key_and_certificate_uuid_schema,
        'container_port_match_http_service': container_port_match_http_service_schema,
        'http_container_ports': http_container_ports_schema,
        'east_west_placement_subnet': east_west_placement_subnet_schema,
        'se_deployment_method': se_deployment_method_schema,
        'fleet_endpoint': fleet_endpoint_schema,
        'docker_registry_se': docker_registry_se_schema,
        'se_spawn_rate': se_spawn_rate_schema,
        'app_sync_frequency': app_sync_frequency_schema,
        'disable_auto_se_creation': disable_auto_se_creation_schema,
        'disable_auto_frontend_service_sync': disable_auto_frontend_service_sync_schema,
        'disable_auto_backend_service_sync': disable_auto_backend_service_sync_schema,
        'use_container_ip_port': use_container_ip_port_schema,
        'se_volume': se_volume_schema,
        'coredump_directory': coredump_directory_schema,
        'ssh_se_deployment': ssh_se_deployment_schema,
        'enable_event_subscription': enable_event_subscription_schema,
        'feproxy_container_port_as_service': feproxy_container_port_as_service_schema,
        'services_accessible_all_interfaces': services_accessible_all_interfaces_schema,
        'feproxy_vips_enable_proxy_arp': feproxy_vips_enable_proxy_arp_schema,
        'se_exclude_attributes': se_exclude_attributes_schema,
        'se_include_attributes': se_include_attributes_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ssh_se_deployment': getattr(SSHSeDeployment, 'field_references', {}),
        'east_west_placement_subnet': getattr(IpAddrPrefix, 'field_references', {}),
        'se_exclude_attributes': getattr(MesosAttribute, 'field_references', {}),
        'client_tls_key_and_certificate_uuid': 'sslkeyandcertificate',
        'se_include_attributes': getattr(MesosAttribute, 'field_references', {}),
        'docker_registry_se': getattr(DockerRegistry, 'field_references', {}),
        'ca_tls_key_and_certificate_uuid': 'sslkeyandcertificate',
    }



class OpenStackConfiguration(object):
    # all schemas
    username_schema = properties.Schema(
        properties.Schema.STRING,
        _("The username Avi Vantage will use when authenticating to Keystone."),
        required=True,
        update_allowed=True,
    )
    password_schema = properties.Schema(
        properties.Schema.STRING,
        _("The password Avi Vantage will use when authenticating to Keystone."),
        required=False,
        update_allowed=True,
    )
    admin_tenant_schema = properties.Schema(
        properties.Schema.STRING,
        _("Openstack admin tenant name"),
        required=True,
        update_allowed=True,
    )
    keystone_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("Keystone's hostname or IP address."),
        required=True,
        update_allowed=True,
    )
    mgmt_network_name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Management network name or cidr"),
        required=True,
        update_allowed=True,
    )
    privilege_schema = properties.Schema(
        properties.Schema.STRING,
        _("Access privilege"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WRITE_ACCESS', 'READ_ACCESS', 'NO_ACCESS']),
        ],
    )
    use_keystone_auth_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use keystone for user authentication"),
        required=False,
        update_allowed=True,
    )
    prov_name_item_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=False,
    )
    prov_name_schema = properties.Schema(
        properties.Schema.LIST,
        _("LBaaS provider name"),
        schema=prov_name_item_schema,
        required=False,
        update_allowed=True,
    )
    mgmt_network_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Management network UUID"),
        required=False,
        update_allowed=True,
    )
    region_schema = properties.Schema(
        properties.Schema.STRING,
        _("Region name"),
        required=False,
        update_allowed=True,
    )
    hypervisor_schema = properties.Schema(
        properties.Schema.STRING,
        _("Default hypervisor type"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['DEFAULT', 'VMWARE_VSAN', 'VMWARE_ESX', 'KVM']),
        ],
    )
    tenant_se_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, then SEs will be created in the appropriate tenants, else SEs will be created in the admin_tenant."),
        required=False,
        update_allowed=True,
    )
    import_keystone_tenants_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Import keystone tenants list into Avi"),
        required=False,
        update_allowed=True,
    )
    anti_affinity_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If true, an anti-affinity policy will be applied to all SEs of a SE-Group, else no such policy will be applied."),
        required=False,
        update_allowed=True,
    )
    port_security_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If false, port-security extension will not be used. "),
        required=False,
        update_allowed=True,
    )
    security_groups_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If false, security-groups extension will not be used. "),
        required=False,
        update_allowed=True,
    )
    allowed_address_pairs_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If false, allowed-address-pairs extension will not be used. "),
        required=False,
        update_allowed=True,
    )
    free_floatingips_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Free unused floating IPs."),
        required=False,
        update_allowed=True,
    )
    img_format_schema = properties.Schema(
        properties.Schema.STRING,
        _("If OS_IMG_FMT_RAW, use RAW images else use QCOW2 or streamOptimized/flat VMDK as appropriate. "),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['OS_IMG_FMT_AUTO', 'OS_IMG_FMT_VMDK', 'OS_IMG_FMT_FLAT', 'OS_IMG_FMT_RAW', 'OS_IMG_FMT_QCOW2']),
        ],
    )
    use_admin_url_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If admin URLs are either inaccessible or not to be accessed from Avi Controller, then set this to False."),
        required=False,
        update_allowed=True,
    )
    role_mapping_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=OpenStackRoleMapping.properties_schema,
        required=True,
        update_allowed=False,
    )
    role_mapping_schema = properties.Schema(
        properties.Schema.LIST,
        _("Defines the mapping from openstack role names to avi local role names. For an OpenStack role, this mapping is consulted only if there is no local Avi role with the same name as the OpenStack role. This is an ordered list and only the first matching entry is used. You can use '*' to match all OpenStack role names."),
        schema=role_mapping_item_schema,
        required=False,
        update_allowed=True,
    )
    use_internal_endpoints_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use internalURL for OpenStack endpoints instead of the default publicURL endpoints."),
        required=False,
        update_allowed=True,
    )
    admin_tenant_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("admin-tenant's UUID in OpenStack"),
        required=False,
        update_allowed=True,
    )
    config_drive_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("If false, metadata service will be used instead of  config-drive functionality to retrieve SE VM metadata."),
        required=False,
        update_allowed=True,
    )
    nuage_vsd_host_schema = properties.Schema(
        properties.Schema.STRING,
        _("Nuage VSD host name or IP address"),
        required=False,
        update_allowed=True,
    )
    nuage_port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_username_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_password_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    nuage_organization_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )
    contrail_plugin_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    se_group_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("The Service Engine Group to use as template."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'username',
        'password',
        'admin_tenant',
        'keystone_host',
        'mgmt_network_name',
        'privilege',
        'use_keystone_auth',
        'prov_name',
        'mgmt_network_uuid',
        'region',
        'hypervisor',
        'tenant_se',
        'import_keystone_tenants',
        'anti_affinity',
        'port_security',
        'security_groups',
        'allowed_address_pairs',
        'free_floatingips',
        'img_format',
        'use_admin_url',
        'role_mapping',
        'use_internal_endpoints',
        'admin_tenant_uuid',
        'config_drive',
        'nuage_vsd_host',
        'nuage_port',
        'nuage_username',
        'nuage_password',
        'nuage_organization',
        'contrail_plugin',
        'se_group_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'username': username_schema,
        'password': password_schema,
        'admin_tenant': admin_tenant_schema,
        'keystone_host': keystone_host_schema,
        'mgmt_network_name': mgmt_network_name_schema,
        'privilege': privilege_schema,
        'use_keystone_auth': use_keystone_auth_schema,
        'prov_name': prov_name_schema,
        'mgmt_network_uuid': mgmt_network_uuid_schema,
        'region': region_schema,
        'hypervisor': hypervisor_schema,
        'tenant_se': tenant_se_schema,
        'import_keystone_tenants': import_keystone_tenants_schema,
        'anti_affinity': anti_affinity_schema,
        'port_security': port_security_schema,
        'security_groups': security_groups_schema,
        'allowed_address_pairs': allowed_address_pairs_schema,
        'free_floatingips': free_floatingips_schema,
        'img_format': img_format_schema,
        'use_admin_url': use_admin_url_schema,
        'role_mapping': role_mapping_schema,
        'use_internal_endpoints': use_internal_endpoints_schema,
        'admin_tenant_uuid': admin_tenant_uuid_schema,
        'config_drive': config_drive_schema,
        'nuage_vsd_host': nuage_vsd_host_schema,
        'nuage_port': nuage_port_schema,
        'nuage_username': nuage_username_schema,
        'nuage_password': nuage_password_schema,
        'nuage_organization': nuage_organization_schema,
        'contrail_plugin': contrail_plugin_schema,
        'se_group_uuid': se_group_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'role_mapping': getattr(OpenStackRoleMapping, 'field_references', {}),
    }



class Cloud(AviResource):
    resource_name = "cloud"
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    vtype_schema = properties.Schema(
        properties.Schema.STRING,
        _("Cloud type"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['CLOUD_VCENTER', 'CLOUD_DOCKER_UCP', 'CLOUD_APIC', 'CLOUD_OPENSTACK', 'CLOUD_MESOS', 'CLOUD_RANCHER', 'CLOUD_VCA', 'CLOUD_AWS', 'CLOUD_LINUXSERVER', 'CLOUD_NONE']),
        ],
    )
    vcenter_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vCenterConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    openstack_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=OpenStackConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    aws_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=AwsConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    apic_mode_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _(""),
        required=False,
        update_allowed=True,
    )
    apic_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=APICConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    cloudstack_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=CloudStackConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    vca_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=vCloudAirConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    mesos_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=MesosConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    proxy_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=ProxyConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    linuxserver_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=LinuxServerConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    docker_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=DockerConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    rancher_configuration_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=RancherConfiguration.properties_schema,
        required=False,
        update_allowed=True,
    )
    dhcp_enabled_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Select the IP address management scheme"),
        required=False,
        update_allowed=True,
    )
    mtu_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("MTU setting for the cloud"),
        required=False,
        update_allowed=True,
    )
    prefer_static_routes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Prefer static routes over interface routes during VirtualService placement."),
        required=False,
        update_allowed=True,
    )
    enable_vip_static_routes_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use static routes for VIP side network resolution during VirtualService placement."),
        required=False,
        update_allowed=True,
    )
    obj_name_prefix_schema = properties.Schema(
        properties.Schema.STRING,
        _("Default prefix for all automatically created objects in this cloud. This prefix can be overridden by the SE-Group template. "),
        required=False,
        update_allowed=True,
    )
    license_type_schema = properties.Schema(
        properties.Schema.STRING,
        _("If no license type is specified then default license enforcement for the cloud type is chosen. The default mappings are Container Cloud is Max Ses, OpenStack and VMware is cores and linux it is Sockets."),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['LIC_SOCKETS', 'LIC_CORES', 'LIC_BACKEND_SERVERS', 'LIC_HOSTS']),
        ],
    )
    ipam_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Ipam Provider for the cloud You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    dns_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("DNS Provider for the cloud You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    east_west_ipam_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("Ipam Profile for East West applications You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )
    east_west_dns_provider_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("DNS Profile for East West applications You can either provide UUID or provide a name with the prefix 'get_avi_uuid_for_name:', e.g., 'get_avi_uuid_for_name:my_obj_name'."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'vtype',
        'vcenter_configuration',
        'openstack_configuration',
        'aws_configuration',
        'apic_mode',
        'apic_configuration',
        'cloudstack_configuration',
        'vca_configuration',
        'mesos_configuration',
        'proxy_configuration',
        'linuxserver_configuration',
        'docker_configuration',
        'rancher_configuration',
        'dhcp_enabled',
        'mtu',
        'prefer_static_routes',
        'enable_vip_static_routes',
        'obj_name_prefix',
        'license_type',
        'ipam_provider_uuid',
        'dns_provider_uuid',
        'east_west_ipam_provider_uuid',
        'east_west_dns_provider_uuid',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'vtype': vtype_schema,
        'vcenter_configuration': vcenter_configuration_schema,
        'openstack_configuration': openstack_configuration_schema,
        'aws_configuration': aws_configuration_schema,
        'apic_mode': apic_mode_schema,
        'apic_configuration': apic_configuration_schema,
        'cloudstack_configuration': cloudstack_configuration_schema,
        'vca_configuration': vca_configuration_schema,
        'mesos_configuration': mesos_configuration_schema,
        'proxy_configuration': proxy_configuration_schema,
        'linuxserver_configuration': linuxserver_configuration_schema,
        'docker_configuration': docker_configuration_schema,
        'rancher_configuration': rancher_configuration_schema,
        'dhcp_enabled': dhcp_enabled_schema,
        'mtu': mtu_schema,
        'prefer_static_routes': prefer_static_routes_schema,
        'enable_vip_static_routes': enable_vip_static_routes_schema,
        'obj_name_prefix': obj_name_prefix_schema,
        'license_type': license_type_schema,
        'ipam_provider_uuid': ipam_provider_uuid_schema,
        'dns_provider_uuid': dns_provider_uuid_schema,
        'east_west_ipam_provider_uuid': east_west_ipam_provider_uuid_schema,
        'east_west_dns_provider_uuid': east_west_dns_provider_uuid_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'vca_configuration': getattr(vCloudAirConfiguration, 'field_references', {}),
        'rancher_configuration': getattr(RancherConfiguration, 'field_references', {}),
        'mesos_configuration': getattr(MesosConfiguration, 'field_references', {}),
        'east_west_ipam_provider_uuid': 'ipamdnsproviderprofile',
        'proxy_configuration': getattr(ProxyConfiguration, 'field_references', {}),
        'east_west_dns_provider_uuid': 'ipamdnsproviderprofile',
        'docker_configuration': getattr(DockerConfiguration, 'field_references', {}),
        'openstack_configuration': getattr(OpenStackConfiguration, 'field_references', {}),
        'dns_provider_uuid': 'ipamdnsproviderprofile',
        'linuxserver_configuration': getattr(LinuxServerConfiguration, 'field_references', {}),
        'apic_configuration': getattr(APICConfiguration, 'field_references', {}),
        'aws_configuration': getattr(AwsConfiguration, 'field_references', {}),
        'ipam_provider_uuid': 'ipamdnsproviderprofile',
        'cloudstack_configuration': getattr(CloudStackConfiguration, 'field_references', {}),
        'vcenter_configuration': getattr(vCenterConfiguration, 'field_references', {}),
    }



def resource_mapping():
    return {
        'Avi::Cloud': Cloud,
        'Avi::CloudConnectorUser': CloudConnectorUser,
    }

