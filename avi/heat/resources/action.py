# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from common import *
from options import *


class URIParamToken(object):
    # all schemas
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _("Token type for constructing the URI"),
        required=True,
        update_allowed=True,
    )
    start_index_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Index of the starting token in the incoming URI"),
        required=False,
        update_allowed=True,
    )
    end_index_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Index of the ending token in the incoming URI"),
        required=False,
        update_allowed=True,
    )
    str_value_schema = properties.Schema(
        properties.Schema.STRING,
        _("Constant string to use as a token"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'type',
        'start_index',
        'end_index',
        'str_value',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'type': type_schema,
        'start_index': start_index_schema,
        'end_index': end_index_schema,
        'str_value': str_value_schema,
    }




class PoolServer(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP address of the server in the poool"),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    hostname_schema = properties.Schema(
        properties.Schema.STRING,
        _("DNS resolvable name of the server.  May be used in place of the IP address."),
        required=False,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.MAP,
        _("Port of the pool server listening for HTTP/HTTPS. Default value is the default port in the pool."),
        schema=Port.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'hostname',
        'port',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'hostname': hostname_schema,
        'port': port_schema,
    }




class HTTPCookieData(object):
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("Cookie name"),
        required=False,
        update_allowed=True,
    )
    value_schema = properties.Schema(
        properties.Schema.STRING,
        _("Cookie value"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'value',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'value': value_schema,
    }




class URIParamQuery(object):
    # all schemas
    keep_query_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Use or drop the query of the incoming request URI in the request URI to the backend server"),
        required=False,
        update_allowed=True,
    )
    add_string_schema = properties.Schema(
        properties.Schema.STRING,
        _("Concatenate a string to the query of the incoming request URI and then use it in the request URI going to the backend server"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'keep_query',
        'add_string',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'keep_query': keep_query_schema,
        'add_string': add_string_schema,
    }




class HTTPHdrValue(object):
    # all schemas
    var_schema = properties.Schema(
        properties.Schema.STRING,
        _("Variable"),
        required=False,
        update_allowed=True,
    )
    val_schema = properties.Schema(
        properties.Schema.STRING,
        _("HTTP header value or variable representing an HTTP header"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'var',
        'val',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'var': var_schema,
        'val': val_schema,
    }




class HTTPSwitchingAction(object):
    # all schemas
    action_schema = properties.Schema(
        properties.Schema.STRING,
        _("Content switching action type"),
        required=True,
        update_allowed=True,
    )
    pool_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("UUID of the pool of servers to serve the request"),
        required=False,
        update_allowed=True,
    )
    status_code_schema = properties.Schema(
        properties.Schema.STRING,
        _("HTTP status code to use when serving local response"),
        required=False,
        update_allowed=True,
    )
    file_schema = properties.Schema(
        properties.Schema.MAP,
        _("File from which to serve local response to the request"),
        schema=HTTPLocalFile.properties_schema,
        required=False,
        update_allowed=True,
    )
    server_schema = properties.Schema(
        properties.Schema.MAP,
        _("Specific pool server to select"),
        schema=PoolServer.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'action',
        'pool_uuid',
        'status_code',
        'file',
        'server',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'action': action_schema,
        'pool_uuid': pool_uuid_schema,
        'status_code': status_code_schema,
        'file': file_schema,
        'server': server_schema,
    }




class URIParam(object):
    # all schemas
    type_schema = properties.Schema(
        properties.Schema.STRING,
        _("URI param type"),
        required=True,
        update_allowed=True,
    )
    tokens_item_schema = properties.Schema(
        properties.Schema.MAP,
        _(""),
        schema=URIParamToken.properties_schema,
        required=True,
        update_allowed=False,
    )
    tokens_schema = properties.Schema(
        properties.Schema.LIST,
        _("Token config either for the URI components or a constant string"),
        schema=tokens_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'type',
        'tokens',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'type': type_schema,
        'tokens': tokens_schema,
    }




class HTTPHdrData(object):
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("HTTP header name"),
        required=False,
        update_allowed=True,
    )
    value_schema = properties.Schema(
        properties.Schema.MAP,
        _("HTTP header value"),
        schema=HTTPHdrValue.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'value',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'value': value_schema,
    }




class HTTPRedirectAction(object):
    # all schemas
    protocol_schema = properties.Schema(
        properties.Schema.STRING,
        _("Protocol type"),
        required=True,
        update_allowed=True,
    )
    host_schema = properties.Schema(
        properties.Schema.MAP,
        _("Host config"),
        schema=URIParam.properties_schema,
        required=False,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.MAP,
        _("Port to which redirect the request"),
        schema=Port.properties_schema,
        required=False,
        update_allowed=True,
    )
    path_schema = properties.Schema(
        properties.Schema.MAP,
        _("Path config"),
        schema=URIParam.properties_schema,
        required=False,
        update_allowed=True,
    )
    keep_query_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Keep or drop the query of the incoming request URI in the redirected URI"),
        required=False,
        update_allowed=True,
    )
    status_code_schema = properties.Schema(
        properties.Schema.STRING,
        _("HTTP redirect status code"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'protocol',
        'host',
        'port',
        'path',
        'keep_query',
        'status_code',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'protocol': protocol_schema,
        'host': host_schema,
        'port': port_schema,
        'path': path_schema,
        'keep_query': keep_query_schema,
        'status_code': status_code_schema,
    }




class HTTPRewriteURLAction(object):
    # all schemas
    host_hdr_schema = properties.Schema(
        properties.Schema.MAP,
        _("Host config"),
        schema=URIParam.properties_schema,
        required=False,
        update_allowed=True,
    )
    path_schema = properties.Schema(
        properties.Schema.MAP,
        _("Path config"),
        schema=URIParam.properties_schema,
        required=False,
        update_allowed=True,
    )
    query_schema = properties.Schema(
        properties.Schema.MAP,
        _("Query config"),
        schema=URIParamQuery.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'host_hdr',
        'path',
        'query',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'host_hdr': host_hdr_schema,
        'path': path_schema,
        'query': query_schema,
    }




class HTTPRewriteLocHdrAction(object):
    # all schemas
    protocol_schema = properties.Schema(
        properties.Schema.STRING,
        _("HTTP protocol type"),
        required=True,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.MAP,
        _("Port to use in the redirected URI"),
        schema=Port.properties_schema,
        required=False,
        update_allowed=True,
    )
    host_schema = properties.Schema(
        properties.Schema.MAP,
        _("Host config"),
        schema=URIParam.properties_schema,
        required=False,
        update_allowed=True,
    )
    path_schema = properties.Schema(
        properties.Schema.MAP,
        _("Path config"),
        schema=URIParam.properties_schema,
        required=False,
        update_allowed=True,
    )
    keep_query_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Keep or drop the query from the server side redirect URI"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'protocol',
        'port',
        'host',
        'path',
        'keep_query',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'protocol': protocol_schema,
        'port': port_schema,
        'host': host_schema,
        'path': path_schema,
        'keep_query': keep_query_schema,
    }




class HTTPHdrAction(object):
    # all schemas
    action_schema = properties.Schema(
        properties.Schema.STRING,
        _("ADD: A new header with the new value is added irrespective of the existence of an HTTP header of the given name. REPLACE: A new header with the new value is added if no header of the given name exists, else existing headers with the given name are removed and a new header with the new value is added. REMOVE: All the headers of the given name are removed."),
        required=True,
        update_allowed=True,
    )
    hdr_schema = properties.Schema(
        properties.Schema.MAP,
        _("HTTP header information"),
        schema=HTTPHdrData.properties_schema,
        required=False,
        update_allowed=True,
    )
    cookie_schema = properties.Schema(
        properties.Schema.MAP,
        _("Cookie information"),
        schema=HTTPCookieData.properties_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'action',
        'hdr',
        'cookie',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'action': action_schema,
        'hdr': hdr_schema,
        'cookie': cookie_schema,
    }


