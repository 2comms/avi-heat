# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from options import *
from common import *


class WafDataFile(object):
    # all schemas
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF Data File Name."),
        required=True,
        update_allowed=True,
    )
    data_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) Stringified WAF File Data."),
        required=True,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'name',
        'data',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'name': name_schema,
        'data': data_schema,
    }



class WafExcludeListEntry(object):
    # all schemas
    client_subnet_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) Client IP Subnet to exclude for WAF rules."),
        schema=IpAddrPrefix.properties_schema,
        required=False,
        update_allowed=True,
    )
    uri_path_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) URI Path to exclude for WAF rules."),
        required=False,
        update_allowed=True,
    )
    match_element_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) match_element can be 'ARGS:xxx', 'ARGS_GET:xxx', 'ARGS_POST:xxx''ARGS_NAMES:xxx, 'QUERY_STRING', 'REQUEST_BASENAME', 'REQUEST_BODY', 'REQUEST_URI', 'REQUEST_URI_RAW', 'REQUEST_COOKIES:xxx', 'REQUEST_HEADERS:xxx' and 'RESPONSE_HEADERS:xxx'. These match_elements in the HTTP Transcation (if present) will be excluded when executing WAF Rules."),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'client_subnet',
        'uri_path',
        'match_element',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'client_subnet': client_subnet_schema,
        'uri_path': uri_path_schema,
        'match_element': match_element_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'client_subnet': getattr(IpAddrPrefix, 'field_references', {}),
    }

    unique_keys = {
        'client_subnet': getattr(IpAddrPrefix, 'unique_keys', {}),
    }



class WafConfig(object):
    # all schemas
    request_hdr_default_action_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF default action for Request Header Phase."),
        required=True,
        update_allowed=True,
    )
    request_body_default_action_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF default action for Request Body Phase."),
        required=True,
        update_allowed=True,
    )
    response_hdr_default_action_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF default action for Response Header Phase."),
        required=True,
        update_allowed=True,
    )
    response_body_default_action_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF default action for Response Body Phase."),
        required=True,
        update_allowed=True,
    )
    allowed_http_versions_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF allowed HTTP Versions."),
        required=True,
        update_allowed=False,
        constraints=[
            constraints.AllowedValues(['ONE_ONE', 'ONE_ZERO', 'ZERO_NINE']),
        ],
    )
    allowed_http_versions_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF allowed HTTP Versions."),
        schema=allowed_http_versions_item_schema,
        required=False,
        update_allowed=True,
    )
    allowed_methods_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF allowed HTTP methods."),
        required=True,
        update_allowed=False,
        constraints=[
            constraints.AllowedValues(['HTTP_METHOD_DELETE', 'HTTP_METHOD_GET', 'HTTP_METHOD_HEAD', 'HTTP_METHOD_OPTIONS', 'HTTP_METHOD_POST', 'HTTP_METHOD_PUT']),
        ],
    )
    allowed_methods_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF allowed HTTP methods."),
        schema=allowed_methods_item_schema,
        required=False,
        update_allowed=True,
    )
    allowed_request_content_types_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF allowed Content Types."),
        required=True,
        update_allowed=False,
    )
    allowed_request_content_types_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF allowed Content Types."),
        schema=allowed_request_content_types_item_schema,
        required=False,
        update_allowed=True,
    )
    restricted_extensions_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF Restricted File Extensions."),
        required=True,
        update_allowed=False,
    )
    restricted_extensions_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF Restricted File Extensions."),
        schema=restricted_extensions_item_schema,
        required=False,
        update_allowed=True,
    )
    restricted_headers_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF Restricted HTTP Headers."),
        required=True,
        update_allowed=False,
    )
    restricted_headers_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF Restricted HTTP Headers."),
        schema=restricted_headers_item_schema,
        required=False,
        update_allowed=True,
    )
    static_extensions_item_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.5) WAF Static File Extensions. GET and HEAD requests with no query args and one of these extensions are whitelisted and not checked by the ruleset."),
        required=True,
        update_allowed=False,
    )
    static_extensions_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.5) WAF Static File Extensions. GET and HEAD requests with no query args and one of these extensions are whitelisted and not checked by the ruleset."),
        schema=static_extensions_item_schema,
        required=False,
        update_allowed=True,
    )
    client_nonfile_upload_max_body_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.2.1) Maximum size for the client request body for non-file uploads. (Units: KB) (Default: 128)"),
        required=False,
        update_allowed=True,
    )
    client_file_upload_max_body_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.2.1) Maximum size for the client request body for file uploads. (Units: KB) (Default: 1024)"),
        required=False,
        update_allowed=True,
    )
    server_response_max_body_size_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.2.1) Maximum size for response body received from server. (Units: KB) (Default: 128)"),
        required=False,
        update_allowed=True,
    )
    argument_separator_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) Argument seperator"),
        required=False,
        update_allowed=True,
    )
    cookie_format_version_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.2.1) 0: For Netscape Cookies. 1: For version 1 cookies. (Default: 0)"),
        required=False,
        update_allowed=True,
    )
    buffer_response_body_for_inspection_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.2.3) Enable to buffer response body for inspection. (Default: False)"),
        required=False,
        update_allowed=True,
    )
    regex_match_limit_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.2.5) Limit CPU utilization for each regular expression match when processing rules (Default: 1500)"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'request_hdr_default_action',
        'request_body_default_action',
        'response_hdr_default_action',
        'response_body_default_action',
        'allowed_http_versions',
        'allowed_methods',
        'allowed_request_content_types',
        'restricted_extensions',
        'restricted_headers',
        'static_extensions',
        'client_nonfile_upload_max_body_size',
        'client_file_upload_max_body_size',
        'server_response_max_body_size',
        'argument_separator',
        'cookie_format_version',
        'buffer_response_body_for_inspection',
        'regex_match_limit',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'request_hdr_default_action': request_hdr_default_action_schema,
        'request_body_default_action': request_body_default_action_schema,
        'response_hdr_default_action': response_hdr_default_action_schema,
        'response_body_default_action': response_body_default_action_schema,
        'allowed_http_versions': allowed_http_versions_schema,
        'allowed_methods': allowed_methods_schema,
        'allowed_request_content_types': allowed_request_content_types_schema,
        'restricted_extensions': restricted_extensions_schema,
        'restricted_headers': restricted_headers_schema,
        'static_extensions': static_extensions_schema,
        'client_nonfile_upload_max_body_size': client_nonfile_upload_max_body_size_schema,
        'client_file_upload_max_body_size': client_file_upload_max_body_size_schema,
        'server_response_max_body_size': server_response_max_body_size_schema,
        'argument_separator': argument_separator_schema,
        'cookie_format_version': cookie_format_version_schema,
        'buffer_response_body_for_inspection': buffer_response_body_for_inspection_schema,
        'regex_match_limit': regex_match_limit_schema,
    }



class WafProfile(AviResource):
    resource_name = "wafprofile"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) "),
        required=True,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) "),
        required=False,
        update_allowed=True,
    )
    config_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) Config params for WAF."),
        schema=WafConfig.properties_schema,
        required=True,
        update_allowed=True,
    )
    files_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) List of Data Files Used for WAF Rules."),
        schema=WafDataFile.properties_schema,
        required=True,
        update_allowed=False,
    )
    files_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) List of Data Files Used for WAF Rules."),
        schema=files_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'description',
        'config',
        'files',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'description': description_schema,
        'config': config_schema,
        'files': files_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'files': getattr(WafDataFile, 'field_references', {}),
        'config': getattr(WafConfig, 'field_references', {}),
    }

    unique_keys = {
        'files': getattr(WafDataFile, 'unique_keys', {}),
        'config': getattr(WafConfig, 'unique_keys', {}),
    }



class WafRule(object):
    # all schemas
    index_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.2.1) "),
        required=True,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) User-friendly optional name for a rule."),
        required=False,
        update_allowed=True,
    )
    rule_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.2) Identifier (id) for a rule per Modsec language. All SecRule and SecAction directives require an id. It is extracted from the id action in a ModSec rule. Rules within a single WAF Policy are required to have unique rule_ids."),
        required=False,
        update_allowed=True,
    )
    enable_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.2.1) Enable or disable WAF Rule Group. (Default: True)"),
        required=True,
        update_allowed=True,
    )
    rule_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) Rule as per Modsec language."),
        required=True,
        update_allowed=True,
    )
    exclude_list_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.3) Exclude list for the WAF rule. The fields in the exclude list entry are logically and'ed to deduce the exclusion criteria. If there are multiple excludelist entries, it will be 'logical or' of them."),
        schema=WafExcludeListEntry.properties_schema,
        required=True,
        update_allowed=False,
    )
    exclude_list_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.3) Exclude list for the WAF rule. The fields in the exclude list entry are logically and'ed to deduce the exclusion criteria. If there are multiple excludelist entries, it will be 'logical or' of them."),
        schema=exclude_list_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'index',
        'name',
        'rule_id',
        'enable',
        'rule',
        'exclude_list',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'index': index_schema,
        'name': name_schema,
        'rule_id': rule_id_schema,
        'enable': enable_schema,
        'rule': rule_schema,
        'exclude_list': exclude_list_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'exclude_list': getattr(WafExcludeListEntry, 'field_references', {}),
    }

    unique_keys = {
        'exclude_list': getattr(WafExcludeListEntry, 'unique_keys', {}),
        'my_key': 'index',
    }



class WafRuleGroup(object):
    # all schemas
    index_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("(Introduced in: 17.2.1) "),
        required=True,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) "),
        required=True,
        update_allowed=True,
    )
    enable_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("(Introduced in: 17.2.1) Enable or disable WAF Rule Group. (Default: True)"),
        required=True,
        update_allowed=True,
    )
    rules_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) Rules as per Modsec language."),
        schema=WafRule.properties_schema,
        required=True,
        update_allowed=False,
    )
    rules_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) Rules as per Modsec language."),
        schema=rules_item_schema,
        required=False,
        update_allowed=True,
    )
    exclude_list_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) Exclude list for the WAF rule group. The fields in the exclude list entry are logically and'ed to deduce the exclusion criteria. If there are multiple excludelist entries, it will be 'logical or' of them."),
        schema=WafExcludeListEntry.properties_schema,
        required=True,
        update_allowed=False,
    )
    exclude_list_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) Exclude list for the WAF rule group. The fields in the exclude list entry are logically and'ed to deduce the exclusion criteria. If there are multiple excludelist entries, it will be 'logical or' of them."),
        schema=exclude_list_item_schema,
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'index',
        'name',
        'enable',
        'rules',
        'exclude_list',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'index': index_schema,
        'name': name_schema,
        'enable': enable_schema,
        'rules': rules_schema,
        'exclude_list': exclude_list_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'rules': getattr(WafRule, 'field_references', {}),
        'exclude_list': getattr(WafExcludeListEntry, 'field_references', {}),
    }

    unique_keys = {
        'rules': getattr(WafRule, 'unique_keys', {}),
        'exclude_list': getattr(WafExcludeListEntry, 'unique_keys', {}),
        'my_key': 'index',
    }



class WafPolicy(AviResource):
    resource_name = "wafpolicy"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) "),
        required=True,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) "),
        required=False,
        update_allowed=True,
    )
    mode_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF Policy mode. This can be detection or enforcement. (Default: WAF_MODE_DETECTION_ONLY)"),
        required=True,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WAF_MODE_DETECTION_ONLY', 'WAF_MODE_ENFORCEMENT']),
        ],
    )
    waf_profile_uuid_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF Profile for WAF policy You can either provide UUID or provide a name with the prefix 'get_avi_uuid_by_name:', e.g., 'get_avi_uuid_by_name:my_obj_name'."),
        required=True,
        update_allowed=True,
    )
    pre_crs_groups_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) WAF Rules are categorized in to groups based on their characterization. These groups are created by the user and will be  enforced before the CRS groups."),
        schema=WafRuleGroup.properties_schema,
        required=True,
        update_allowed=False,
    )
    pre_crs_groups_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF Rules are categorized in to groups based on their characterization. These groups are created by the user and will be  enforced before the CRS groups."),
        schema=pre_crs_groups_item_schema,
        required=False,
        update_allowed=True,
    )
    crs_groups_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) WAF Rules are categorized in to groups based on their characterization. These groups are system created with CRS groups."),
        schema=WafRuleGroup.properties_schema,
        required=True,
        update_allowed=False,
    )
    crs_groups_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF Rules are categorized in to groups based on their characterization. These groups are system created with CRS groups."),
        schema=crs_groups_item_schema,
        required=False,
        update_allowed=True,
    )
    post_crs_groups_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("(Introduced in: 17.2.1) WAF Rules are categorized in to groups based on their characterization. These groups are created by the user and will be enforced after the CRS groups."),
        schema=WafRuleGroup.properties_schema,
        required=True,
        update_allowed=False,
    )
    post_crs_groups_schema = properties.Schema(
        properties.Schema.LIST,
        _("(Introduced in: 17.2.1) WAF Rules are categorized in to groups based on their characterization. These groups are created by the user and will be enforced after the CRS groups."),
        schema=post_crs_groups_item_schema,
        required=False,
        update_allowed=True,
    )
    paranoia_level_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.1) WAF Ruleset paranoia  mode. This is used to select Rules based on the paranoia-level tag. (Default: WAF_PARANOIA_LEVEL_LOW)"),
        required=False,
        update_allowed=True,
        constraints=[
            constraints.AllowedValues(['WAF_PARANOIA_LEVEL_EXTREME', 'WAF_PARANOIA_LEVEL_HIGH', 'WAF_PARANOIA_LEVEL_LOW', 'WAF_PARANOIA_LEVEL_MEDIUM']),
        ],
    )
    created_by_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.4) Creator name"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'description',
        'mode',
        'waf_profile_uuid',
        'pre_crs_groups',
        'crs_groups',
        'post_crs_groups',
        'paranoia_level',
        'created_by',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'description': description_schema,
        'mode': mode_schema,
        'waf_profile_uuid': waf_profile_uuid_schema,
        'pre_crs_groups': pre_crs_groups_schema,
        'crs_groups': crs_groups_schema,
        'post_crs_groups': post_crs_groups_schema,
        'paranoia_level': paranoia_level_schema,
        'created_by': created_by_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'post_crs_groups': getattr(WafRuleGroup, 'field_references', {}),
        'pre_crs_groups': getattr(WafRuleGroup, 'field_references', {}),
        'waf_profile_uuid': 'wafprofile',
        'crs_groups': getattr(WafRuleGroup, 'field_references', {}),
    }

    unique_keys = {
        'post_crs_groups': getattr(WafRuleGroup, 'unique_keys', {}),
        'pre_crs_groups': getattr(WafRuleGroup, 'unique_keys', {}),
        'crs_groups': getattr(WafRuleGroup, 'unique_keys', {}),
    }



def resource_mapping():
    return {
        'Avi::LBaaS::WafPolicy': WafPolicy,
        'Avi::LBaaS::WafProfile': WafProfile,
    }

