# GENERATED FILE - DO NOT EDIT THIS FILE UNLESS YOU ARE A WIZZARD
#pylint:  skip-file
from heat.engine import properties
from heat.engine import constraints
from heat.engine import attributes
from heat.common.i18n import _
from avi.heat.avi_resource import AviResource
from avi.heat.avi_resource import AviNestedResource
from options import *

from options import *


class MicroServiceContainer(object):
    # all schemas
    ip_schema = properties.Schema(
        properties.Schema.MAP,
        _("IP Address of the container."),
        schema=IpAddr.properties_schema,
        required=True,
        update_allowed=True,
    )
    port_schema = properties.Schema(
        properties.Schema.NUMBER,
        _("Port nunber of the instance"),
        required=False,
        update_allowed=True,
    )
    container_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("ID of the container."),
        required=False,
        update_allowed=True,
    )
    host_schema = properties.Schema(
        properties.Schema.STRING,
        _("ID or name of the host where the container is."),
        required=False,
        update_allowed=True,
    )
    task_id_schema = properties.Schema(
        properties.Schema.STRING,
        _("Marathon Task ID of the instance"),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'ip',
        'port',
        'container_id',
        'host',
        'task_id',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'ip': ip_schema,
        'port': port_schema,
        'container_id': container_id_schema,
        'host': host_schema,
        'task_id': task_id_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'ip': getattr(IpAddr, 'field_references', {}),
    }

    unique_keys = {
        'ip': getattr(IpAddr, 'unique_keys', {}),
        'my_key': 'ip,task_id,container_id',
    }



class MicroService(AviResource):
    resource_name = "microservice"
    # all schemas
    avi_version_schema = properties.Schema(
        properties.Schema.STRING,
        _("Avi Version to use for the object. Default is 16.4.2. If you plan to use any fields introduced after 16.4.2, then this needs to be explicitly set."),
        required=False,
        update_allowed=True,
    )
    name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    orchestrator_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    application_name_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=True,
        update_allowed=True,
    )
    ip_list_schema = properties.Schema(
        properties.Schema.BOOLEAN,
        _("Flag to indicate if container IP list is provided by cloud connectorThis is applicable for overlay cases."),
        required=False,
        update_allowed=True,
    )
    containers_item_schema = properties.Schema(
        properties.Schema.MAP,
        _("The list of containers for this microservice"),
        schema=MicroServiceContainer.properties_schema,
        required=True,
        update_allowed=False,
    )
    containers_schema = properties.Schema(
        properties.Schema.LIST,
        _("The list of containers for this microservice"),
        schema=containers_item_schema,
        required=False,
        update_allowed=True,
    )
    created_by_schema = properties.Schema(
        properties.Schema.STRING,
        _("Creator name"),
        required=False,
        update_allowed=True,
    )
    cloud_config_cksum_schema = properties.Schema(
        properties.Schema.STRING,
        _("(Introduced in: 17.2.8) Checksum of cloud configuration for Microservice. Internally set by cloud connector"),
        required=False,
        update_allowed=True,
    )
    description_schema = properties.Schema(
        properties.Schema.STRING,
        _(""),
        required=False,
        update_allowed=True,
    )

    # properties list
    PROPERTIES = (
        'avi_version',
        'name',
        'orchestrator_name',
        'application_name',
        'ip_list',
        'containers',
        'created_by',
        'cloud_config_cksum',
        'description',
    )

    # mapping of properties to their schemas
    properties_schema = {
        'avi_version': avi_version_schema,
        'name': name_schema,
        'orchestrator_name': orchestrator_name_schema,
        'application_name': application_name_schema,
        'ip_list': ip_list_schema,
        'containers': containers_schema,
        'created_by': created_by_schema,
        'cloud_config_cksum': cloud_config_cksum_schema,
        'description': description_schema,
    }

    # for supporting get_avi_uuid_by_name functionality
    field_references = {
        'containers': getattr(MicroServiceContainer, 'field_references', {}),
    }

    unique_keys = {
        'containers': getattr(MicroServiceContainer, 'unique_keys', {}),
    }



def resource_mapping():
    return {
        'Avi::LBaaS::MicroService': MicroService,
    }

